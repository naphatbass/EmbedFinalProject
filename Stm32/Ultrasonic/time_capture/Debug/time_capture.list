
time_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000887c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e2c  08008e2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e34  08008e34  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  08009018  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08009018  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120af  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229a  00000000  00000000  000322bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017528  00000000  00000000  00036418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ede  00000000  00000000  0004d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fde  00000000  00000000  0005f81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f17fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d4  00000000  00000000  000f1850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a04 	.word	0x08008a04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008a04 	.word	0x08008a04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_TIM_IC_CaptureCallback>:
uint32_t counter1 = 0;
uint32_t counter2 = 0;
uint32_t timeDiff = 0;
int isFirstCap = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7f1b      	ldrb	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d14e      	bne.n	8000f5e <HAL_TIM_IC_CaptureCallback+0xae>
		if (isFirstCap == 0){
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10a      	bne.n	8000ede <HAL_TIM_IC_CaptureCallback+0x2e>
			/*
			 * 1. Get current count into -> counter1
			 *  // 2. Change edge detection from "rising" -> "falling" || Implicitly done by IOC
			 * 3. Set isFirstCap to -> true;
			 * */
			counter1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f004 f870 	bl	8004fb0 <HAL_TIM_ReadCapturedValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ed4:	6013      	str	r3, [r2, #0]
			isFirstCap = 1;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
			isFirstCap = 0; // set it back to false
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}

	}
}
 8000edc:	e03f      	b.n	8000f5e <HAL_TIM_IC_CaptureCallback+0xae>
			counter2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f004 f865 	bl	8004fb0 <HAL_TIM_ReadCapturedValue>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000eea:	6013      	str	r3, [r2, #0]
			if (counter2 > counter1){
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d907      	bls.n	8000f08 <HAL_TIM_IC_CaptureCallback+0x58>
				timeDiff = counter2 - counter1;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e008      	b.n	8000f1a <HAL_TIM_IC_CaptureCallback+0x6a>
				timeDiff = 65536 + counter2 - counter1;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f16:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000f18:	6013      	str	r3, [r2, #0]
		    sprintf(str, "distance = %.2f\r\n",(timeDiff / 58.2));
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff faf8 	bl	8000514 <__aeabi_ui2d>
 8000f24:	a310      	add	r3, pc, #64	; (adr r3, 8000f68 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc97 	bl	800085c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4913      	ldr	r1, [pc, #76]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000f36:	f005 fb39 	bl	80065ac <siprintf>
		    print(str);
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000f3c:	f000 f866 	bl	800100c <print>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
			isFirstCap = 0; // set it back to false
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0202 	bic.w	r2, r2, #2
 8000f5c:	60da      	str	r2, [r3, #12]
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	9999999a 	.word	0x9999999a
 8000f6c:	404d1999 	.word	0x404d1999
 8000f70:	20000204 	.word	0x20000204
 8000f74:	200001f8 	.word	0x200001f8
 8000f78:	200001fc 	.word	0x200001fc
 8000f7c:	20000200 	.word	0x20000200
 8000f80:	08008a20 	.word	0x08008a20
 8000f84:	20000344 	.word	0x20000344

08000f88 <HCSR04_Read>:

void HCSR04_Read(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <HCSR04_Read+0x48>)
 8000f94:	f001 f822 	bl	8001fdc <HAL_GPIO_WritePin>
	delay_us(2);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 f81d 	bl	8000fd8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <HCSR04_Read+0x48>)
 8000fa6:	f001 f819 	bl	8001fdc <HAL_GPIO_WritePin>
	delay_us(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 f814 	bl	8000fd8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <HCSR04_Read+0x48>)
 8000fb8:	f001 f810 	bl	8001fdc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HCSR04_Read+0x4c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HCSR04_Read+0x4c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0202 	orr.w	r2, r2, #2
 8000fca:	60da      	str	r2, [r3, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	20000214 	.word	0x20000214

08000fd8 <delay_us>:

void delay_us (uint16_t us)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <delay_us+0x30>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8000fea:	bf00      	nop
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <delay_us+0x30>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3f9      	bcc.n	8000fec <delay_us+0x14>
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200002b0 	.word	0x200002b0

0800100c <print>:

void print(char* str){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8e3 	bl	80001e0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <print+0x24>)
 8001024:	f004 fb5d 	bl	80056e2 <HAL_UART_Transmit>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000300 	.word	0x20000300

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fc74 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f826 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f988 	bl	8001354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001044:	f000 f95c 	bl	8001300 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001048:	f000 f906 	bl	8001258 <MX_TIM4_Init>
  MX_TIM3_Init();
 800104c:	f000 f8b6 	bl	80011bc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001050:	f000 f886 	bl	8001160 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <main+0x48>)
 8001056:	f003 fb7b 	bl	8004750 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0x4c>)
 800105e:	f003 fc21 	bl	80048a4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8001062:	f7ff ff91 	bl	8000f88 <HCSR04_Read>
	  	HAL_I2C_Slave_Transmit(&hi2c1,str,sizeof(str),100);
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	2214      	movs	r2, #20
 800106a:	4906      	ldr	r1, [pc, #24]	; (8001084 <main+0x50>)
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <main+0x54>)
 800106e:	f001 f913 	bl	8002298 <HAL_I2C_Slave_Transmit>
	  	HAL_Delay(500);
 8001072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001076:	f000 fcc7 	bl	8001a08 <HAL_Delay>
	  HCSR04_Read();
 800107a:	e7f2      	b.n	8001062 <main+0x2e>
 800107c:	200002b0 	.word	0x200002b0
 8001080:	20000214 	.word	0x20000214
 8001084:	20000344 	.word	0x20000344
 8001088:	2000025c 	.word	0x2000025c

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fe14 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <SystemClock_Config+0xcc>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <SystemClock_Config+0xd0>)
 80010d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f0:	2310      	movs	r3, #16
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010fc:	2310      	movs	r3, #16
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001100:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001104:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001106:	2304      	movs	r3, #4
 8001108:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fe58 	bl	8003dc8 <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800111e:	f000 f989 	bl	8001434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	230f      	movs	r3, #15
 8001124:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f8ba 	bl	80042b8 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800114a:	f000 f973 	bl	8001434 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2202      	movs	r2, #2
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f000 ff37 	bl	8002010 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 f944 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000025c 	.word	0x2000025c
 80011b4:	40005400 	.word	0x40005400
 80011b8:	000186a0 	.word	0x000186a0

080011bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM3_Init+0x94>)
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_TIM3_Init+0x98>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_TIM3_Init+0x94>)
 80011e0:	2253      	movs	r2, #83	; 0x53
 80011e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM3_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM3_Init+0x94>)
 80011ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_TIM3_Init+0x94>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM3_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_TIM3_Init+0x94>)
 8001200:	f003 fa56 	bl	80046b0 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 f913 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_TIM3_Init+0x94>)
 800121c:	f003 fe00 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f905 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_TIM3_Init+0x94>)
 8001238:	f004 f984 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001242:	f000 f8f7 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002b0 	.word	0x200002b0
 8001254:	40000400 	.word	0x40000400

08001258 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_TIM4_Init+0xa0>)
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <MX_TIM4_Init+0xa4>)
 8001278:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM4_Init+0xa0>)
 800127c:	2253      	movs	r2, #83	; 0x53
 800127e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM4_Init+0xa0>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM4_Init+0xa0>)
 8001288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM4_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM4_Init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800129a:	4817      	ldr	r0, [pc, #92]	; (80012f8 <MX_TIM4_Init+0xa0>)
 800129c:	f003 fab2 	bl	8004804 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 f8c5 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_TIM4_Init+0xa0>)
 80012ba:	f004 f943 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80012c4:	f000 f8b6 	bl	8001434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012c8:	230a      	movs	r3, #10
 80012ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM4_Init+0xa0>)
 80012e0:	f003 fd02 	bl	8004ce8 <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80012ea:	f000 f8a3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000214 	.word	0x20000214
 80012fc:	40000800 	.word	0x40000800

08001300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART2_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001338:	f004 f986 	bl	8005648 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f877 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000300 	.word	0x20000300
 8001350:	40004400 	.word	0x40004400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2d      	ldr	r2, [pc, #180]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_GPIO_Init+0xd4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MX_GPIO_Init+0xd4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a26      	ldr	r2, [pc, #152]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_GPIO_Init+0xd8>)
 80013e2:	f000 fdfb 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013fe:	f000 fc69 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001402:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_GPIO_Init+0xd8>)
 800141c:	f000 fc5a 	bl	8001cd4 <HAL_GPIO_Init>

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020800 	.word	0x40020800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147e:	2007      	movs	r0, #7
 8001480:	f000 fbb6 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_I2C_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d134      	bne.n	800151c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_I2C_MspInit+0x98>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_I2C_MspInit+0x98>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_I2C_MspInit+0x98>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <HAL_I2C_MspInit+0x9c>)
 80014ec:	f000 fbf2 	bl	8001cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_I2C_MspInit+0x98>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_I2C_MspInit+0x98>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_I2C_MspInit+0x98>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	201f      	movs	r0, #31
 8001512:	f000 fb78 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001516:	201f      	movs	r0, #31
 8001518:	f000 fb91 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400

08001530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_TIM_Base_MspInit+0x3c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10d      	bne.n	800155e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_TIM_Base_MspInit+0x40>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_TIM_Base_MspInit+0x40>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40000400 	.word	0x40000400
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_TIM_IC_MspInit+0x94>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d133      	bne.n	80015fe <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_TIM_IC_MspInit+0x98>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_TIM_IC_MspInit+0x9c>)
 80015ea:	f000 fb73 	bl	8001cd4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201e      	movs	r0, #30
 80015f4:	f000 fb07 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015f8:	201e      	movs	r0, #30
 80015fa:	f000 fb20 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40000800 	.word	0x40000800
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12b      	bne.n	800168e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_UART_MspInit+0x88>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_UART_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800166e:	230c      	movs	r3, #12
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167e:	2307      	movs	r3, #7
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x8c>)
 800168a:	f000 fb23 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40004400 	.word	0x40004400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f96a 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM4_IRQHandler+0x10>)
 80016fe:	f003 f9eb 	bl	8004ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000214 	.word	0x20000214

0800170c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <I2C1_EV_IRQHandler+0x10>)
 8001712:	f000 fed7 	bl	80024c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000025c 	.word	0x2000025c

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173a:	f004 fa9b 	bl	8005c74 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f004 fa00 	bl	8005c74 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000208 	.word	0x20000208
 80018a8:	20000370 	.word	0x20000370

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f004 f9bf 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fb97 	bl	8001034 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001914:	08008e3c 	.word	0x08008e3c
  ldr r2, =_sbss
 8001918:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800191c:	2000036c 	.word	0x2000036c

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f94f 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fd72 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f967 	bl	8001c5a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f92f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000358 	.word	0x20000358

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000358 	.word	0x20000358

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00c      	b.n	8001caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2205      	movs	r2, #5
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e159      	b.n	8001fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8148 	bne.w	8001f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a2 	beq.w	8001f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e76:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x202>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x2f4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fe>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x1f6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a45      	ldr	r2, [pc, #276]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x1f2>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee8:	4935      	ldr	r1, [pc, #212]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	f67f aea2 	bls.w	8001cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e12b      	b.n	800227a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fa2a 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002074:	f002 faf4 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8002078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a81      	ldr	r2, [pc, #516]	; (8002284 <HAL_I2C_Init+0x274>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d807      	bhi.n	8002094 <HAL_I2C_Init+0x84>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a80      	ldr	r2, [pc, #512]	; (8002288 <HAL_I2C_Init+0x278>)
 8002088:	4293      	cmp	r3, r2
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e006      	b.n	80020a2 <HAL_I2C_Init+0x92>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a7d      	ldr	r2, [pc, #500]	; (800228c <HAL_I2C_Init+0x27c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	bf94      	ite	ls
 800209c:	2301      	movls	r3, #1
 800209e:	2300      	movhi	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e7      	b.n	800227a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a78      	ldr	r2, [pc, #480]	; (8002290 <HAL_I2C_Init+0x280>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <HAL_I2C_Init+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d802      	bhi.n	80020e4 <HAL_I2C_Init+0xd4>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	e009      	b.n	80020f8 <HAL_I2C_Init+0xe8>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4a69      	ldr	r2, [pc, #420]	; (8002294 <HAL_I2C_Init+0x284>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	3301      	adds	r3, #1
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800210a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	495c      	ldr	r1, [pc, #368]	; (8002284 <HAL_I2C_Init+0x274>)
 8002114:	428b      	cmp	r3, r1
 8002116:	d819      	bhi.n	800214c <HAL_I2C_Init+0x13c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e59      	subs	r1, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fbb1 f3f3 	udiv	r3, r1, r3
 8002126:	1c59      	adds	r1, r3, #1
 8002128:	f640 73fc 	movw	r3, #4092	; 0xffc
 800212c:	400b      	ands	r3, r1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_I2C_Init+0x138>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e59      	subs	r1, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002146:	e051      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 8002148:	2304      	movs	r3, #4
 800214a:	e04f      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d111      	bne.n	8002178 <HAL_I2C_Init+0x168>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e012      	b.n	800219e <HAL_I2C_Init+0x18e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	0099      	lsls	r1, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	fbb0 f3f3 	udiv	r3, r0, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x196>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e022      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10e      	bne.n	80021cc <HAL_I2C_Init+0x1bc>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e58      	subs	r0, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	440b      	add	r3, r1
 80021bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	e00f      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	0099      	lsls	r1, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800221a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6911      	ldr	r1, [r2, #16]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	000186a0 	.word	0x000186a0
 8002288:	001e847f 	.word	0x001e847f
 800228c:	003d08ff 	.word	0x003d08ff
 8002290:	431bde83 	.word	0x431bde83
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff fba2 	bl	80019f0 <HAL_GetTick>
 80022ac:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	f040 80fb 	bne.w	80024b2 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_I2C_Slave_Transmit+0x30>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0f3      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Slave_Transmit+0x42>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0ec      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d007      	beq.n	8002300 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2221      	movs	r2, #33	; 0x21
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a5f      	ldr	r2, [pc, #380]	; (80024bc <HAL_I2C_Slave_Transmit+0x224>)
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002350:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	4959      	ldr	r1, [pc, #356]	; (80024c0 <HAL_I2C_Slave_Transmit+0x228>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 fc1f 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0a3      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800238a:	d165      	bne.n	8002458 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	494a      	ldr	r1, [pc, #296]	; (80024c0 <HAL_I2C_Slave_Transmit+0x228>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f001 fc02 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e086      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023bc:	e04c      	b.n	8002458 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f001 fc43 	bl	8003c4e <I2C_WaitOnTXEFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023dc:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e068      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11b      	bne.n	8002458 <HAL_I2C_Slave_Transmit+0x1c0>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ae      	bne.n	80023be <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f001 fb97 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01b      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002484:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	ffff0000 	.word	0xffff0000
 80024c0:	00010002 	.word	0x00010002

080024c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d003      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x38>
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	f040 80c1 	bne.w	800267e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_I2C_EV_IRQHandler+0x6e>
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800251c:	d003      	beq.n	8002526 <HAL_I2C_EV_IRQHandler+0x62>
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002524:	d101      	bne.n	800252a <HAL_I2C_EV_IRQHandler+0x66>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_I2C_EV_IRQHandler+0x68>
 800252a:	2300      	movs	r3, #0
 800252c:	2b01      	cmp	r3, #1
 800252e:	f000 8132 	beq.w	8002796 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00c      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x92>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	0a5b      	lsrs	r3, r3, #9
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fc22 	bl	8003d92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fcd2 	bl	8002ef8 <I2C_Master_SB>
 8002554:	e092      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0xb2>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fd48 	bl	8003004 <I2C_Master_ADD10>
 8002574:	e082      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0xd2>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fd62 	bl	8003058 <I2C_Master_ADDR>
 8002594:	e072      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03b      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b0:	f000 80f3 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	09db      	lsrs	r3, r3, #7
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00f      	beq.n	80025e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f94c 	bl	8002876 <I2C_MasterTransmit_TXE>
 80025de:	e04d      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80d6 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	0a5b      	lsrs	r3, r3, #9
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80cf 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
 80025fe:	2b21      	cmp	r3, #33	; 0x21
 8002600:	d103      	bne.n	800260a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9d3 	bl	80029ae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002608:	e0c7      	b.n	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	f040 80c4 	bne.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa41 	bl	8002a9a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002618:	e0bf      	b.n	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002628:	f000 80b7 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00f      	beq.n	8002658 <HAL_I2C_EV_IRQHandler+0x194>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_I2C_EV_IRQHandler+0x194>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fab6 	bl	8002bc2 <I2C_MasterReceive_RXNE>
 8002656:	e011      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 809a 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	0a5b      	lsrs	r3, r3, #9
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8093 	beq.w	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb55 	bl	8002d24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800267a:	e08e      	b.n	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
 800267c:	e08d      	b.n	800279a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e007      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	0a5b      	lsrs	r3, r3, #9
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80026c8:	69b9      	ldr	r1, [r7, #24]
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 ff13 	bl	80034f6 <I2C_Slave_ADDR>
 80026d0:	e066      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	0a5b      	lsrs	r3, r3, #9
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 ff4e 	bl	800358c <I2C_Slave_STOPF>
 80026f0:	e056      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026f2:	7bbb      	ldrb	r3, [r7, #14]
 80026f4:	2b21      	cmp	r3, #33	; 0x21
 80026f6:	d002      	beq.n	80026fe <HAL_I2C_EV_IRQHandler+0x23a>
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	2b29      	cmp	r3, #41	; 0x29
 80026fc:	d125      	bne.n	800274a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	09db      	lsrs	r3, r3, #7
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00f      	beq.n	800272a <HAL_I2C_EV_IRQHandler+0x266>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	0a9b      	lsrs	r3, r3, #10
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_I2C_EV_IRQHandler+0x266>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fe29 	bl	800337a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002728:	e039      	b.n	800279e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d033      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x2da>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	0a5b      	lsrs	r3, r3, #9
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02d      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fe56 	bl	80033f4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002748:	e029      	b.n	800279e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00f      	beq.n	8002776 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	0a9b      	lsrs	r3, r3, #10
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fe61 	bl	8003436 <I2C_SlaveReceive_RXNE>
 8002774:	e014      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	0a5b      	lsrs	r3, r3, #9
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fe8f 	bl	80034b2 <I2C_SlaveReceive_BTF>
 8002794:	e004      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800279e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
 8002802:	4613      	mov	r3, r2
 8002804:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d150      	bne.n	800293e <I2C_MasterTransmit_TXE+0xc8>
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b21      	cmp	r3, #33	; 0x21
 80028a0:	d14d      	bne.n	800293e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d01d      	beq.n	80028e4 <I2C_MasterTransmit_TXE+0x6e>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d01a      	beq.n	80028e4 <I2C_MasterTransmit_TXE+0x6e>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	d016      	beq.n	80028e4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2211      	movs	r2, #17
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff62 	bl	80027a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e2:	e060      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d107      	bne.n	800292e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff7d 	bl	8002826 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800292c:	e03b      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff35 	bl	80027a6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293c:	e033      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b21      	cmp	r3, #33	; 0x21
 8002942:	d005      	beq.n	8002950 <I2C_MasterTransmit_TXE+0xda>
 8002944:	7bbb      	ldrb	r3, [r7, #14]
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d12d      	bne.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b22      	cmp	r3, #34	; 0x22
 800294e:	d12a      	bne.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002968:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800296a:	e01c      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d103      	bne.n	8002980 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f88e 	bl	8002a9a <I2C_MemoryTransmit_TXE_BTF>
}
 800297e:	e012      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029a4:	e7ff      	b.n	80029a6 <I2C_MasterTransmit_TXE+0x130>
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b21      	cmp	r3, #33	; 0x21
 80029c6:	d164      	bne.n	8002a92 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029f6:	e04c      	b.n	8002a92 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d01d      	beq.n	8002a3a <I2C_MasterTransmit_BTF+0x8c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d01a      	beq.n	8002a3a <I2C_MasterTransmit_BTF+0x8c>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a0a:	d016      	beq.n	8002a3a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a1a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2211      	movs	r2, #17
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff feb7 	bl	80027a6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a38:	e02b      	b.n	8002a92 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a48:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d107      	bne.n	8002a84 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fed2 	bl	8002826 <HAL_I2C_MemTxCpltCallback>
}
 8002a82:	e006      	b.n	8002a92 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe8a 	bl	80027a6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11d      	bne.n	8002aee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10b      	bne.n	8002ad2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	1c9a      	adds	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ad0:	e073      	b.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	121b      	asrs	r3, r3, #8
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002aec:	e065      	b.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10b      	bne.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b0c:	e055      	b.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d151      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b22      	cmp	r3, #34	; 0x22
 8002b1a:	d10d      	bne.n	8002b38 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b36:	e040      	b.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b21      	cmp	r3, #33	; 0x21
 8002b46:	d112      	bne.n	8002b6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b6c:	e025      	b.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d120      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b21      	cmp	r3, #33	; 0x21
 8002b7c:	d11d      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fe36 	bl	8002826 <HAL_I2C_MemTxCpltCallback>
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b22      	cmp	r3, #34	; 0x22
 8002bd4:	f040 80a2 	bne.w	8002d1c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d921      	bls.n	8002c2a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	f040 8082 	bne.w	8002d1c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c28:	e078      	b.n	8002d1c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d074      	beq.n	8002d1c <I2C_MasterReceive_RXNE+0x15a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d002      	beq.n	8002c3e <I2C_MasterReceive_RXNE+0x7c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d16e      	bne.n	8002d1c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f001 f846 	bl	8003cd0 <I2C_WaitOnSTOPRequestThroughIT>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d142      	bne.n	8002cd0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d10a      	bne.n	8002cba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fdc1 	bl	800283a <HAL_I2C_MemRxCpltCallback>
}
 8002cb8:	e030      	b.n	8002d1c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2212      	movs	r2, #18
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fd76 	bl	80027ba <HAL_I2C_MasterRxCpltCallback>
}
 8002cce:	e025      	b.n	8002d1c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fd99 	bl	800284e <HAL_I2C_ErrorCallback>
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d72:	e0bd      	b.n	8002ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d129      	bne.n	8002dd2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d00a      	beq.n	8002daa <I2C_MasterReceive_BTF+0x86>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d007      	beq.n	8002daa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dd0:	e08e      	b.n	8002ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d176      	bne.n	8002eca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <I2C_MasterReceive_BTF+0xc4>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d108      	bne.n	8002dfa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e019      	b.n	8002e2e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d002      	beq.n	8002e06 <I2C_MasterReceive_BTF+0xe2>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d108      	bne.n	8002e18 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e00a      	b.n	8002e2e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d007      	beq.n	8002e2e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d10a      	bne.n	8002eb4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fcc4 	bl	800283a <HAL_I2C_MemRxCpltCallback>
}
 8002eb2:	e01d      	b.n	8002ef0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2212      	movs	r2, #18
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fc79 	bl	80027ba <HAL_I2C_MasterRxCpltCallback>
}
 8002ec8:	e012      	b.n	8002ef0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d117      	bne.n	8002f3c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f24:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f26:	e067      	b.n	8002ff8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]
}
 8002f3a:	e05d      	b.n	8002ff8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f44:	d133      	bne.n	8002fae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b21      	cmp	r3, #33	; 0x21
 8002f50:	d109      	bne.n	8002f66 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	e008      	b.n	8002f78 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <I2C_Master_SB+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d032      	beq.n	8002ff8 <I2C_Master_SB+0x100>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02d      	beq.n	8002ff8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002faa:	605a      	str	r2, [r3, #4]
}
 8002fac:	e024      	b.n	8002ff8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	11db      	asrs	r3, r3, #7
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 0306 	and.w	r3, r3, #6
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f063 030f 	orn	r3, r3, #15
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
}
 8002fd2:	e011      	b.n	8002ff8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10d      	bne.n	8002ff8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	11db      	asrs	r3, r3, #7
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0306 	and.w	r3, r3, #6
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f063 030e 	orn	r3, r3, #14
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <I2C_Master_ADD10+0x26>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <I2C_Master_ADD10+0x48>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003058:	b480      	push	{r7}
 800305a:	b091      	sub	sp, #68	; 0x44
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b22      	cmp	r3, #34	; 0x22
 8003080:	f040 8169 	bne.w	8003356 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <I2C_Master_ADDR+0x54>
 800308c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d10b      	bne.n	80030ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	e160      	b.n	800336e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <I2C_Master_ADDR+0x98>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030bc:	d118      	bne.n	80030f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50
 80030ee:	e13e      	b.n	800336e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d113      	bne.n	8003122 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e115      	b.n	800334e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 808a 	bne.w	8003242 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003134:	d137      	bne.n	80031a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003154:	d113      	bne.n	800317e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	e0e7      	b.n	800334e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e0d3      	b.n	800334e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d02e      	beq.n	800320a <I2C_Master_ADDR+0x1b2>
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d02b      	beq.n	800320a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	d102      	bne.n	80031be <I2C_Master_ADDR+0x166>
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d125      	bne.n	800320a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00e      	beq.n	80031e2 <I2C_Master_ADDR+0x18a>
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d00b      	beq.n	80031e2 <I2C_Master_ADDR+0x18a>
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d008      	beq.n	80031e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	e0a1      	b.n	800334e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e085      	b.n	800334e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d14d      	bne.n	80032e8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	2b04      	cmp	r3, #4
 8003250:	d016      	beq.n	8003280 <I2C_Master_ADDR+0x228>
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	2b02      	cmp	r3, #2
 8003256:	d013      	beq.n	8003280 <I2C_Master_ADDR+0x228>
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2b10      	cmp	r3, #16
 800325c:	d010      	beq.n	8003280 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e007      	b.n	8003290 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800328e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329e:	d117      	bne.n	80032d0 <I2C_Master_ADDR+0x278>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032a6:	d00b      	beq.n	80032c0 <I2C_Master_ADDR+0x268>
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d008      	beq.n	80032c0 <I2C_Master_ADDR+0x268>
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d005      	beq.n	80032c0 <I2C_Master_ADDR+0x268>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d002      	beq.n	80032c0 <I2C_Master_ADDR+0x268>
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d107      	bne.n	80032d0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	e032      	b.n	800334e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003306:	d117      	bne.n	8003338 <I2C_Master_ADDR+0x2e0>
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330e:	d00b      	beq.n	8003328 <I2C_Master_ADDR+0x2d0>
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	2b01      	cmp	r3, #1
 8003314:	d008      	beq.n	8003328 <I2C_Master_ADDR+0x2d0>
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	2b08      	cmp	r3, #8
 800331a:	d005      	beq.n	8003328 <I2C_Master_ADDR+0x2d0>
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	2b10      	cmp	r3, #16
 8003320:	d002      	beq.n	8003328 <I2C_Master_ADDR+0x2d0>
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b20      	cmp	r3, #32
 8003326:	d107      	bne.n	8003338 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003336:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003354:	e00b      	b.n	800336e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	e7ff      	b.n	800336e <I2C_Master_ADDR+0x316>
 800336e:	bf00      	nop
 8003370:	3744      	adds	r7, #68	; 0x44
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02b      	beq.n	80033ec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d114      	bne.n	80033ec <I2C_SlaveTransmit_TXE+0x72>
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b29      	cmp	r3, #41	; 0x29
 80033c6:	d111      	bne.n	80033ec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2221      	movs	r2, #33	; 0x21
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2228      	movs	r2, #40	; 0x28
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff f9f1 	bl	80027ce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02c      	beq.n	80034aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d114      	bne.n	80034aa <I2C_SlaveReceive_RXNE+0x74>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b2a      	cmp	r3, #42	; 0x2a
 8003484:	d111      	bne.n	80034aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003494:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2222      	movs	r2, #34	; 0x22
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2228      	movs	r2, #40	; 0x28
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff f99c 	bl	80027e2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003510:	2b28      	cmp	r3, #40	; 0x28
 8003512:	d127      	bne.n	8003564 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003522:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	09db      	lsrs	r3, r3, #7
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	81bb      	strh	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003556:	89ba      	ldrh	r2, [r7, #12]
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff f94a 	bl	80027f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003562:	e00e      	b.n	8003582 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e8:	d172      	bne.n	80036d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b22      	cmp	r3, #34	; 0x22
 80035ee:	d002      	beq.n	80035f6 <I2C_Slave_STOPF+0x6a>
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b2a      	cmp	r3, #42	; 0x2a
 80035f4:	d135      	bne.n	8003662 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fb41 	bl	8001cb6 <HAL_DMA_GetState>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d049      	beq.n	80036ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <I2C_Slave_STOPF+0x258>)
 8003640:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fb13 	bl	8001c72 <HAL_DMA_Abort_IT>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d03d      	beq.n	80036ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003660:	e035      	b.n	80036ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fb0b 	bl	8001cb6 <HAL_DMA_GetState>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d014      	beq.n	80036d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	4a4e      	ldr	r2, [pc, #312]	; (80037e4 <I2C_Slave_STOPF+0x258>)
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fadd 	bl	8001c72 <HAL_DMA_Abort_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
 80036cc:	e000      	b.n	80036d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03e      	beq.n	8003758 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d112      	bne.n	800370e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d112      	bne.n	8003742 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f843 	bl	80037ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003766:	e039      	b.n	80037dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b2a      	cmp	r3, #42	; 0x2a
 800376c:	d109      	bne.n	8003782 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2228      	movs	r2, #40	; 0x28
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff f830 	bl	80027e2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b28      	cmp	r3, #40	; 0x28
 800378c:	d111      	bne.n	80037b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <I2C_Slave_STOPF+0x25c>)
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff f831 	bl	8002812 <HAL_I2C_ListenCpltCallback>
}
 80037b0:	e014      	b.n	80037dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2b22      	cmp	r3, #34	; 0x22
 80037b8:	d002      	beq.n	80037c0 <I2C_Slave_STOPF+0x234>
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b22      	cmp	r3, #34	; 0x22
 80037be:	d10d      	bne.n	80037dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff f803 	bl	80027e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08003a51 	.word	0x08003a51
 80037e8:	ffff0000 	.word	0xffff0000

080037ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003802:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	2b10      	cmp	r3, #16
 8003808:	d002      	beq.n	8003810 <I2C_ITError+0x24>
 800380a:	7bbb      	ldrb	r3, [r7, #14]
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d10a      	bne.n	8003826 <I2C_ITError+0x3a>
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b22      	cmp	r3, #34	; 0x22
 8003814:	d107      	bne.n	8003826 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003824:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800382c:	2b28      	cmp	r3, #40	; 0x28
 800382e:	d107      	bne.n	8003840 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2228      	movs	r2, #40	; 0x28
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800383e:	e015      	b.n	800386c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d00a      	beq.n	8003866 <I2C_ITError+0x7a>
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b60      	cmp	r3, #96	; 0x60
 8003854:	d007      	beq.n	8003866 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d162      	bne.n	8003942 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d020      	beq.n	80038dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4a6a      	ldr	r2, [pc, #424]	; (8003a48 <I2C_ITError+0x25c>)
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe f9e3 	bl	8001c72 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8089 	beq.w	80039c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038d6:	4610      	mov	r0, r2
 80038d8:	4798      	blx	r3
 80038da:	e074      	b.n	80039c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	4a59      	ldr	r2, [pc, #356]	; (8003a48 <I2C_ITError+0x25c>)
 80038e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe f9c2 	bl	8001c72 <HAL_DMA_Abort_IT>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d068      	beq.n	80039c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d10b      	bne.n	800391a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
 8003940:	e041      	b.n	80039c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b60      	cmp	r3, #96	; 0x60
 800394c:	d125      	bne.n	800399a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d10b      	bne.n	8003982 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe ff65 	bl	8002862 <HAL_I2C_AbortCpltCallback>
 8003998:	e015      	b.n	80039c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d10b      	bne.n	80039c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fe ff44 	bl	800284e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10e      	bne.n	80039f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d113      	bne.n	8003a40 <I2C_ITError+0x254>
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b28      	cmp	r3, #40	; 0x28
 8003a1c:	d110      	bne.n	8003a40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <I2C_ITError+0x260>)
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fe fee9 	bl	8002812 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	ffff0000 	.word	0xffff0000

08003a50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a6a:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <I2C_DMAAbort+0x148>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	4a4a      	ldr	r2, [pc, #296]	; (8003b9c <I2C_DMAAbort+0x14c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0a1a      	lsrs	r2, r3, #8
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0220 	orr.w	r2, r3, #32
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a96:	e00a      	b.n	8003aae <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d0ea      	beq.n	8003a84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	2200      	movs	r2, #0
 8003abc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	2200      	movs	r2, #0
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003adc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	2200      	movs	r2, #0
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	2200      	movs	r2, #0
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d10e      	bne.n	8003b3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7fe fe93 	bl	8002862 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b3c:	e027      	b.n	8003b8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b44:	2b28      	cmp	r3, #40	; 0x28
 8003b46:	d117      	bne.n	8003b78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2228      	movs	r2, #40	; 0x28
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b76:	e007      	b.n	8003b88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b88:	6978      	ldr	r0, [r7, #20]
 8003b8a:	f7fe fe60 	bl	800284e <HAL_I2C_ErrorCallback>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	14f8b589 	.word	0x14f8b589

08003ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	e025      	b.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d021      	beq.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd ff19 	bl	80019f0 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e023      	b.n	8003c46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10d      	bne.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	e00c      	b.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d0b6      	beq.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c5a:	e02d      	b.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f869 	bl	8003d34 <I2C_IsAcknowledgeFailed>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e02d      	b.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d021      	beq.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7fd febc 	bl	80019f0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d116      	bne.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d1ca      	bne.n	8003c5c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	0a1a      	lsrs	r2, r3, #8
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d107      	bne.n	8003d0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e008      	b.n	8003d20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d0e9      	beq.n	8003cf2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	14f8b589 	.word	0x14f8b589

08003d34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d11b      	bne.n	8003d84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003da2:	d103      	bne.n	8003dac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003daa:	e007      	b.n	8003dbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003db4:	d102      	bne.n	8003dbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2208      	movs	r2, #8
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e264      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d075      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de6:	4ba3      	ldr	r3, [pc, #652]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df2:	4ba0      	ldr	r3, [pc, #640]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d112      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4b9d      	ldr	r3, [pc, #628]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4b99      	ldr	r3, [pc, #612]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x108>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d157      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e23f      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x74>
 8003e2e:	4b91      	ldr	r3, [pc, #580]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a90      	ldr	r2, [pc, #576]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x98>
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a8a      	ldr	r2, [pc, #552]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b88      	ldr	r3, [pc, #544]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a87      	ldr	r2, [pc, #540]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e60:	4b84      	ldr	r3, [pc, #528]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a83      	ldr	r2, [pc, #524]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b81      	ldr	r3, [pc, #516]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a80      	ldr	r2, [pc, #512]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fdb6 	bl	80019f0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fd fdb2 	bl	80019f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e204      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0xc0>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fda2 	bl	80019f0 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fd fd9e 	bl	80019f0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1f0      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xe8>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d063      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d11c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e1c4      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4952      	ldr	r1, [pc, #328]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e03a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_OscConfig+0x2b0>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fd57 	bl	80019f0 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fd fd53 	bl	80019f0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1a5      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4940      	ldr	r1, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_OscConfig+0x2b0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd fd36 	bl	80019f0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fd fd32 	bl	80019f0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e184      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d030      	beq.n	8004014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_OscConfig+0x2b4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fd fd16 	bl	80019f0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fd fd12 	bl	80019f0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e164      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x200>
 8003fe6:	e015      	b.n	8004014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x2b4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fd fcff 	bl	80019f0 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fcfb 	bl	80019f0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e14d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a0 	beq.w	8004162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d121      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406a:	f7fd fcc1 	bl	80019f0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	e011      	b.n	8004096 <HAL_RCC_OscConfig+0x2ce>
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	42470000 	.word	0x42470000
 800407c:	42470e80 	.word	0x42470e80
 8004080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004084:	f7fd fcb4 	bl	80019f0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e106      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x4e4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
 80040aa:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a80      	ldr	r2, [pc, #512]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	e01c      	b.n	80040f2 <HAL_RCC_OscConfig+0x32a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x312>
 80040c0:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a7a      	ldr	r2, [pc, #488]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	4b78      	ldr	r3, [pc, #480]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a77      	ldr	r2, [pc, #476]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0x32a>
 80040da:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a74      	ldr	r2, [pc, #464]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a71      	ldr	r2, [pc, #452]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fd fc79 	bl	80019f0 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fc75 	bl	80019f0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0c5      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCC_OscConfig+0x33a>
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004126:	f7fd fc63 	bl	80019f0 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd fc5f 	bl	80019f0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0af      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	4b5a      	ldr	r3, [pc, #360]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004156:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800415c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 809b 	beq.w	80042a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d05c      	beq.n	8004232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d141      	bne.n	8004204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b4c      	ldr	r3, [pc, #304]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fd fc33 	bl	80019f0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fd fc2f 	bl	80019f0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e081      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	019b      	lsls	r3, r3, #6
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	3b01      	subs	r3, #1
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	4937      	ldr	r1, [pc, #220]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fc08 	bl	80019f0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd fc04 	bl	80019f0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e056      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x41c>
 8004202:	e04e      	b.n	80042a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fd fbf1 	bl	80019f0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fd fbed 	bl	80019f0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e03f      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x44a>
 8004230:	e037      	b.n	80042a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e032      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d028      	beq.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d121      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d11a      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004274:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004276:	4293      	cmp	r3, r2
 8004278:	d111      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	3b01      	subs	r3, #1
 8004288:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d107      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40007000 	.word	0x40007000
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470060 	.word	0x42470060

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0cc      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b68      	ldr	r3, [pc, #416]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d90c      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d044      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d119      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	2b03      	cmp	r3, #3
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e067      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4934      	ldr	r1, [pc, #208]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fd fb22 	bl	80019f0 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd fb1e 	bl	80019f0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20c      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fa82 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	08008a34 	.word	0x08008a34
 800447c:	20000000 	.word	0x20000000
 8004480:	20000004 	.word	0x20000004

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80bd 	bhi.w	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e0b7      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044ba:	60bb      	str	r3, [r7, #8]
       break;
 80044bc:	e0b7      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044c0:	60bb      	str	r3, [r7, #8]
      break;
 80044c2:	e0b4      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04d      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	ea02 0800 	and.w	r8, r2, r0
 80044f2:	ea03 0901 	and.w	r9, r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	014b      	lsls	r3, r1, #5
 8004504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004508:	0142      	lsls	r2, r0, #5
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	ebb0 0008 	subs.w	r0, r0, r8
 8004512:	eb61 0109 	sbc.w	r1, r1, r9
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004524:	0182      	lsls	r2, r0, #6
 8004526:	1a12      	subs	r2, r2, r0
 8004528:	eb63 0301 	sbc.w	r3, r3, r1
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453a:	00d0      	lsls	r0, r2, #3
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	eb12 0208 	adds.w	r2, r2, r8
 8004544:	eb43 0309 	adc.w	r3, r3, r9
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	0259      	lsls	r1, r3, #9
 8004552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004556:	0250      	lsls	r0, r2, #9
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fc fb26 	bl	8000bb8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e04a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	461a      	mov	r2, r3
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	ea02 0400 	and.w	r4, r2, r0
 800458e:	ea03 0501 	and.w	r5, r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	014b      	lsls	r3, r1, #5
 80045a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045a4:	0142      	lsls	r2, r0, #5
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	1b00      	subs	r0, r0, r4
 80045ac:	eb61 0105 	sbc.w	r1, r1, r5
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	018b      	lsls	r3, r1, #6
 80045ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045be:	0182      	lsls	r2, r0, #6
 80045c0:	1a12      	subs	r2, r2, r0
 80045c2:	eb63 0301 	sbc.w	r3, r3, r1
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0299      	lsls	r1, r3, #10
 80045ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045ee:	0290      	lsls	r0, r2, #10
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f7fc fada 	bl	8000bb8 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4613      	mov	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800462a:	60bb      	str	r3, [r7, #8]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	68bb      	ldr	r3, [r7, #8]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	00f42400 	.word	0x00f42400
 8004644:	007a1200 	.word	0x007a1200

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCC_GetHCLKFreq+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000000 	.word	0x20000000

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff0 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	08008a44 	.word	0x08008a44

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800468c:	f7ff ffdc 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0b5b      	lsrs	r3, r3, #13
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	; (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	08008a44 	.word	0x08008a44

080046b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e041      	b.n	8004746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc ff2a 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 fcca 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e03c      	b.n	80047e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_TIM_Base_Start+0xa0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_TIM_Base_Start+0x5c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d013      	beq.n	80047ac <HAL_TIM_Base_Start+0x5c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_TIM_Base_Start+0xa4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIM_Base_Start+0x5c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_TIM_Base_Start+0xa8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIM_Base_Start+0x5c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_TIM_Base_Start+0xac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_Base_Start+0x5c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <HAL_TIM_Base_Start+0xb0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d111      	bne.n	80047d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d010      	beq.n	80047e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	e007      	b.n	80047e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fc fea2 	bl	8001574 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fc20 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_IC_Start_IT+0x1e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e013      	b.n	80048ea <HAL_TIM_IC_Start_IT+0x46>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_IC_Start_IT+0x2e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e00b      	b.n	80048ea <HAL_TIM_IC_Start_IT+0x46>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_IC_Start_IT+0x3e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e003      	b.n	80048ea <HAL_TIM_IC_Start_IT+0x46>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_TIM_IC_Start_IT+0x58>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e013      	b.n	8004924 <HAL_TIM_IC_Start_IT+0x80>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d104      	bne.n	800490c <HAL_TIM_IC_Start_IT+0x68>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e00b      	b.n	8004924 <HAL_TIM_IC_Start_IT+0x80>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d104      	bne.n	800491c <HAL_TIM_IC_Start_IT+0x78>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e003      	b.n	8004924 <HAL_TIM_IC_Start_IT+0x80>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004922:	b2db      	uxtb	r3, r3
 8004924:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d102      	bne.n	8004932 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800492c:	7b7b      	ldrb	r3, [r7, #13]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0c2      	b.n	8004abc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <HAL_TIM_IC_Start_IT+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	e013      	b.n	800496e <HAL_TIM_IC_Start_IT+0xca>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d104      	bne.n	8004956 <HAL_TIM_IC_Start_IT+0xb2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	e00b      	b.n	800496e <HAL_TIM_IC_Start_IT+0xca>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d104      	bne.n	8004966 <HAL_TIM_IC_Start_IT+0xc2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	e003      	b.n	800496e <HAL_TIM_IC_Start_IT+0xca>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_IT+0xda>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	e013      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x102>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d104      	bne.n	800498e <HAL_TIM_IC_Start_IT+0xea>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x102>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start_IT+0xfa>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	e003      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x102>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d841      	bhi.n	8004a30 <HAL_TIM_IC_Start_IT+0x18c>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <HAL_TIM_IC_Start_IT+0x110>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a31 	.word	0x08004a31
 80049bc:	08004a31 	.word	0x08004a31
 80049c0:	08004a31 	.word	0x08004a31
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004a31 	.word	0x08004a31
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	08004a31 	.word	0x08004a31
 80049e4:	08004a1f 	.word	0x08004a1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0202 	orr.w	r2, r2, #2
 80049f6:	60da      	str	r2, [r3, #12]
      break;
 80049f8:	e01d      	b.n	8004a36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0204 	orr.w	r2, r2, #4
 8004a08:	60da      	str	r2, [r3, #12]
      break;
 8004a0a:	e014      	b.n	8004a36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	60da      	str	r2, [r3, #12]
      break;
 8004a1c:	e00b      	b.n	8004a36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0210 	orr.w	r2, r2, #16
 8004a2c:	60da      	str	r2, [r3, #12]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d13e      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fd57 	bl	80054f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_TIM_IC_Start_IT+0x220>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d013      	beq.n	8004a86 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_TIM_IC_Start_IT+0x224>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_TIM_IC_Start_IT+0x228>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <HAL_TIM_IC_Start_IT+0x22c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <HAL_TIM_IC_Start_IT+0x230>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d111      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d010      	beq.n	8004aba <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	e007      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000

08004ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0202 	mvn.w	r2, #2
 8004b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc f9c8 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa92 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fa99 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0204 	mvn.w	r2, #4
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc f99e 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa68 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa6f 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0208 	mvn.w	r2, #8
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc f974 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa3e 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa45 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0210 	mvn.w	r2, #16
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2208      	movs	r2, #8
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc f94a 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa14 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa1b 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0201 	mvn.w	r2, #1
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9ee 	bl	8005038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fcd6 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d10e      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d107      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9e0 	bl	8005074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0220 	mvn.w	r2, #32
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fca0 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e088      	b.n	8004e18 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11b      	bne.n	8004d4c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6819      	ldr	r1, [r3, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f000 fa30 	bl	8005188 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 020c 	bic.w	r2, r2, #12
 8004d36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6999      	ldr	r1, [r3, #24]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	619a      	str	r2, [r3, #24]
 8004d4a:	e060      	b.n	8004e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d11c      	bne.n	8004d8c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f000 faa8 	bl	80052b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6999      	ldr	r1, [r3, #24]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	021a      	lsls	r2, r3, #8
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
 8004d8a:	e040      	b.n	8004e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11b      	bne.n	8004dca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f000 faf5 	bl	8005390 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 020c 	bic.w	r2, r2, #12
 8004db4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	61da      	str	r2, [r3, #28]
 8004dc8:	e021      	b.n	8004e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d11c      	bne.n	8004e0a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 fb12 	bl	8005408 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004df2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69d9      	ldr	r1, [r3, #28]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	61da      	str	r2, [r3, #28]
 8004e08:	e001      	b.n	8004e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_ConfigClockSource+0x1c>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0b4      	b.n	8004fa6 <HAL_TIM_ConfigClockSource+0x186>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e74:	d03e      	beq.n	8004ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7a:	f200 8087 	bhi.w	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e82:	f000 8086 	beq.w	8004f92 <HAL_TIM_ConfigClockSource+0x172>
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d87f      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b70      	cmp	r3, #112	; 0x70
 8004e8e:	d01a      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d87b      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b60      	cmp	r3, #96	; 0x60
 8004e96:	d050      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x11a>
 8004e98:	2b60      	cmp	r3, #96	; 0x60
 8004e9a:	d877      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b50      	cmp	r3, #80	; 0x50
 8004e9e:	d03c      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0xfa>
 8004ea0:	2b50      	cmp	r3, #80	; 0x50
 8004ea2:	d873      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d058      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x13a>
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d86f      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d064      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x15a>
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d86b      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d060      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x15a>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d867      	bhi.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d05c      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d05a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	e062      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6899      	ldr	r1, [r3, #8]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f000 faef 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	609a      	str	r2, [r3, #8]
      break;
 8004ef2:	e04f      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f000 fad8 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f16:	609a      	str	r2, [r3, #8]
      break;
 8004f18:	e03c      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 f996 	bl	8005258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2150      	movs	r1, #80	; 0x50
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 faa5 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f38:	e02c      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f000 f9f2 	bl	8005330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2160      	movs	r1, #96	; 0x60
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fa95 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f58:	e01c      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6859      	ldr	r1, [r3, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f000 f976 	bl	8005258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2140      	movs	r1, #64	; 0x40
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fa85 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f78:	e00c      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f000 fa7c 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f8a:	e003      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d831      	bhi.n	8005028 <HAL_TIM_ReadCapturedValue+0x78>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	0800500b 	.word	0x0800500b
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08005029 	.word	0x08005029
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005029 	.word	0x08005029
 8004ffc:	0800501f 	.word	0x0800501f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	60fb      	str	r3, [r7, #12]

      break;
 8005008:	e00f      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	60fb      	str	r3, [r7, #12]

      break;
 8005012:	e00a      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	60fb      	str	r3, [r7, #12]

      break;
 800501c:	e005      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	60fb      	str	r3, [r7, #12]

      break;
 8005026:	e000      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005028:	bf00      	nop
  }

  return tmpreg;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a34      	ldr	r2, [pc, #208]	; (800516c <TIM_Base_SetConfig+0xe4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a31      	ldr	r2, [pc, #196]	; (8005170 <TIM_Base_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <TIM_Base_SetConfig+0xec>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x38>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <TIM_Base_SetConfig+0xf0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a25      	ldr	r2, [pc, #148]	; (800516c <TIM_Base_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01b      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d017      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <TIM_Base_SetConfig+0xe8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <TIM_Base_SetConfig+0xec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00f      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <TIM_Base_SetConfig+0xf0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <TIM_Base_SetConfig+0xf4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <TIM_Base_SetConfig+0xf8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <TIM_Base_SetConfig+0xfc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <TIM_Base_SetConfig+0xe4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d103      	bne.n	8005158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800

08005188 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <TIM_TI1_SetConfig+0xbc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <TIM_TI1_SetConfig+0x56>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d00f      	beq.n	80051de <TIM_TI1_SetConfig+0x56>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a21      	ldr	r2, [pc, #132]	; (8005248 <TIM_TI1_SetConfig+0xc0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_TI1_SetConfig+0x56>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <TIM_TI1_SetConfig+0xc4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_TI1_SetConfig+0x56>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <TIM_TI1_SetConfig+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_TI1_SetConfig+0x56>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <TIM_TI1_SetConfig+0xcc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <TIM_TI1_SetConfig+0x5a>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <TIM_TI1_SetConfig+0x5c>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e003      	b.n	8005202 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	b2db      	uxtb	r3, r3
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 030a 	bic.w	r3, r3, #10
 800521c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 030a 	and.w	r3, r3, #10
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000

08005258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 030a 	bic.w	r3, r3, #10
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f023 0210 	bic.w	r2, r3, #16
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800535a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	031b      	lsls	r3, r3, #12
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	b29b      	uxth	r3, r3
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800545a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	031b      	lsls	r3, r3, #12
 8005460:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	f043 0307 	orr.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005558:	2302      	movs	r3, #2
 800555a:	e050      	b.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d013      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10c      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e03f      	b.n	80056da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb ffd0 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f929 	bl	80058e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08a      	sub	sp, #40	; 0x28
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d17c      	bne.n	80057fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_UART_Transmit+0x2c>
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e075      	b.n	80057fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UART_Transmit+0x3e>
 800571c:	2302      	movs	r3, #2
 800571e:	e06e      	b.n	80057fe <HAL_UART_Transmit+0x11c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2221      	movs	r2, #33	; 0x21
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005736:	f7fc f95b 	bl	80019f0 <HAL_GetTick>
 800573a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005750:	d108      	bne.n	8005764 <HAL_UART_Transmit+0x82>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e003      	b.n	800576c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005774:	e02a      	b.n	80057cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f840 	bl	8005806 <UART_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e036      	b.n	80057fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	3302      	adds	r3, #2
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e007      	b.n	80057be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1cf      	bne.n	8005776 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2140      	movs	r1, #64	; 0x40
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f810 	bl	8005806 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b090      	sub	sp, #64	; 0x40
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	e050      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d04c      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0x30>
 8005826:	f7fc f8e3 	bl	80019f0 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005832:	429a      	cmp	r2, r3
 8005834:	d241      	bcs.n	80058ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005856:	637a      	str	r2, [r7, #52]	; 0x34
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800585c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	63bb      	str	r3, [r7, #56]	; 0x38
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588a:	623a      	str	r2, [r7, #32]
 800588c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	69f9      	ldr	r1, [r7, #28]
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	61bb      	str	r3, [r7, #24]
   return(result);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e00f      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d09f      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3740      	adds	r7, #64	; 0x40
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	b09f      	sub	sp, #124	; 0x7c
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	68d9      	ldr	r1, [r3, #12]
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	431a      	orrs	r2, r3
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	431a      	orrs	r2, r3
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4313      	orrs	r3, r2
 800591c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005928:	f021 010c 	bic.w	r1, r1, #12
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	6999      	ldr	r1, [r3, #24]
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	ea40 0301 	orr.w	r3, r0, r1
 800594c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800594e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4bc5      	ldr	r3, [pc, #788]	; (8005c68 <UART_SetConfig+0x384>)
 8005954:	429a      	cmp	r2, r3
 8005956:	d004      	beq.n	8005962 <UART_SetConfig+0x7e>
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4bc3      	ldr	r3, [pc, #780]	; (8005c6c <UART_SetConfig+0x388>)
 800595e:	429a      	cmp	r2, r3
 8005960:	d103      	bne.n	800596a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005962:	f7fe fe91 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8005966:	6778      	str	r0, [r7, #116]	; 0x74
 8005968:	e002      	b.n	8005970 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fe fe79 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 800596e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	f040 80b6 	bne.w	8005ae8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597e:	461c      	mov	r4, r3
 8005980:	f04f 0500 	mov.w	r5, #0
 8005984:	4622      	mov	r2, r4
 8005986:	462b      	mov	r3, r5
 8005988:	1891      	adds	r1, r2, r2
 800598a:	6439      	str	r1, [r7, #64]	; 0x40
 800598c:	415b      	adcs	r3, r3
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005994:	1912      	adds	r2, r2, r4
 8005996:	eb45 0303 	adc.w	r3, r5, r3
 800599a:	f04f 0000 	mov.w	r0, #0
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	00d9      	lsls	r1, r3, #3
 80059a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059a8:	00d0      	lsls	r0, r2, #3
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	1911      	adds	r1, r2, r4
 80059b0:	6639      	str	r1, [r7, #96]	; 0x60
 80059b2:	416b      	adcs	r3, r5
 80059b4:	667b      	str	r3, [r7, #100]	; 0x64
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059c4:	415b      	adcs	r3, r3
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059d0:	f7fb f8f2 	bl	8000bb8 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4ba5      	ldr	r3, [pc, #660]	; (8005c70 <UART_SetConfig+0x38c>)
 80059da:	fba3 2302 	umull	r2, r3, r3, r2
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	011e      	lsls	r6, r3, #4
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	461c      	mov	r4, r3
 80059e6:	f04f 0500 	mov.w	r5, #0
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	1891      	adds	r1, r2, r2
 80059f0:	6339      	str	r1, [r7, #48]	; 0x30
 80059f2:	415b      	adcs	r3, r3
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059fa:	1912      	adds	r2, r2, r4
 80059fc:	eb45 0303 	adc.w	r3, r5, r3
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	00d9      	lsls	r1, r3, #3
 8005a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0e:	00d0      	lsls	r0, r2, #3
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1911      	adds	r1, r2, r4
 8005a16:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a18:	416b      	adcs	r3, r5
 8005a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	461a      	mov	r2, r3
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	1891      	adds	r1, r2, r2
 8005a28:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a2a:	415b      	adcs	r3, r3
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a36:	f7fb f8bf 	bl	8000bb8 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4b8c      	ldr	r3, [pc, #560]	; (8005c70 <UART_SetConfig+0x38c>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a87      	ldr	r2, [pc, #540]	; (8005c70 <UART_SetConfig+0x38c>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a60:	441e      	add	r6, r3
 8005a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a64:	4618      	mov	r0, r3
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	1894      	adds	r4, r2, r2
 8005a70:	623c      	str	r4, [r7, #32]
 8005a72:	415b      	adcs	r3, r3
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7a:	1812      	adds	r2, r2, r0
 8005a7c:	eb41 0303 	adc.w	r3, r1, r3
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	f04f 0500 	mov.w	r5, #0
 8005a88:	00dd      	lsls	r5, r3, #3
 8005a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a8e:	00d4      	lsls	r4, r2, #3
 8005a90:	4622      	mov	r2, r4
 8005a92:	462b      	mov	r3, r5
 8005a94:	1814      	adds	r4, r2, r0
 8005a96:	653c      	str	r4, [r7, #80]	; 0x50
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	61b9      	str	r1, [r7, #24]
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ab6:	f7fb f87f 	bl	8000bb8 <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4b6c      	ldr	r3, [pc, #432]	; (8005c70 <UART_SetConfig+0x38c>)
 8005ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	2164      	movs	r1, #100	; 0x64
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3332      	adds	r3, #50	; 0x32
 8005ad2:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <UART_SetConfig+0x38c>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0207 	and.w	r2, r3, #7
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4432      	add	r2, r6
 8005ae4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae6:	e0b9      	b.n	8005c5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aea:	461c      	mov	r4, r3
 8005aec:	f04f 0500 	mov.w	r5, #0
 8005af0:	4622      	mov	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	1891      	adds	r1, r2, r2
 8005af6:	6139      	str	r1, [r7, #16]
 8005af8:	415b      	adcs	r3, r3
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b00:	1912      	adds	r2, r2, r4
 8005b02:	eb45 0303 	adc.w	r3, r5, r3
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	00d9      	lsls	r1, r3, #3
 8005b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b14:	00d0      	lsls	r0, r2, #3
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	eb12 0804 	adds.w	r8, r2, r4
 8005b1e:	eb43 0905 	adc.w	r9, r3, r5
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	008b      	lsls	r3, r1, #2
 8005b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3a:	0082      	lsls	r2, r0, #2
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fb f83a 	bl	8000bb8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <UART_SetConfig+0x38c>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011e      	lsls	r6, r3, #4
 8005b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b54:	4618      	mov	r0, r3
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	1894      	adds	r4, r2, r2
 8005b60:	60bc      	str	r4, [r7, #8]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6a:	1812      	adds	r2, r2, r0
 8005b6c:	eb41 0303 	adc.w	r3, r1, r3
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	f04f 0500 	mov.w	r5, #0
 8005b78:	00dd      	lsls	r5, r3, #3
 8005b7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7e:	00d4      	lsls	r4, r2, #3
 8005b80:	4622      	mov	r2, r4
 8005b82:	462b      	mov	r3, r5
 8005b84:	1814      	adds	r4, r2, r0
 8005b86:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba4:	0082      	lsls	r2, r0, #2
 8005ba6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005baa:	f7fb f805 	bl	8000bb8 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <UART_SetConfig+0x38c>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	; 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	; 0x32
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <UART_SetConfig+0x38c>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd2:	441e      	add	r6, r3
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	1894      	adds	r4, r2, r2
 8005be2:	603c      	str	r4, [r7, #0]
 8005be4:	415b      	adcs	r3, r3
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bec:	1812      	adds	r2, r2, r0
 8005bee:	eb41 0303 	adc.w	r3, r1, r3
 8005bf2:	f04f 0400 	mov.w	r4, #0
 8005bf6:	f04f 0500 	mov.w	r5, #0
 8005bfa:	00dd      	lsls	r5, r3, #3
 8005bfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c00:	00d4      	lsls	r4, r2, #3
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	eb12 0a00 	adds.w	sl, r2, r0
 8005c0a:	eb43 0b01 	adc.w	fp, r3, r1
 8005c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c26:	0082      	lsls	r2, r0, #2
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	f7fa ffc4 	bl	8000bb8 <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <UART_SetConfig+0x38c>)
 8005c36:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2164      	movs	r1, #100	; 0x64
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	3332      	adds	r3, #50	; 0x32
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <UART_SetConfig+0x38c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4432      	add	r2, r6
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	377c      	adds	r7, #124	; 0x7c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40011400 	.word	0x40011400
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f002 feb6 	bl	8008a04 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08008e34 	.word	0x08008e34
 8005cbc:	08008e34 	.word	0x08008e34
 8005cc0:	08008e34 	.word	0x08008e34
 8005cc4:	08008e38 	.word	0x08008e38

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <__cvt>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	ec55 4b10 	vmov	r4, r5, d0
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	460e      	mov	r6, r1
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	bfbb      	ittet	lt
 8005cea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cee:	461d      	movlt	r5, r3
 8005cf0:	2300      	movge	r3, #0
 8005cf2:	232d      	movlt	r3, #45	; 0x2d
 8005cf4:	700b      	strb	r3, [r1, #0]
 8005cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cfc:	4691      	mov	r9, r2
 8005cfe:	f023 0820 	bic.w	r8, r3, #32
 8005d02:	bfbc      	itt	lt
 8005d04:	4622      	movlt	r2, r4
 8005d06:	4614      	movlt	r4, r2
 8005d08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d0c:	d005      	beq.n	8005d1a <__cvt+0x42>
 8005d0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d12:	d100      	bne.n	8005d16 <__cvt+0x3e>
 8005d14:	3601      	adds	r6, #1
 8005d16:	2102      	movs	r1, #2
 8005d18:	e000      	b.n	8005d1c <__cvt+0x44>
 8005d1a:	2103      	movs	r1, #3
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	ab02      	add	r3, sp, #8
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	ec45 4b10 	vmov	d0, r4, r5
 8005d28:	4653      	mov	r3, sl
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	f000 fcec 	bl	8006708 <_dtoa_r>
 8005d30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d34:	4607      	mov	r7, r0
 8005d36:	d102      	bne.n	8005d3e <__cvt+0x66>
 8005d38:	f019 0f01 	tst.w	r9, #1
 8005d3c:	d022      	beq.n	8005d84 <__cvt+0xac>
 8005d3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d42:	eb07 0906 	add.w	r9, r7, r6
 8005d46:	d110      	bne.n	8005d6a <__cvt+0x92>
 8005d48:	783b      	ldrb	r3, [r7, #0]
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d10a      	bne.n	8005d64 <__cvt+0x8c>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2300      	movs	r3, #0
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa febf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d5a:	b918      	cbnz	r0, 8005d64 <__cvt+0x8c>
 8005d5c:	f1c6 0601 	rsb	r6, r6, #1
 8005d60:	f8ca 6000 	str.w	r6, [sl]
 8005d64:	f8da 3000 	ldr.w	r3, [sl]
 8005d68:	4499      	add	r9, r3
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d76:	b108      	cbz	r0, 8005d7c <__cvt+0xa4>
 8005d78:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d7c:	2230      	movs	r2, #48	; 0x30
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	454b      	cmp	r3, r9
 8005d82:	d307      	bcc.n	8005d94 <__cvt+0xbc>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d88:	1bdb      	subs	r3, r3, r7
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	b004      	add	sp, #16
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e7f0      	b.n	8005d7e <__cvt+0xa6>

08005d9c <__exponent>:
 8005d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2900      	cmp	r1, #0
 8005da2:	bfb8      	it	lt
 8005da4:	4249      	neglt	r1, r1
 8005da6:	f803 2b02 	strb.w	r2, [r3], #2
 8005daa:	bfb4      	ite	lt
 8005dac:	222d      	movlt	r2, #45	; 0x2d
 8005dae:	222b      	movge	r2, #43	; 0x2b
 8005db0:	2909      	cmp	r1, #9
 8005db2:	7042      	strb	r2, [r0, #1]
 8005db4:	dd2a      	ble.n	8005e0c <__exponent+0x70>
 8005db6:	f10d 0407 	add.w	r4, sp, #7
 8005dba:	46a4      	mov	ip, r4
 8005dbc:	270a      	movs	r7, #10
 8005dbe:	46a6      	mov	lr, r4
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dc6:	fb07 1516 	mls	r5, r7, r6, r1
 8005dca:	3530      	adds	r5, #48	; 0x30
 8005dcc:	2a63      	cmp	r2, #99	; 0x63
 8005dce:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	dcf1      	bgt.n	8005dbe <__exponent+0x22>
 8005dda:	3130      	adds	r1, #48	; 0x30
 8005ddc:	f1ae 0502 	sub.w	r5, lr, #2
 8005de0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005de4:	1c44      	adds	r4, r0, #1
 8005de6:	4629      	mov	r1, r5
 8005de8:	4561      	cmp	r1, ip
 8005dea:	d30a      	bcc.n	8005e02 <__exponent+0x66>
 8005dec:	f10d 0209 	add.w	r2, sp, #9
 8005df0:	eba2 020e 	sub.w	r2, r2, lr
 8005df4:	4565      	cmp	r5, ip
 8005df6:	bf88      	it	hi
 8005df8:	2200      	movhi	r2, #0
 8005dfa:	4413      	add	r3, r2
 8005dfc:	1a18      	subs	r0, r3, r0
 8005dfe:	b003      	add	sp, #12
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e0a:	e7ed      	b.n	8005de8 <__exponent+0x4c>
 8005e0c:	2330      	movs	r3, #48	; 0x30
 8005e0e:	3130      	adds	r1, #48	; 0x30
 8005e10:	7083      	strb	r3, [r0, #2]
 8005e12:	70c1      	strb	r1, [r0, #3]
 8005e14:	1d03      	adds	r3, r0, #4
 8005e16:	e7f1      	b.n	8005dfc <__exponent+0x60>

08005e18 <_printf_float>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	ed2d 8b02 	vpush	{d8}
 8005e20:	b08d      	sub	sp, #52	; 0x34
 8005e22:	460c      	mov	r4, r1
 8005e24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e28:	4616      	mov	r6, r2
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	f001 fa57 	bl	80072e0 <_localeconv_r>
 8005e32:	f8d0 a000 	ldr.w	sl, [r0]
 8005e36:	4650      	mov	r0, sl
 8005e38:	f7fa f9d2 	bl	80001e0 <strlen>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	f8d8 3000 	ldr.w	r3, [r8]
 8005e48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	f103 0208 	add.w	r2, r3, #8
 8005e56:	f8c8 2000 	str.w	r2, [r8]
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e70:	ee08 0a10 	vmov	s16, r0
 8005e74:	4b9f      	ldr	r3, [pc, #636]	; (80060f4 <_printf_float+0x2dc>)
 8005e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	f7fa fe5d 	bl	8000b3c <__aeabi_dcmpun>
 8005e82:	bb88      	cbnz	r0, 8005ee8 <_printf_float+0xd0>
 8005e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e88:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <_printf_float+0x2dc>)
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8e:	f7fa fe37 	bl	8000b00 <__aeabi_dcmple>
 8005e92:	bb48      	cbnz	r0, 8005ee8 <_printf_float+0xd0>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fe26 	bl	8000aec <__aeabi_dcmplt>
 8005ea0:	b110      	cbz	r0, 8005ea8 <_printf_float+0x90>
 8005ea2:	232d      	movs	r3, #45	; 0x2d
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	4b93      	ldr	r3, [pc, #588]	; (80060f8 <_printf_float+0x2e0>)
 8005eaa:	4894      	ldr	r0, [pc, #592]	; (80060fc <_printf_float+0x2e4>)
 8005eac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb0:	bf94      	ite	ls
 8005eb2:	4698      	movls	r8, r3
 8005eb4:	4680      	movhi	r8, r0
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	f023 0204 	bic.w	r2, r3, #4
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	9700      	str	r7, [sp, #0]
 8005ec8:	4633      	mov	r3, r6
 8005eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f9d8 	bl	8006284 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f040 8090 	bne.w	8005ffa <_printf_float+0x1e2>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b00d      	add	sp, #52	; 0x34
 8005ee0:	ecbd 8b02 	vpop	{d8}
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fe24 	bl	8000b3c <__aeabi_dcmpun>
 8005ef4:	b140      	cbz	r0, 8005f08 <_printf_float+0xf0>
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfbc      	itt	lt
 8005efc:	232d      	movlt	r3, #45	; 0x2d
 8005efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f02:	487f      	ldr	r0, [pc, #508]	; (8006100 <_printf_float+0x2e8>)
 8005f04:	4b7f      	ldr	r3, [pc, #508]	; (8006104 <_printf_float+0x2ec>)
 8005f06:	e7d1      	b.n	8005eac <_printf_float+0x94>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	d13f      	bne.n	8005f94 <_printf_float+0x17c>
 8005f14:	2306      	movs	r3, #6
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	6861      	ldr	r1, [r4, #4]
 8005f1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f20:	2300      	movs	r3, #0
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	ab0a      	add	r3, sp, #40	; 0x28
 8005f26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2a:	ab09      	add	r3, sp, #36	; 0x24
 8005f2c:	ec49 8b10 	vmov	d0, r8, r9
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fecd 	bl	8005cd8 <__cvt>
 8005f3e:	9b06      	ldr	r3, [sp, #24]
 8005f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f42:	2b47      	cmp	r3, #71	; 0x47
 8005f44:	4680      	mov	r8, r0
 8005f46:	d108      	bne.n	8005f5a <_printf_float+0x142>
 8005f48:	1cc8      	adds	r0, r1, #3
 8005f4a:	db02      	blt.n	8005f52 <_printf_float+0x13a>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	dd41      	ble.n	8005fd6 <_printf_float+0x1be>
 8005f52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f56:	fa5f fb8b 	uxtb.w	fp, fp
 8005f5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f5e:	d820      	bhi.n	8005fa2 <_printf_float+0x18a>
 8005f60:	3901      	subs	r1, #1
 8005f62:	465a      	mov	r2, fp
 8005f64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f68:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6a:	f7ff ff17 	bl	8005d9c <__exponent>
 8005f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f70:	1813      	adds	r3, r2, r0
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	4681      	mov	r9, r0
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	dc02      	bgt.n	8005f80 <_printf_float+0x168>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	d501      	bpl.n	8005f84 <_printf_float+0x16c>
 8005f80:	3301      	adds	r3, #1
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d09c      	beq.n	8005ec6 <_printf_float+0xae>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f92:	e798      	b.n	8005ec6 <_printf_float+0xae>
 8005f94:	9a06      	ldr	r2, [sp, #24]
 8005f96:	2a47      	cmp	r2, #71	; 0x47
 8005f98:	d1be      	bne.n	8005f18 <_printf_float+0x100>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1bc      	bne.n	8005f18 <_printf_float+0x100>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7b9      	b.n	8005f16 <_printf_float+0xfe>
 8005fa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fa6:	d118      	bne.n	8005fda <_printf_float+0x1c2>
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	dd0b      	ble.n	8005fc6 <_printf_float+0x1ae>
 8005fae:	6121      	str	r1, [r4, #16]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_printf_float+0x1a0>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d502      	bpl.n	8005fbe <_printf_float+0x1a6>
 8005fb8:	3301      	adds	r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc0:	f04f 0900 	mov.w	r9, #0
 8005fc4:	e7de      	b.n	8005f84 <_printf_float+0x16c>
 8005fc6:	b913      	cbnz	r3, 8005fce <_printf_float+0x1b6>
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	07d2      	lsls	r2, r2, #31
 8005fcc:	d501      	bpl.n	8005fd2 <_printf_float+0x1ba>
 8005fce:	3302      	adds	r3, #2
 8005fd0:	e7f4      	b.n	8005fbc <_printf_float+0x1a4>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f2      	b.n	8005fbc <_printf_float+0x1a4>
 8005fd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	db05      	blt.n	8005fec <_printf_float+0x1d4>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6121      	str	r1, [r4, #16]
 8005fe4:	07d8      	lsls	r0, r3, #31
 8005fe6:	d5ea      	bpl.n	8005fbe <_printf_float+0x1a6>
 8005fe8:	1c4b      	adds	r3, r1, #1
 8005fea:	e7e7      	b.n	8005fbc <_printf_float+0x1a4>
 8005fec:	2900      	cmp	r1, #0
 8005fee:	bfd4      	ite	le
 8005ff0:	f1c1 0202 	rsble	r2, r1, #2
 8005ff4:	2201      	movgt	r2, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	e7e0      	b.n	8005fbc <_printf_float+0x1a4>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	055a      	lsls	r2, r3, #21
 8005ffe:	d407      	bmi.n	8006010 <_printf_float+0x1f8>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	4642      	mov	r2, r8
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d12c      	bne.n	8006068 <_printf_float+0x250>
 800600e:	e764      	b.n	8005eda <_printf_float+0xc2>
 8006010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006014:	f240 80e0 	bls.w	80061d8 <_printf_float+0x3c0>
 8006018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	f7fa fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006024:	2800      	cmp	r0, #0
 8006026:	d034      	beq.n	8006092 <_printf_float+0x27a>
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <_printf_float+0x2f0>)
 800602a:	2301      	movs	r3, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af51 	beq.w	8005eda <_printf_float+0xc2>
 8006038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603c:	429a      	cmp	r2, r3
 800603e:	db02      	blt.n	8006046 <_printf_float+0x22e>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	07d8      	lsls	r0, r3, #31
 8006044:	d510      	bpl.n	8006068 <_printf_float+0x250>
 8006046:	ee18 3a10 	vmov	r3, s16
 800604a:	4652      	mov	r2, sl
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f af41 	beq.w	8005eda <_printf_float+0xc2>
 8006058:	f04f 0800 	mov.w	r8, #0
 800605c:	f104 091a 	add.w	r9, r4, #26
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	4543      	cmp	r3, r8
 8006066:	dc09      	bgt.n	800607c <_printf_float+0x264>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	079b      	lsls	r3, r3, #30
 800606c:	f100 8105 	bmi.w	800627a <_printf_float+0x462>
 8006070:	68e0      	ldr	r0, [r4, #12]
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	4298      	cmp	r0, r3
 8006076:	bfb8      	it	lt
 8006078:	4618      	movlt	r0, r3
 800607a:	e730      	b.n	8005ede <_printf_float+0xc6>
 800607c:	2301      	movs	r3, #1
 800607e:	464a      	mov	r2, r9
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af27 	beq.w	8005eda <_printf_float+0xc2>
 800608c:	f108 0801 	add.w	r8, r8, #1
 8006090:	e7e6      	b.n	8006060 <_printf_float+0x248>
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc39      	bgt.n	800610c <_printf_float+0x2f4>
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <_printf_float+0x2f0>)
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af19 	beq.w	8005eda <_printf_float+0xc2>
 80060a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d102      	bne.n	80060b6 <_printf_float+0x29e>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d5d8      	bpl.n	8006068 <_printf_float+0x250>
 80060b6:	ee18 3a10 	vmov	r3, s16
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af09 	beq.w	8005eda <_printf_float+0xc2>
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	f104 0a1a 	add.w	sl, r4, #26
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	425b      	negs	r3, r3
 80060d4:	454b      	cmp	r3, r9
 80060d6:	dc01      	bgt.n	80060dc <_printf_float+0x2c4>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	e792      	b.n	8006002 <_printf_float+0x1ea>
 80060dc:	2301      	movs	r3, #1
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f aef7 	beq.w	8005eda <_printf_float+0xc2>
 80060ec:	f109 0901 	add.w	r9, r9, #1
 80060f0:	e7ee      	b.n	80060d0 <_printf_float+0x2b8>
 80060f2:	bf00      	nop
 80060f4:	7fefffff 	.word	0x7fefffff
 80060f8:	08008a50 	.word	0x08008a50
 80060fc:	08008a54 	.word	0x08008a54
 8006100:	08008a5c 	.word	0x08008a5c
 8006104:	08008a58 	.word	0x08008a58
 8006108:	08008a60 	.word	0x08008a60
 800610c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800610e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006110:	429a      	cmp	r2, r3
 8006112:	bfa8      	it	ge
 8006114:	461a      	movge	r2, r3
 8006116:	2a00      	cmp	r2, #0
 8006118:	4691      	mov	r9, r2
 800611a:	dc37      	bgt.n	800618c <_printf_float+0x374>
 800611c:	f04f 0b00 	mov.w	fp, #0
 8006120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006124:	f104 021a 	add.w	r2, r4, #26
 8006128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	eba3 0309 	sub.w	r3, r3, r9
 8006130:	455b      	cmp	r3, fp
 8006132:	dc33      	bgt.n	800619c <_printf_float+0x384>
 8006134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006138:	429a      	cmp	r2, r3
 800613a:	db3b      	blt.n	80061b4 <_printf_float+0x39c>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d438      	bmi.n	80061b4 <_printf_float+0x39c>
 8006142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	eba2 0901 	sub.w	r9, r2, r1
 800614e:	4599      	cmp	r9, r3
 8006150:	bfa8      	it	ge
 8006152:	4699      	movge	r9, r3
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	dc35      	bgt.n	80061c6 <_printf_float+0x3ae>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006162:	f104 0a1a 	add.w	sl, r4, #26
 8006166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	eba3 0309 	sub.w	r3, r3, r9
 8006170:	4543      	cmp	r3, r8
 8006172:	f77f af79 	ble.w	8006068 <_printf_float+0x250>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f aeaa 	beq.w	8005eda <_printf_float+0xc2>
 8006186:	f108 0801 	add.w	r8, r8, #1
 800618a:	e7ec      	b.n	8006166 <_printf_float+0x34e>
 800618c:	4613      	mov	r3, r2
 800618e:	4631      	mov	r1, r6
 8006190:	4642      	mov	r2, r8
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d1c0      	bne.n	800611c <_printf_float+0x304>
 800619a:	e69e      	b.n	8005eda <_printf_float+0xc2>
 800619c:	2301      	movs	r3, #1
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	9205      	str	r2, [sp, #20]
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f ae97 	beq.w	8005eda <_printf_float+0xc2>
 80061ac:	9a05      	ldr	r2, [sp, #20]
 80061ae:	f10b 0b01 	add.w	fp, fp, #1
 80061b2:	e7b9      	b.n	8006128 <_printf_float+0x310>
 80061b4:	ee18 3a10 	vmov	r3, s16
 80061b8:	4652      	mov	r2, sl
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1be      	bne.n	8006142 <_printf_float+0x32a>
 80061c4:	e689      	b.n	8005eda <_printf_float+0xc2>
 80061c6:	9a05      	ldr	r2, [sp, #20]
 80061c8:	464b      	mov	r3, r9
 80061ca:	4442      	add	r2, r8
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d1c1      	bne.n	800615a <_printf_float+0x342>
 80061d6:	e680      	b.n	8005eda <_printf_float+0xc2>
 80061d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061da:	2a01      	cmp	r2, #1
 80061dc:	dc01      	bgt.n	80061e2 <_printf_float+0x3ca>
 80061de:	07db      	lsls	r3, r3, #31
 80061e0:	d538      	bpl.n	8006254 <_printf_float+0x43c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4642      	mov	r2, r8
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae74 	beq.w	8005eda <_printf_float+0xc2>
 80061f2:	ee18 3a10 	vmov	r3, s16
 80061f6:	4652      	mov	r2, sl
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f ae6b 	beq.w	8005eda <_printf_float+0xc2>
 8006204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	f7fa fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8006210:	b9d8      	cbnz	r0, 800624a <_printf_float+0x432>
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	f108 0201 	add.w	r2, r8, #1
 8006218:	3b01      	subs	r3, #1
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	d10e      	bne.n	8006242 <_printf_float+0x42a>
 8006224:	e659      	b.n	8005eda <_printf_float+0xc2>
 8006226:	2301      	movs	r3, #1
 8006228:	4652      	mov	r2, sl
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f ae52 	beq.w	8005eda <_printf_float+0xc2>
 8006236:	f108 0801 	add.w	r8, r8, #1
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	4543      	cmp	r3, r8
 8006240:	dcf1      	bgt.n	8006226 <_printf_float+0x40e>
 8006242:	464b      	mov	r3, r9
 8006244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006248:	e6dc      	b.n	8006004 <_printf_float+0x1ec>
 800624a:	f04f 0800 	mov.w	r8, #0
 800624e:	f104 0a1a 	add.w	sl, r4, #26
 8006252:	e7f2      	b.n	800623a <_printf_float+0x422>
 8006254:	2301      	movs	r3, #1
 8006256:	4642      	mov	r2, r8
 8006258:	e7df      	b.n	800621a <_printf_float+0x402>
 800625a:	2301      	movs	r3, #1
 800625c:	464a      	mov	r2, r9
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f ae38 	beq.w	8005eda <_printf_float+0xc2>
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	4543      	cmp	r3, r8
 8006276:	dcf0      	bgt.n	800625a <_printf_float+0x442>
 8006278:	e6fa      	b.n	8006070 <_printf_float+0x258>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	f104 0919 	add.w	r9, r4, #25
 8006282:	e7f4      	b.n	800626e <_printf_float+0x456>

08006284 <_printf_common>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	4616      	mov	r6, r2
 800628a:	4699      	mov	r9, r3
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006294:	4293      	cmp	r3, r2
 8006296:	bfb8      	it	lt
 8006298:	4613      	movlt	r3, r2
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a0:	4607      	mov	r7, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	b10a      	cbz	r2, 80062aa <_printf_common+0x26>
 80062a6:	3301      	adds	r3, #1
 80062a8:	6033      	str	r3, [r6, #0]
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	0699      	lsls	r1, r3, #26
 80062ae:	bf42      	ittt	mi
 80062b0:	6833      	ldrmi	r3, [r6, #0]
 80062b2:	3302      	addmi	r3, #2
 80062b4:	6033      	strmi	r3, [r6, #0]
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	f015 0506 	ands.w	r5, r5, #6
 80062bc:	d106      	bne.n	80062cc <_printf_common+0x48>
 80062be:	f104 0a19 	add.w	sl, r4, #25
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	6832      	ldr	r2, [r6, #0]
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dc26      	bgt.n	800631a <_printf_common+0x96>
 80062cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d0:	1e13      	subs	r3, r2, #0
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	bf18      	it	ne
 80062d6:	2301      	movne	r3, #1
 80062d8:	0692      	lsls	r2, r2, #26
 80062da:	d42b      	bmi.n	8006334 <_printf_common+0xb0>
 80062dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d01e      	beq.n	8006328 <_printf_common+0xa4>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	68e5      	ldr	r5, [r4, #12]
 80062ee:	6832      	ldr	r2, [r6, #0]
 80062f0:	f003 0306 	and.w	r3, r3, #6
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	bf08      	it	eq
 80062f8:	1aad      	subeq	r5, r5, r2
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	bf0c      	ite	eq
 8006300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006304:	2500      	movne	r5, #0
 8006306:	4293      	cmp	r3, r2
 8006308:	bfc4      	itt	gt
 800630a:	1a9b      	subgt	r3, r3, r2
 800630c:	18ed      	addgt	r5, r5, r3
 800630e:	2600      	movs	r6, #0
 8006310:	341a      	adds	r4, #26
 8006312:	42b5      	cmp	r5, r6
 8006314:	d11a      	bne.n	800634c <_printf_common+0xc8>
 8006316:	2000      	movs	r0, #0
 8006318:	e008      	b.n	800632c <_printf_common+0xa8>
 800631a:	2301      	movs	r3, #1
 800631c:	4652      	mov	r2, sl
 800631e:	4649      	mov	r1, r9
 8006320:	4638      	mov	r0, r7
 8006322:	47c0      	blx	r8
 8006324:	3001      	adds	r0, #1
 8006326:	d103      	bne.n	8006330 <_printf_common+0xac>
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006330:	3501      	adds	r5, #1
 8006332:	e7c6      	b.n	80062c2 <_printf_common+0x3e>
 8006334:	18e1      	adds	r1, r4, r3
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	2030      	movs	r0, #48	; 0x30
 800633a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800633e:	4422      	add	r2, r4
 8006340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006348:	3302      	adds	r3, #2
 800634a:	e7c7      	b.n	80062dc <_printf_common+0x58>
 800634c:	2301      	movs	r3, #1
 800634e:	4622      	mov	r2, r4
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	3001      	adds	r0, #1
 8006358:	d0e6      	beq.n	8006328 <_printf_common+0xa4>
 800635a:	3601      	adds	r6, #1
 800635c:	e7d9      	b.n	8006312 <_printf_common+0x8e>
	...

08006360 <_printf_i>:
 8006360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	4691      	mov	r9, r2
 8006368:	7e27      	ldrb	r7, [r4, #24]
 800636a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800636c:	2f78      	cmp	r7, #120	; 0x78
 800636e:	4680      	mov	r8, r0
 8006370:	469a      	mov	sl, r3
 8006372:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006376:	d807      	bhi.n	8006388 <_printf_i+0x28>
 8006378:	2f62      	cmp	r7, #98	; 0x62
 800637a:	d80a      	bhi.n	8006392 <_printf_i+0x32>
 800637c:	2f00      	cmp	r7, #0
 800637e:	f000 80d8 	beq.w	8006532 <_printf_i+0x1d2>
 8006382:	2f58      	cmp	r7, #88	; 0x58
 8006384:	f000 80a3 	beq.w	80064ce <_printf_i+0x16e>
 8006388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800638c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006390:	e03a      	b.n	8006408 <_printf_i+0xa8>
 8006392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006396:	2b15      	cmp	r3, #21
 8006398:	d8f6      	bhi.n	8006388 <_printf_i+0x28>
 800639a:	a001      	add	r0, pc, #4	; (adr r0, 80063a0 <_printf_i+0x40>)
 800639c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063a0:	080063f9 	.word	0x080063f9
 80063a4:	0800640d 	.word	0x0800640d
 80063a8:	08006389 	.word	0x08006389
 80063ac:	08006389 	.word	0x08006389
 80063b0:	08006389 	.word	0x08006389
 80063b4:	08006389 	.word	0x08006389
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	08006389 	.word	0x08006389
 80063c0:	08006389 	.word	0x08006389
 80063c4:	08006389 	.word	0x08006389
 80063c8:	08006389 	.word	0x08006389
 80063cc:	08006519 	.word	0x08006519
 80063d0:	0800643d 	.word	0x0800643d
 80063d4:	080064fb 	.word	0x080064fb
 80063d8:	08006389 	.word	0x08006389
 80063dc:	08006389 	.word	0x08006389
 80063e0:	0800653b 	.word	0x0800653b
 80063e4:	08006389 	.word	0x08006389
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	08006389 	.word	0x08006389
 80063f0:	08006389 	.word	0x08006389
 80063f4:	08006503 	.word	0x08006503
 80063f8:	680b      	ldr	r3, [r1, #0]
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	600a      	str	r2, [r1, #0]
 8006400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006408:	2301      	movs	r3, #1
 800640a:	e0a3      	b.n	8006554 <_printf_i+0x1f4>
 800640c:	6825      	ldr	r5, [r4, #0]
 800640e:	6808      	ldr	r0, [r1, #0]
 8006410:	062e      	lsls	r6, r5, #24
 8006412:	f100 0304 	add.w	r3, r0, #4
 8006416:	d50a      	bpl.n	800642e <_printf_i+0xce>
 8006418:	6805      	ldr	r5, [r0, #0]
 800641a:	600b      	str	r3, [r1, #0]
 800641c:	2d00      	cmp	r5, #0
 800641e:	da03      	bge.n	8006428 <_printf_i+0xc8>
 8006420:	232d      	movs	r3, #45	; 0x2d
 8006422:	426d      	negs	r5, r5
 8006424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006428:	485e      	ldr	r0, [pc, #376]	; (80065a4 <_printf_i+0x244>)
 800642a:	230a      	movs	r3, #10
 800642c:	e019      	b.n	8006462 <_printf_i+0x102>
 800642e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006432:	6805      	ldr	r5, [r0, #0]
 8006434:	600b      	str	r3, [r1, #0]
 8006436:	bf18      	it	ne
 8006438:	b22d      	sxthne	r5, r5
 800643a:	e7ef      	b.n	800641c <_printf_i+0xbc>
 800643c:	680b      	ldr	r3, [r1, #0]
 800643e:	6825      	ldr	r5, [r4, #0]
 8006440:	1d18      	adds	r0, r3, #4
 8006442:	6008      	str	r0, [r1, #0]
 8006444:	0628      	lsls	r0, r5, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0xec>
 8006448:	681d      	ldr	r5, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0xf2>
 800644c:	0669      	lsls	r1, r5, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0xe8>
 8006450:	881d      	ldrh	r5, [r3, #0]
 8006452:	4854      	ldr	r0, [pc, #336]	; (80065a4 <_printf_i+0x244>)
 8006454:	2f6f      	cmp	r7, #111	; 0x6f
 8006456:	bf0c      	ite	eq
 8006458:	2308      	moveq	r3, #8
 800645a:	230a      	movne	r3, #10
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006462:	6866      	ldr	r6, [r4, #4]
 8006464:	60a6      	str	r6, [r4, #8]
 8006466:	2e00      	cmp	r6, #0
 8006468:	bfa2      	ittt	ge
 800646a:	6821      	ldrge	r1, [r4, #0]
 800646c:	f021 0104 	bicge.w	r1, r1, #4
 8006470:	6021      	strge	r1, [r4, #0]
 8006472:	b90d      	cbnz	r5, 8006478 <_printf_i+0x118>
 8006474:	2e00      	cmp	r6, #0
 8006476:	d04d      	beq.n	8006514 <_printf_i+0x1b4>
 8006478:	4616      	mov	r6, r2
 800647a:	fbb5 f1f3 	udiv	r1, r5, r3
 800647e:	fb03 5711 	mls	r7, r3, r1, r5
 8006482:	5dc7      	ldrb	r7, [r0, r7]
 8006484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006488:	462f      	mov	r7, r5
 800648a:	42bb      	cmp	r3, r7
 800648c:	460d      	mov	r5, r1
 800648e:	d9f4      	bls.n	800647a <_printf_i+0x11a>
 8006490:	2b08      	cmp	r3, #8
 8006492:	d10b      	bne.n	80064ac <_printf_i+0x14c>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07df      	lsls	r7, r3, #31
 8006498:	d508      	bpl.n	80064ac <_printf_i+0x14c>
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4299      	cmp	r1, r3
 80064a0:	bfde      	ittt	le
 80064a2:	2330      	movle	r3, #48	; 0x30
 80064a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ac:	1b92      	subs	r2, r2, r6
 80064ae:	6122      	str	r2, [r4, #16]
 80064b0:	f8cd a000 	str.w	sl, [sp]
 80064b4:	464b      	mov	r3, r9
 80064b6:	aa03      	add	r2, sp, #12
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff fee2 	bl	8006284 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d14c      	bne.n	800655e <_printf_i+0x1fe>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b004      	add	sp, #16
 80064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ce:	4835      	ldr	r0, [pc, #212]	; (80065a4 <_printf_i+0x244>)
 80064d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	680e      	ldr	r6, [r1, #0]
 80064d8:	061f      	lsls	r7, r3, #24
 80064da:	f856 5b04 	ldr.w	r5, [r6], #4
 80064de:	600e      	str	r6, [r1, #0]
 80064e0:	d514      	bpl.n	800650c <_printf_i+0x1ac>
 80064e2:	07d9      	lsls	r1, r3, #31
 80064e4:	bf44      	itt	mi
 80064e6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ea:	6023      	strmi	r3, [r4, #0]
 80064ec:	b91d      	cbnz	r5, 80064f6 <_printf_i+0x196>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f023 0320 	bic.w	r3, r3, #32
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	2310      	movs	r3, #16
 80064f8:	e7b0      	b.n	800645c <_printf_i+0xfc>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	f043 0320 	orr.w	r3, r3, #32
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	2378      	movs	r3, #120	; 0x78
 8006504:	4828      	ldr	r0, [pc, #160]	; (80065a8 <_printf_i+0x248>)
 8006506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800650a:	e7e3      	b.n	80064d4 <_printf_i+0x174>
 800650c:	065e      	lsls	r6, r3, #25
 800650e:	bf48      	it	mi
 8006510:	b2ad      	uxthmi	r5, r5
 8006512:	e7e6      	b.n	80064e2 <_printf_i+0x182>
 8006514:	4616      	mov	r6, r2
 8006516:	e7bb      	b.n	8006490 <_printf_i+0x130>
 8006518:	680b      	ldr	r3, [r1, #0]
 800651a:	6826      	ldr	r6, [r4, #0]
 800651c:	6960      	ldr	r0, [r4, #20]
 800651e:	1d1d      	adds	r5, r3, #4
 8006520:	600d      	str	r5, [r1, #0]
 8006522:	0635      	lsls	r5, r6, #24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	d501      	bpl.n	800652c <_printf_i+0x1cc>
 8006528:	6018      	str	r0, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0x1d2>
 800652c:	0671      	lsls	r1, r6, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0x1c8>
 8006530:	8018      	strh	r0, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	4616      	mov	r6, r2
 8006538:	e7ba      	b.n	80064b0 <_printf_i+0x150>
 800653a:	680b      	ldr	r3, [r1, #0]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	600a      	str	r2, [r1, #0]
 8006540:	681e      	ldr	r6, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	4630      	mov	r0, r6
 8006548:	f7f9 fe52 	bl	80001f0 <memchr>
 800654c:	b108      	cbz	r0, 8006552 <_printf_i+0x1f2>
 800654e:	1b80      	subs	r0, r0, r6
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	e7a8      	b.n	80064b0 <_printf_i+0x150>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	4632      	mov	r2, r6
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d0ab      	beq.n	80064c4 <_printf_i+0x164>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d413      	bmi.n	800659a <_printf_i+0x23a>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e7a4      	b.n	80064c8 <_printf_i+0x168>
 800657e:	2301      	movs	r3, #1
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d09b      	beq.n	80064c4 <_printf_i+0x164>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf2      	bgt.n	800657e <_printf_i+0x21e>
 8006598:	e7eb      	b.n	8006572 <_printf_i+0x212>
 800659a:	2500      	movs	r5, #0
 800659c:	f104 0619 	add.w	r6, r4, #25
 80065a0:	e7f5      	b.n	800658e <_printf_i+0x22e>
 80065a2:	bf00      	nop
 80065a4:	08008a62 	.word	0x08008a62
 80065a8:	08008a73 	.word	0x08008a73

080065ac <siprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	b500      	push	{lr}
 80065b0:	b09c      	sub	sp, #112	; 0x70
 80065b2:	ab1d      	add	r3, sp, #116	; 0x74
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9006      	str	r0, [sp, #24]
 80065b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065bc:	4809      	ldr	r0, [pc, #36]	; (80065e4 <siprintf+0x38>)
 80065be:	9107      	str	r1, [sp, #28]
 80065c0:	9104      	str	r1, [sp, #16]
 80065c2:	4909      	ldr	r1, [pc, #36]	; (80065e8 <siprintf+0x3c>)
 80065c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	a902      	add	r1, sp, #8
 80065d0:	f001 fb34 	bl	8007c3c <_svfiprintf_r>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	b01c      	add	sp, #112	; 0x70
 80065dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e0:	b003      	add	sp, #12
 80065e2:	4770      	bx	lr
 80065e4:	2000000c 	.word	0x2000000c
 80065e8:	ffff0208 	.word	0xffff0208

080065ec <quorem>:
 80065ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	6903      	ldr	r3, [r0, #16]
 80065f2:	690c      	ldr	r4, [r1, #16]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	4607      	mov	r7, r0
 80065f8:	f2c0 8081 	blt.w	80066fe <quorem+0x112>
 80065fc:	3c01      	subs	r4, #1
 80065fe:	f101 0814 	add.w	r8, r1, #20
 8006602:	f100 0514 	add.w	r5, r0, #20
 8006606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006614:	3301      	adds	r3, #1
 8006616:	429a      	cmp	r2, r3
 8006618:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800661c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006620:	fbb2 f6f3 	udiv	r6, r2, r3
 8006624:	d331      	bcc.n	800668a <quorem+0x9e>
 8006626:	f04f 0e00 	mov.w	lr, #0
 800662a:	4640      	mov	r0, r8
 800662c:	46ac      	mov	ip, r5
 800662e:	46f2      	mov	sl, lr
 8006630:	f850 2b04 	ldr.w	r2, [r0], #4
 8006634:	b293      	uxth	r3, r2
 8006636:	fb06 e303 	mla	r3, r6, r3, lr
 800663a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ebaa 0303 	sub.w	r3, sl, r3
 8006644:	0c12      	lsrs	r2, r2, #16
 8006646:	f8dc a000 	ldr.w	sl, [ip]
 800664a:	fb06 e202 	mla	r2, r6, r2, lr
 800664e:	fa13 f38a 	uxtah	r3, r3, sl
 8006652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006656:	fa1f fa82 	uxth.w	sl, r2
 800665a:	f8dc 2000 	ldr.w	r2, [ip]
 800665e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006666:	b29b      	uxth	r3, r3
 8006668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800666c:	4581      	cmp	r9, r0
 800666e:	f84c 3b04 	str.w	r3, [ip], #4
 8006672:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006676:	d2db      	bcs.n	8006630 <quorem+0x44>
 8006678:	f855 300b 	ldr.w	r3, [r5, fp]
 800667c:	b92b      	cbnz	r3, 800668a <quorem+0x9e>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	3b04      	subs	r3, #4
 8006682:	429d      	cmp	r5, r3
 8006684:	461a      	mov	r2, r3
 8006686:	d32e      	bcc.n	80066e6 <quorem+0xfa>
 8006688:	613c      	str	r4, [r7, #16]
 800668a:	4638      	mov	r0, r7
 800668c:	f001 f8c0 	bl	8007810 <__mcmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	db24      	blt.n	80066de <quorem+0xf2>
 8006694:	3601      	adds	r6, #1
 8006696:	4628      	mov	r0, r5
 8006698:	f04f 0c00 	mov.w	ip, #0
 800669c:	f858 2b04 	ldr.w	r2, [r8], #4
 80066a0:	f8d0 e000 	ldr.w	lr, [r0]
 80066a4:	b293      	uxth	r3, r2
 80066a6:	ebac 0303 	sub.w	r3, ip, r3
 80066aa:	0c12      	lsrs	r2, r2, #16
 80066ac:	fa13 f38e 	uxtah	r3, r3, lr
 80066b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066be:	45c1      	cmp	r9, r8
 80066c0:	f840 3b04 	str.w	r3, [r0], #4
 80066c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066c8:	d2e8      	bcs.n	800669c <quorem+0xb0>
 80066ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066d2:	b922      	cbnz	r2, 80066de <quorem+0xf2>
 80066d4:	3b04      	subs	r3, #4
 80066d6:	429d      	cmp	r5, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	d30a      	bcc.n	80066f2 <quorem+0x106>
 80066dc:	613c      	str	r4, [r7, #16]
 80066de:	4630      	mov	r0, r6
 80066e0:	b003      	add	sp, #12
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	3b04      	subs	r3, #4
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	d1cc      	bne.n	8006688 <quorem+0x9c>
 80066ee:	3c01      	subs	r4, #1
 80066f0:	e7c7      	b.n	8006682 <quorem+0x96>
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	d1f0      	bne.n	80066dc <quorem+0xf0>
 80066fa:	3c01      	subs	r4, #1
 80066fc:	e7eb      	b.n	80066d6 <quorem+0xea>
 80066fe:	2000      	movs	r0, #0
 8006700:	e7ee      	b.n	80066e0 <quorem+0xf4>
 8006702:	0000      	movs	r0, r0
 8006704:	0000      	movs	r0, r0
	...

08006708 <_dtoa_r>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	ed2d 8b02 	vpush	{d8}
 8006710:	ec57 6b10 	vmov	r6, r7, d0
 8006714:	b095      	sub	sp, #84	; 0x54
 8006716:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006718:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800671c:	9105      	str	r1, [sp, #20]
 800671e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006722:	4604      	mov	r4, r0
 8006724:	9209      	str	r2, [sp, #36]	; 0x24
 8006726:	930f      	str	r3, [sp, #60]	; 0x3c
 8006728:	b975      	cbnz	r5, 8006748 <_dtoa_r+0x40>
 800672a:	2010      	movs	r0, #16
 800672c:	f000 fddc 	bl	80072e8 <malloc>
 8006730:	4602      	mov	r2, r0
 8006732:	6260      	str	r0, [r4, #36]	; 0x24
 8006734:	b920      	cbnz	r0, 8006740 <_dtoa_r+0x38>
 8006736:	4bb2      	ldr	r3, [pc, #712]	; (8006a00 <_dtoa_r+0x2f8>)
 8006738:	21ea      	movs	r1, #234	; 0xea
 800673a:	48b2      	ldr	r0, [pc, #712]	; (8006a04 <_dtoa_r+0x2fc>)
 800673c:	f001 fb8e 	bl	8007e5c <__assert_func>
 8006740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006744:	6005      	str	r5, [r0, #0]
 8006746:	60c5      	str	r5, [r0, #12]
 8006748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	b151      	cbz	r1, 8006764 <_dtoa_r+0x5c>
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	604a      	str	r2, [r1, #4]
 8006752:	2301      	movs	r3, #1
 8006754:	4093      	lsls	r3, r2
 8006756:	608b      	str	r3, [r1, #8]
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fe1b 	bl	8007394 <_Bfree>
 800675e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	1e3b      	subs	r3, r7, #0
 8006766:	bfb9      	ittee	lt
 8006768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800676c:	9303      	strlt	r3, [sp, #12]
 800676e:	2300      	movge	r3, #0
 8006770:	f8c8 3000 	strge.w	r3, [r8]
 8006774:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006778:	4ba3      	ldr	r3, [pc, #652]	; (8006a08 <_dtoa_r+0x300>)
 800677a:	bfbc      	itt	lt
 800677c:	2201      	movlt	r2, #1
 800677e:	f8c8 2000 	strlt.w	r2, [r8]
 8006782:	ea33 0309 	bics.w	r3, r3, r9
 8006786:	d11b      	bne.n	80067c0 <_dtoa_r+0xb8>
 8006788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800678a:	f242 730f 	movw	r3, #9999	; 0x270f
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006794:	4333      	orrs	r3, r6
 8006796:	f000 857a 	beq.w	800728e <_dtoa_r+0xb86>
 800679a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800679c:	b963      	cbnz	r3, 80067b8 <_dtoa_r+0xb0>
 800679e:	4b9b      	ldr	r3, [pc, #620]	; (8006a0c <_dtoa_r+0x304>)
 80067a0:	e024      	b.n	80067ec <_dtoa_r+0xe4>
 80067a2:	4b9b      	ldr	r3, [pc, #620]	; (8006a10 <_dtoa_r+0x308>)
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	9800      	ldr	r0, [sp, #0]
 80067ae:	b015      	add	sp, #84	; 0x54
 80067b0:	ecbd 8b02 	vpop	{d8}
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	4b94      	ldr	r3, [pc, #592]	; (8006a0c <_dtoa_r+0x304>)
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	3303      	adds	r3, #3
 80067be:	e7f3      	b.n	80067a8 <_dtoa_r+0xa0>
 80067c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	ec51 0b17 	vmov	r0, r1, d7
 80067ca:	2300      	movs	r3, #0
 80067cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80067d0:	f7fa f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d4:	4680      	mov	r8, r0
 80067d6:	b158      	cbz	r0, 80067f0 <_dtoa_r+0xe8>
 80067d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067da:	2301      	movs	r3, #1
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8551 	beq.w	8007288 <_dtoa_r+0xb80>
 80067e6:	488b      	ldr	r0, [pc, #556]	; (8006a14 <_dtoa_r+0x30c>)
 80067e8:	6018      	str	r0, [r3, #0]
 80067ea:	1e43      	subs	r3, r0, #1
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	e7dd      	b.n	80067ac <_dtoa_r+0xa4>
 80067f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80067f4:	aa12      	add	r2, sp, #72	; 0x48
 80067f6:	a913      	add	r1, sp, #76	; 0x4c
 80067f8:	4620      	mov	r0, r4
 80067fa:	f001 f8ad 	bl	8007958 <__d2b>
 80067fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006802:	4683      	mov	fp, r0
 8006804:	2d00      	cmp	r5, #0
 8006806:	d07c      	beq.n	8006902 <_dtoa_r+0x1fa>
 8006808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800680e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006812:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006816:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800681a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800681e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006822:	4b7d      	ldr	r3, [pc, #500]	; (8006a18 <_dtoa_r+0x310>)
 8006824:	2200      	movs	r2, #0
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 fd35 	bl	8000298 <__aeabi_dsub>
 800682e:	a36e      	add	r3, pc, #440	; (adr r3, 80069e8 <_dtoa_r+0x2e0>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fee8 	bl	8000608 <__aeabi_dmul>
 8006838:	a36d      	add	r3, pc, #436	; (adr r3, 80069f0 <_dtoa_r+0x2e8>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd2d 	bl	800029c <__adddf3>
 8006842:	4606      	mov	r6, r0
 8006844:	4628      	mov	r0, r5
 8006846:	460f      	mov	r7, r1
 8006848:	f7f9 fe74 	bl	8000534 <__aeabi_i2d>
 800684c:	a36a      	add	r3, pc, #424	; (adr r3, 80069f8 <_dtoa_r+0x2f0>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fed9 	bl	8000608 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4630      	mov	r0, r6
 800685c:	4639      	mov	r1, r7
 800685e:	f7f9 fd1d 	bl	800029c <__adddf3>
 8006862:	4606      	mov	r6, r0
 8006864:	460f      	mov	r7, r1
 8006866:	f7fa f97f 	bl	8000b68 <__aeabi_d2iz>
 800686a:	2200      	movs	r2, #0
 800686c:	4682      	mov	sl, r0
 800686e:	2300      	movs	r3, #0
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7fa f93a 	bl	8000aec <__aeabi_dcmplt>
 8006878:	b148      	cbz	r0, 800688e <_dtoa_r+0x186>
 800687a:	4650      	mov	r0, sl
 800687c:	f7f9 fe5a 	bl	8000534 <__aeabi_i2d>
 8006880:	4632      	mov	r2, r6
 8006882:	463b      	mov	r3, r7
 8006884:	f7fa f928 	bl	8000ad8 <__aeabi_dcmpeq>
 8006888:	b908      	cbnz	r0, 800688e <_dtoa_r+0x186>
 800688a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800688e:	f1ba 0f16 	cmp.w	sl, #22
 8006892:	d854      	bhi.n	800693e <_dtoa_r+0x236>
 8006894:	4b61      	ldr	r3, [pc, #388]	; (8006a1c <_dtoa_r+0x314>)
 8006896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068a2:	f7fa f923 	bl	8000aec <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d04b      	beq.n	8006942 <_dtoa_r+0x23a>
 80068aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ae:	2300      	movs	r3, #0
 80068b0:	930e      	str	r3, [sp, #56]	; 0x38
 80068b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068b4:	1b5d      	subs	r5, r3, r5
 80068b6:	1e6b      	subs	r3, r5, #1
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	bf43      	ittte	mi
 80068bc:	2300      	movmi	r3, #0
 80068be:	f1c5 0801 	rsbmi	r8, r5, #1
 80068c2:	9304      	strmi	r3, [sp, #16]
 80068c4:	f04f 0800 	movpl.w	r8, #0
 80068c8:	f1ba 0f00 	cmp.w	sl, #0
 80068cc:	db3b      	blt.n	8006946 <_dtoa_r+0x23e>
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80068d4:	4453      	add	r3, sl
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	2300      	movs	r3, #0
 80068da:	9306      	str	r3, [sp, #24]
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	2b09      	cmp	r3, #9
 80068e0:	d869      	bhi.n	80069b6 <_dtoa_r+0x2ae>
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	bfc4      	itt	gt
 80068e6:	3b04      	subgt	r3, #4
 80068e8:	9305      	strgt	r3, [sp, #20]
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	f1a3 0302 	sub.w	r3, r3, #2
 80068f0:	bfcc      	ite	gt
 80068f2:	2500      	movgt	r5, #0
 80068f4:	2501      	movle	r5, #1
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d869      	bhi.n	80069ce <_dtoa_r+0x2c6>
 80068fa:	e8df f003 	tbb	[pc, r3]
 80068fe:	4e2c      	.short	0x4e2c
 8006900:	5a4c      	.short	0x5a4c
 8006902:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006906:	441d      	add	r5, r3
 8006908:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800690c:	2b20      	cmp	r3, #32
 800690e:	bfc1      	itttt	gt
 8006910:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006914:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006918:	fa09 f303 	lslgt.w	r3, r9, r3
 800691c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006920:	bfda      	itte	le
 8006922:	f1c3 0320 	rsble	r3, r3, #32
 8006926:	fa06 f003 	lslle.w	r0, r6, r3
 800692a:	4318      	orrgt	r0, r3
 800692c:	f7f9 fdf2 	bl	8000514 <__aeabi_ui2d>
 8006930:	2301      	movs	r3, #1
 8006932:	4606      	mov	r6, r0
 8006934:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006938:	3d01      	subs	r5, #1
 800693a:	9310      	str	r3, [sp, #64]	; 0x40
 800693c:	e771      	b.n	8006822 <_dtoa_r+0x11a>
 800693e:	2301      	movs	r3, #1
 8006940:	e7b6      	b.n	80068b0 <_dtoa_r+0x1a8>
 8006942:	900e      	str	r0, [sp, #56]	; 0x38
 8006944:	e7b5      	b.n	80068b2 <_dtoa_r+0x1aa>
 8006946:	f1ca 0300 	rsb	r3, sl, #0
 800694a:	9306      	str	r3, [sp, #24]
 800694c:	2300      	movs	r3, #0
 800694e:	eba8 080a 	sub.w	r8, r8, sl
 8006952:	930d      	str	r3, [sp, #52]	; 0x34
 8006954:	e7c2      	b.n	80068dc <_dtoa_r+0x1d4>
 8006956:	2300      	movs	r3, #0
 8006958:	9308      	str	r3, [sp, #32]
 800695a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc39      	bgt.n	80069d4 <_dtoa_r+0x2cc>
 8006960:	f04f 0901 	mov.w	r9, #1
 8006964:	f8cd 9004 	str.w	r9, [sp, #4]
 8006968:	464b      	mov	r3, r9
 800696a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800696e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006970:	2200      	movs	r2, #0
 8006972:	6042      	str	r2, [r0, #4]
 8006974:	2204      	movs	r2, #4
 8006976:	f102 0614 	add.w	r6, r2, #20
 800697a:	429e      	cmp	r6, r3
 800697c:	6841      	ldr	r1, [r0, #4]
 800697e:	d92f      	bls.n	80069e0 <_dtoa_r+0x2d8>
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fcc7 	bl	8007314 <_Balloc>
 8006986:	9000      	str	r0, [sp, #0]
 8006988:	2800      	cmp	r0, #0
 800698a:	d14b      	bne.n	8006a24 <_dtoa_r+0x31c>
 800698c:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <_dtoa_r+0x318>)
 800698e:	4602      	mov	r2, r0
 8006990:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006994:	e6d1      	b.n	800673a <_dtoa_r+0x32>
 8006996:	2301      	movs	r3, #1
 8006998:	e7de      	b.n	8006958 <_dtoa_r+0x250>
 800699a:	2300      	movs	r3, #0
 800699c:	9308      	str	r3, [sp, #32]
 800699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a0:	eb0a 0903 	add.w	r9, sl, r3
 80069a4:	f109 0301 	add.w	r3, r9, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	bfb8      	it	lt
 80069ae:	2301      	movlt	r3, #1
 80069b0:	e7dd      	b.n	800696e <_dtoa_r+0x266>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7f2      	b.n	800699c <_dtoa_r+0x294>
 80069b6:	2501      	movs	r5, #1
 80069b8:	2300      	movs	r3, #0
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	9508      	str	r5, [sp, #32]
 80069be:	f04f 39ff 	mov.w	r9, #4294967295
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80069c8:	2312      	movs	r3, #18
 80069ca:	9209      	str	r2, [sp, #36]	; 0x24
 80069cc:	e7cf      	b.n	800696e <_dtoa_r+0x266>
 80069ce:	2301      	movs	r3, #1
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	e7f4      	b.n	80069be <_dtoa_r+0x2b6>
 80069d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069dc:	464b      	mov	r3, r9
 80069de:	e7c6      	b.n	800696e <_dtoa_r+0x266>
 80069e0:	3101      	adds	r1, #1
 80069e2:	6041      	str	r1, [r0, #4]
 80069e4:	0052      	lsls	r2, r2, #1
 80069e6:	e7c6      	b.n	8006976 <_dtoa_r+0x26e>
 80069e8:	636f4361 	.word	0x636f4361
 80069ec:	3fd287a7 	.word	0x3fd287a7
 80069f0:	8b60c8b3 	.word	0x8b60c8b3
 80069f4:	3fc68a28 	.word	0x3fc68a28
 80069f8:	509f79fb 	.word	0x509f79fb
 80069fc:	3fd34413 	.word	0x3fd34413
 8006a00:	08008a91 	.word	0x08008a91
 8006a04:	08008aa8 	.word	0x08008aa8
 8006a08:	7ff00000 	.word	0x7ff00000
 8006a0c:	08008a8d 	.word	0x08008a8d
 8006a10:	08008a84 	.word	0x08008a84
 8006a14:	08008a61 	.word	0x08008a61
 8006a18:	3ff80000 	.word	0x3ff80000
 8006a1c:	08008ba0 	.word	0x08008ba0
 8006a20:	08008b07 	.word	0x08008b07
 8006a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a26:	9a00      	ldr	r2, [sp, #0]
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	2b0e      	cmp	r3, #14
 8006a2e:	f200 80ad 	bhi.w	8006b8c <_dtoa_r+0x484>
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	f000 80aa 	beq.w	8006b8c <_dtoa_r+0x484>
 8006a38:	f1ba 0f00 	cmp.w	sl, #0
 8006a3c:	dd36      	ble.n	8006aac <_dtoa_r+0x3a4>
 8006a3e:	4ac3      	ldr	r2, [pc, #780]	; (8006d4c <_dtoa_r+0x644>)
 8006a40:	f00a 030f 	and.w	r3, sl, #15
 8006a44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a48:	ed93 7b00 	vldr	d7, [r3]
 8006a4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006a54:	eeb0 8a47 	vmov.f32	s16, s14
 8006a58:	eef0 8a67 	vmov.f32	s17, s15
 8006a5c:	d016      	beq.n	8006a8c <_dtoa_r+0x384>
 8006a5e:	4bbc      	ldr	r3, [pc, #752]	; (8006d50 <_dtoa_r+0x648>)
 8006a60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a68:	f7f9 fef8 	bl	800085c <__aeabi_ddiv>
 8006a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a70:	f007 070f 	and.w	r7, r7, #15
 8006a74:	2503      	movs	r5, #3
 8006a76:	4eb6      	ldr	r6, [pc, #728]	; (8006d50 <_dtoa_r+0x648>)
 8006a78:	b957      	cbnz	r7, 8006a90 <_dtoa_r+0x388>
 8006a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7e:	ec53 2b18 	vmov	r2, r3, d8
 8006a82:	f7f9 feeb 	bl	800085c <__aeabi_ddiv>
 8006a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8a:	e029      	b.n	8006ae0 <_dtoa_r+0x3d8>
 8006a8c:	2502      	movs	r5, #2
 8006a8e:	e7f2      	b.n	8006a76 <_dtoa_r+0x36e>
 8006a90:	07f9      	lsls	r1, r7, #31
 8006a92:	d508      	bpl.n	8006aa6 <_dtoa_r+0x39e>
 8006a94:	ec51 0b18 	vmov	r0, r1, d8
 8006a98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a9c:	f7f9 fdb4 	bl	8000608 <__aeabi_dmul>
 8006aa0:	ec41 0b18 	vmov	d8, r0, r1
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	107f      	asrs	r7, r7, #1
 8006aa8:	3608      	adds	r6, #8
 8006aaa:	e7e5      	b.n	8006a78 <_dtoa_r+0x370>
 8006aac:	f000 80a6 	beq.w	8006bfc <_dtoa_r+0x4f4>
 8006ab0:	f1ca 0600 	rsb	r6, sl, #0
 8006ab4:	4ba5      	ldr	r3, [pc, #660]	; (8006d4c <_dtoa_r+0x644>)
 8006ab6:	4fa6      	ldr	r7, [pc, #664]	; (8006d50 <_dtoa_r+0x648>)
 8006ab8:	f006 020f 	and.w	r2, r6, #15
 8006abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ac8:	f7f9 fd9e 	bl	8000608 <__aeabi_dmul>
 8006acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad0:	1136      	asrs	r6, r6, #4
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2502      	movs	r5, #2
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	f040 8085 	bne.w	8006be6 <_dtoa_r+0x4de>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1d2      	bne.n	8006a86 <_dtoa_r+0x37e>
 8006ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 808c 	beq.w	8006c00 <_dtoa_r+0x4f8>
 8006ae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006aec:	4b99      	ldr	r3, [pc, #612]	; (8006d54 <_dtoa_r+0x64c>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 fffa 	bl	8000aec <__aeabi_dcmplt>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	f000 8081 	beq.w	8006c00 <_dtoa_r+0x4f8>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d07d      	beq.n	8006c00 <_dtoa_r+0x4f8>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	dd3c      	ble.n	8006b84 <_dtoa_r+0x47c>
 8006b0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	2200      	movs	r2, #0
 8006b12:	4b91      	ldr	r3, [pc, #580]	; (8006d58 <_dtoa_r+0x650>)
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fd76 	bl	8000608 <__aeabi_dmul>
 8006b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b20:	3501      	adds	r5, #1
 8006b22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006b26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f7f9 fd02 	bl	8000534 <__aeabi_i2d>
 8006b30:	4632      	mov	r2, r6
 8006b32:	463b      	mov	r3, r7
 8006b34:	f7f9 fd68 	bl	8000608 <__aeabi_dmul>
 8006b38:	4b88      	ldr	r3, [pc, #544]	; (8006d5c <_dtoa_r+0x654>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7f9 fbae 	bl	800029c <__adddf3>
 8006b40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b48:	9303      	str	r3, [sp, #12]
 8006b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d15c      	bne.n	8006c0a <_dtoa_r+0x502>
 8006b50:	4b83      	ldr	r3, [pc, #524]	; (8006d60 <_dtoa_r+0x658>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fb9e 	bl	8000298 <__aeabi_dsub>
 8006b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b60:	4606      	mov	r6, r0
 8006b62:	460f      	mov	r7, r1
 8006b64:	f7f9 ffe0 	bl	8000b28 <__aeabi_dcmpgt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f040 8296 	bne.w	800709a <_dtoa_r+0x992>
 8006b6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b72:	4630      	mov	r0, r6
 8006b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b78:	4639      	mov	r1, r7
 8006b7a:	f7f9 ffb7 	bl	8000aec <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f040 8288 	bne.w	8007094 <_dtoa_r+0x98c>
 8006b84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f2c0 8158 	blt.w	8006e44 <_dtoa_r+0x73c>
 8006b94:	f1ba 0f0e 	cmp.w	sl, #14
 8006b98:	f300 8154 	bgt.w	8006e44 <_dtoa_r+0x73c>
 8006b9c:	4b6b      	ldr	r3, [pc, #428]	; (8006d4c <_dtoa_r+0x644>)
 8006b9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ba2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f280 80e3 	bge.w	8006d74 <_dtoa_r+0x66c>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f300 80df 	bgt.w	8006d74 <_dtoa_r+0x66c>
 8006bb6:	f040 826d 	bne.w	8007094 <_dtoa_r+0x98c>
 8006bba:	4b69      	ldr	r3, [pc, #420]	; (8006d60 <_dtoa_r+0x658>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	f7f9 fd21 	bl	8000608 <__aeabi_dmul>
 8006bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bca:	f7f9 ffa3 	bl	8000b14 <__aeabi_dcmpge>
 8006bce:	9e01      	ldr	r6, [sp, #4]
 8006bd0:	4637      	mov	r7, r6
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f040 8243 	bne.w	800705e <_dtoa_r+0x956>
 8006bd8:	9d00      	ldr	r5, [sp, #0]
 8006bda:	2331      	movs	r3, #49	; 0x31
 8006bdc:	f805 3b01 	strb.w	r3, [r5], #1
 8006be0:	f10a 0a01 	add.w	sl, sl, #1
 8006be4:	e23f      	b.n	8007066 <_dtoa_r+0x95e>
 8006be6:	07f2      	lsls	r2, r6, #31
 8006be8:	d505      	bpl.n	8006bf6 <_dtoa_r+0x4ee>
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	f7f9 fd0b 	bl	8000608 <__aeabi_dmul>
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	1076      	asrs	r6, r6, #1
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	e76c      	b.n	8006ad6 <_dtoa_r+0x3ce>
 8006bfc:	2502      	movs	r5, #2
 8006bfe:	e76f      	b.n	8006ae0 <_dtoa_r+0x3d8>
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c06:	930c      	str	r3, [sp, #48]	; 0x30
 8006c08:	e78d      	b.n	8006b26 <_dtoa_r+0x41e>
 8006c0a:	9900      	ldr	r1, [sp, #0]
 8006c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c10:	4b4e      	ldr	r3, [pc, #312]	; (8006d4c <_dtoa_r+0x644>)
 8006c12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c16:	4401      	add	r1, r0
 8006c18:	9102      	str	r1, [sp, #8]
 8006c1a:	9908      	ldr	r1, [sp, #32]
 8006c1c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c20:	eef0 8a67 	vmov.f32	s17, s15
 8006c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	d045      	beq.n	8006cbc <_dtoa_r+0x5b4>
 8006c30:	494c      	ldr	r1, [pc, #304]	; (8006d64 <_dtoa_r+0x65c>)
 8006c32:	2000      	movs	r0, #0
 8006c34:	f7f9 fe12 	bl	800085c <__aeabi_ddiv>
 8006c38:	ec53 2b18 	vmov	r2, r3, d8
 8006c3c:	f7f9 fb2c 	bl	8000298 <__aeabi_dsub>
 8006c40:	9d00      	ldr	r5, [sp, #0]
 8006c42:	ec41 0b18 	vmov	d8, r0, r1
 8006c46:	4639      	mov	r1, r7
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f7f9 ff8d 	bl	8000b68 <__aeabi_d2iz>
 8006c4e:	900c      	str	r0, [sp, #48]	; 0x30
 8006c50:	f7f9 fc70 	bl	8000534 <__aeabi_i2d>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	f7f9 fb1c 	bl	8000298 <__aeabi_dsub>
 8006c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c62:	3330      	adds	r3, #48	; 0x30
 8006c64:	f805 3b01 	strb.w	r3, [r5], #1
 8006c68:	ec53 2b18 	vmov	r2, r3, d8
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	f7f9 ff3c 	bl	8000aec <__aeabi_dcmplt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d165      	bne.n	8006d44 <_dtoa_r+0x63c>
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	4935      	ldr	r1, [pc, #212]	; (8006d54 <_dtoa_r+0x64c>)
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f7f9 fb0a 	bl	8000298 <__aeabi_dsub>
 8006c84:	ec53 2b18 	vmov	r2, r3, d8
 8006c88:	f7f9 ff30 	bl	8000aec <__aeabi_dcmplt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f040 80b9 	bne.w	8006e04 <_dtoa_r+0x6fc>
 8006c92:	9b02      	ldr	r3, [sp, #8]
 8006c94:	429d      	cmp	r5, r3
 8006c96:	f43f af75 	beq.w	8006b84 <_dtoa_r+0x47c>
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <_dtoa_r+0x650>)
 8006c9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f7f9 fcb1 	bl	8000608 <__aeabi_dmul>
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <_dtoa_r+0x650>)
 8006ca8:	ec41 0b18 	vmov	d8, r0, r1
 8006cac:	2200      	movs	r2, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	e7c4      	b.n	8006c46 <_dtoa_r+0x53e>
 8006cbc:	ec51 0b17 	vmov	r0, r1, d7
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	9d00      	ldr	r5, [sp, #0]
 8006cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8006cca:	ec41 0b18 	vmov	d8, r0, r1
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7f9 ff49 	bl	8000b68 <__aeabi_d2iz>
 8006cd6:	9011      	str	r0, [sp, #68]	; 0x44
 8006cd8:	f7f9 fc2c 	bl	8000534 <__aeabi_i2d>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	f7f9 fad8 	bl	8000298 <__aeabi_dsub>
 8006ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cea:	3330      	adds	r3, #48	; 0x30
 8006cec:	f805 3b01 	strb.w	r3, [r5], #1
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	429d      	cmp	r5, r3
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	d134      	bne.n	8006d68 <_dtoa_r+0x660>
 8006cfe:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <_dtoa_r+0x65c>)
 8006d00:	ec51 0b18 	vmov	r0, r1, d8
 8006d04:	f7f9 faca 	bl	800029c <__adddf3>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 ff0a 	bl	8000b28 <__aeabi_dcmpgt>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d175      	bne.n	8006e04 <_dtoa_r+0x6fc>
 8006d18:	ec53 2b18 	vmov	r2, r3, d8
 8006d1c:	4911      	ldr	r1, [pc, #68]	; (8006d64 <_dtoa_r+0x65c>)
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f7f9 faba 	bl	8000298 <__aeabi_dsub>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4630      	mov	r0, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f7f9 fede 	bl	8000aec <__aeabi_dcmplt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f af27 	beq.w	8006b84 <_dtoa_r+0x47c>
 8006d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d38:	1e6b      	subs	r3, r5, #1
 8006d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d0f8      	beq.n	8006d36 <_dtoa_r+0x62e>
 8006d44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d48:	e04a      	b.n	8006de0 <_dtoa_r+0x6d8>
 8006d4a:	bf00      	nop
 8006d4c:	08008ba0 	.word	0x08008ba0
 8006d50:	08008b78 	.word	0x08008b78
 8006d54:	3ff00000 	.word	0x3ff00000
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	401c0000 	.word	0x401c0000
 8006d60:	40140000 	.word	0x40140000
 8006d64:	3fe00000 	.word	0x3fe00000
 8006d68:	4baf      	ldr	r3, [pc, #700]	; (8007028 <_dtoa_r+0x920>)
 8006d6a:	f7f9 fc4d 	bl	8000608 <__aeabi_dmul>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	e7ac      	b.n	8006cce <_dtoa_r+0x5c6>
 8006d74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d78:	9d00      	ldr	r5, [sp, #0]
 8006d7a:	4642      	mov	r2, r8
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 fd6b 	bl	800085c <__aeabi_ddiv>
 8006d86:	f7f9 feef 	bl	8000b68 <__aeabi_d2iz>
 8006d8a:	9002      	str	r0, [sp, #8]
 8006d8c:	f7f9 fbd2 	bl	8000534 <__aeabi_i2d>
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fa7a 	bl	8000298 <__aeabi_dsub>
 8006da4:	9e02      	ldr	r6, [sp, #8]
 8006da6:	9f01      	ldr	r7, [sp, #4]
 8006da8:	3630      	adds	r6, #48	; 0x30
 8006daa:	f805 6b01 	strb.w	r6, [r5], #1
 8006dae:	9e00      	ldr	r6, [sp, #0]
 8006db0:	1bae      	subs	r6, r5, r6
 8006db2:	42b7      	cmp	r7, r6
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	d137      	bne.n	8006e2a <_dtoa_r+0x722>
 8006dba:	f7f9 fa6f 	bl	800029c <__adddf3>
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	f7f9 feaf 	bl	8000b28 <__aeabi_dcmpgt>
 8006dca:	b9c8      	cbnz	r0, 8006e00 <_dtoa_r+0x6f8>
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd8:	b110      	cbz	r0, 8006de0 <_dtoa_r+0x6d8>
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	07d9      	lsls	r1, r3, #31
 8006dde:	d40f      	bmi.n	8006e00 <_dtoa_r+0x6f8>
 8006de0:	4620      	mov	r0, r4
 8006de2:	4659      	mov	r1, fp
 8006de4:	f000 fad6 	bl	8007394 <_Bfree>
 8006de8:	2300      	movs	r3, #0
 8006dea:	702b      	strb	r3, [r5, #0]
 8006dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dee:	f10a 0001 	add.w	r0, sl, #1
 8006df2:	6018      	str	r0, [r3, #0]
 8006df4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f43f acd8 	beq.w	80067ac <_dtoa_r+0xa4>
 8006dfc:	601d      	str	r5, [r3, #0]
 8006dfe:	e4d5      	b.n	80067ac <_dtoa_r+0xa4>
 8006e00:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e04:	462b      	mov	r3, r5
 8006e06:	461d      	mov	r5, r3
 8006e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e0c:	2a39      	cmp	r2, #57	; 0x39
 8006e0e:	d108      	bne.n	8006e22 <_dtoa_r+0x71a>
 8006e10:	9a00      	ldr	r2, [sp, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d1f7      	bne.n	8006e06 <_dtoa_r+0x6fe>
 8006e16:	9a07      	ldr	r2, [sp, #28]
 8006e18:	9900      	ldr	r1, [sp, #0]
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	9207      	str	r2, [sp, #28]
 8006e1e:	2230      	movs	r2, #48	; 0x30
 8006e20:	700a      	strb	r2, [r1, #0]
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	3201      	adds	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e78c      	b.n	8006d44 <_dtoa_r+0x63c>
 8006e2a:	4b7f      	ldr	r3, [pc, #508]	; (8007028 <_dtoa_r+0x920>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f7f9 fbeb 	bl	8000608 <__aeabi_dmul>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	f7f9 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d09b      	beq.n	8006d7a <_dtoa_r+0x672>
 8006e42:	e7cd      	b.n	8006de0 <_dtoa_r+0x6d8>
 8006e44:	9a08      	ldr	r2, [sp, #32]
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	f000 80c4 	beq.w	8006fd4 <_dtoa_r+0x8cc>
 8006e4c:	9a05      	ldr	r2, [sp, #20]
 8006e4e:	2a01      	cmp	r2, #1
 8006e50:	f300 80a8 	bgt.w	8006fa4 <_dtoa_r+0x89c>
 8006e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	f000 80a0 	beq.w	8006f9c <_dtoa_r+0x894>
 8006e5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e60:	9e06      	ldr	r6, [sp, #24]
 8006e62:	4645      	mov	r5, r8
 8006e64:	9a04      	ldr	r2, [sp, #16]
 8006e66:	2101      	movs	r1, #1
 8006e68:	441a      	add	r2, r3
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4498      	add	r8, r3
 8006e6e:	9204      	str	r2, [sp, #16]
 8006e70:	f000 fb4c 	bl	800750c <__i2b>
 8006e74:	4607      	mov	r7, r0
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	dd0b      	ble.n	8006e92 <_dtoa_r+0x78a>
 8006e7a:	9b04      	ldr	r3, [sp, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dd08      	ble.n	8006e92 <_dtoa_r+0x78a>
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	9a04      	ldr	r2, [sp, #16]
 8006e84:	bfa8      	it	ge
 8006e86:	462b      	movge	r3, r5
 8006e88:	eba8 0803 	sub.w	r8, r8, r3
 8006e8c:	1aed      	subs	r5, r5, r3
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	9b06      	ldr	r3, [sp, #24]
 8006e94:	b1fb      	cbz	r3, 8006ed6 <_dtoa_r+0x7ce>
 8006e96:	9b08      	ldr	r3, [sp, #32]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 809f 	beq.w	8006fdc <_dtoa_r+0x8d4>
 8006e9e:	2e00      	cmp	r6, #0
 8006ea0:	dd11      	ble.n	8006ec6 <_dtoa_r+0x7be>
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 fbec 	bl	8007684 <__pow5mult>
 8006eac:	465a      	mov	r2, fp
 8006eae:	4601      	mov	r1, r0
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 fb40 	bl	8007538 <__multiply>
 8006eb8:	4659      	mov	r1, fp
 8006eba:	9007      	str	r0, [sp, #28]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fa69 	bl	8007394 <_Bfree>
 8006ec2:	9b07      	ldr	r3, [sp, #28]
 8006ec4:	469b      	mov	fp, r3
 8006ec6:	9b06      	ldr	r3, [sp, #24]
 8006ec8:	1b9a      	subs	r2, r3, r6
 8006eca:	d004      	beq.n	8006ed6 <_dtoa_r+0x7ce>
 8006ecc:	4659      	mov	r1, fp
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fbd8 	bl	8007684 <__pow5mult>
 8006ed4:	4683      	mov	fp, r0
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fb17 	bl	800750c <__i2b>
 8006ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	dd7c      	ble.n	8006fe0 <_dtoa_r+0x8d8>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fbca 	bl	8007684 <__pow5mult>
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	dd76      	ble.n	8006fe6 <_dtoa_r+0x8de>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9306      	str	r3, [sp, #24]
 8006efc:	6933      	ldr	r3, [r6, #16]
 8006efe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f02:	6918      	ldr	r0, [r3, #16]
 8006f04:	f000 fab2 	bl	800746c <__hi0bits>
 8006f08:	f1c0 0020 	rsb	r0, r0, #32
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	4418      	add	r0, r3
 8006f10:	f010 001f 	ands.w	r0, r0, #31
 8006f14:	f000 8086 	beq.w	8007024 <_dtoa_r+0x91c>
 8006f18:	f1c0 0320 	rsb	r3, r0, #32
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	dd7f      	ble.n	8007020 <_dtoa_r+0x918>
 8006f20:	f1c0 001c 	rsb	r0, r0, #28
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	4403      	add	r3, r0
 8006f28:	4480      	add	r8, r0
 8006f2a:	4405      	add	r5, r0
 8006f2c:	9304      	str	r3, [sp, #16]
 8006f2e:	f1b8 0f00 	cmp.w	r8, #0
 8006f32:	dd05      	ble.n	8006f40 <_dtoa_r+0x838>
 8006f34:	4659      	mov	r1, fp
 8006f36:	4642      	mov	r2, r8
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fbfd 	bl	8007738 <__lshift>
 8006f3e:	4683      	mov	fp, r0
 8006f40:	9b04      	ldr	r3, [sp, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dd05      	ble.n	8006f52 <_dtoa_r+0x84a>
 8006f46:	4631      	mov	r1, r6
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fbf4 	bl	8007738 <__lshift>
 8006f50:	4606      	mov	r6, r0
 8006f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d069      	beq.n	800702c <_dtoa_r+0x924>
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4658      	mov	r0, fp
 8006f5c:	f000 fc58 	bl	8007810 <__mcmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	da63      	bge.n	800702c <_dtoa_r+0x924>
 8006f64:	2300      	movs	r3, #0
 8006f66:	4659      	mov	r1, fp
 8006f68:	220a      	movs	r2, #10
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fa34 	bl	80073d8 <__multadd>
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f76:	4683      	mov	fp, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 818f 	beq.w	800729c <_dtoa_r+0xb94>
 8006f7e:	4639      	mov	r1, r7
 8006f80:	2300      	movs	r3, #0
 8006f82:	220a      	movs	r2, #10
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fa27 	bl	80073d8 <__multadd>
 8006f8a:	f1b9 0f00 	cmp.w	r9, #0
 8006f8e:	4607      	mov	r7, r0
 8006f90:	f300 808e 	bgt.w	80070b0 <_dtoa_r+0x9a8>
 8006f94:	9b05      	ldr	r3, [sp, #20]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	dc50      	bgt.n	800703c <_dtoa_r+0x934>
 8006f9a:	e089      	b.n	80070b0 <_dtoa_r+0x9a8>
 8006f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fa2:	e75d      	b.n	8006e60 <_dtoa_r+0x758>
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	1e5e      	subs	r6, r3, #1
 8006fa8:	9b06      	ldr	r3, [sp, #24]
 8006faa:	42b3      	cmp	r3, r6
 8006fac:	bfbf      	itttt	lt
 8006fae:	9b06      	ldrlt	r3, [sp, #24]
 8006fb0:	9606      	strlt	r6, [sp, #24]
 8006fb2:	1af2      	sublt	r2, r6, r3
 8006fb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006fb6:	bfb6      	itet	lt
 8006fb8:	189b      	addlt	r3, r3, r2
 8006fba:	1b9e      	subge	r6, r3, r6
 8006fbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	bfb8      	it	lt
 8006fc2:	2600      	movlt	r6, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfb5      	itete	lt
 8006fc8:	eba8 0503 	sublt.w	r5, r8, r3
 8006fcc:	9b01      	ldrge	r3, [sp, #4]
 8006fce:	2300      	movlt	r3, #0
 8006fd0:	4645      	movge	r5, r8
 8006fd2:	e747      	b.n	8006e64 <_dtoa_r+0x75c>
 8006fd4:	9e06      	ldr	r6, [sp, #24]
 8006fd6:	9f08      	ldr	r7, [sp, #32]
 8006fd8:	4645      	mov	r5, r8
 8006fda:	e74c      	b.n	8006e76 <_dtoa_r+0x76e>
 8006fdc:	9a06      	ldr	r2, [sp, #24]
 8006fde:	e775      	b.n	8006ecc <_dtoa_r+0x7c4>
 8006fe0:	9b05      	ldr	r3, [sp, #20]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	dc18      	bgt.n	8007018 <_dtoa_r+0x910>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	b9b3      	cbnz	r3, 8007018 <_dtoa_r+0x910>
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff0:	b9a3      	cbnz	r3, 800701c <_dtoa_r+0x914>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	0d1b      	lsrs	r3, r3, #20
 8006ffa:	051b      	lsls	r3, r3, #20
 8006ffc:	b12b      	cbz	r3, 800700a <_dtoa_r+0x902>
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	3301      	adds	r3, #1
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	f108 0801 	add.w	r8, r8, #1
 8007008:	2301      	movs	r3, #1
 800700a:	9306      	str	r3, [sp, #24]
 800700c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800700e:	2b00      	cmp	r3, #0
 8007010:	f47f af74 	bne.w	8006efc <_dtoa_r+0x7f4>
 8007014:	2001      	movs	r0, #1
 8007016:	e779      	b.n	8006f0c <_dtoa_r+0x804>
 8007018:	2300      	movs	r3, #0
 800701a:	e7f6      	b.n	800700a <_dtoa_r+0x902>
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	e7f4      	b.n	800700a <_dtoa_r+0x902>
 8007020:	d085      	beq.n	8006f2e <_dtoa_r+0x826>
 8007022:	4618      	mov	r0, r3
 8007024:	301c      	adds	r0, #28
 8007026:	e77d      	b.n	8006f24 <_dtoa_r+0x81c>
 8007028:	40240000 	.word	0x40240000
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc38      	bgt.n	80070a4 <_dtoa_r+0x99c>
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	2b02      	cmp	r3, #2
 8007036:	dd35      	ble.n	80070a4 <_dtoa_r+0x99c>
 8007038:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	d10d      	bne.n	800705e <_dtoa_r+0x956>
 8007042:	4631      	mov	r1, r6
 8007044:	464b      	mov	r3, r9
 8007046:	2205      	movs	r2, #5
 8007048:	4620      	mov	r0, r4
 800704a:	f000 f9c5 	bl	80073d8 <__multadd>
 800704e:	4601      	mov	r1, r0
 8007050:	4606      	mov	r6, r0
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fbdc 	bl	8007810 <__mcmp>
 8007058:	2800      	cmp	r0, #0
 800705a:	f73f adbd 	bgt.w	8006bd8 <_dtoa_r+0x4d0>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	9d00      	ldr	r5, [sp, #0]
 8007062:	ea6f 0a03 	mvn.w	sl, r3
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	4631      	mov	r1, r6
 800706c:	4620      	mov	r0, r4
 800706e:	f000 f991 	bl	8007394 <_Bfree>
 8007072:	2f00      	cmp	r7, #0
 8007074:	f43f aeb4 	beq.w	8006de0 <_dtoa_r+0x6d8>
 8007078:	f1b8 0f00 	cmp.w	r8, #0
 800707c:	d005      	beq.n	800708a <_dtoa_r+0x982>
 800707e:	45b8      	cmp	r8, r7
 8007080:	d003      	beq.n	800708a <_dtoa_r+0x982>
 8007082:	4641      	mov	r1, r8
 8007084:	4620      	mov	r0, r4
 8007086:	f000 f985 	bl	8007394 <_Bfree>
 800708a:	4639      	mov	r1, r7
 800708c:	4620      	mov	r0, r4
 800708e:	f000 f981 	bl	8007394 <_Bfree>
 8007092:	e6a5      	b.n	8006de0 <_dtoa_r+0x6d8>
 8007094:	2600      	movs	r6, #0
 8007096:	4637      	mov	r7, r6
 8007098:	e7e1      	b.n	800705e <_dtoa_r+0x956>
 800709a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800709c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80070a0:	4637      	mov	r7, r6
 80070a2:	e599      	b.n	8006bd8 <_dtoa_r+0x4d0>
 80070a4:	9b08      	ldr	r3, [sp, #32]
 80070a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80fd 	beq.w	80072aa <_dtoa_r+0xba2>
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	dd05      	ble.n	80070c0 <_dtoa_r+0x9b8>
 80070b4:	4639      	mov	r1, r7
 80070b6:	462a      	mov	r2, r5
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fb3d 	bl	8007738 <__lshift>
 80070be:	4607      	mov	r7, r0
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d05c      	beq.n	8007180 <_dtoa_r+0xa78>
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f923 	bl	8007314 <_Balloc>
 80070ce:	4605      	mov	r5, r0
 80070d0:	b928      	cbnz	r0, 80070de <_dtoa_r+0x9d6>
 80070d2:	4b80      	ldr	r3, [pc, #512]	; (80072d4 <_dtoa_r+0xbcc>)
 80070d4:	4602      	mov	r2, r0
 80070d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070da:	f7ff bb2e 	b.w	800673a <_dtoa_r+0x32>
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	3202      	adds	r2, #2
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	f107 010c 	add.w	r1, r7, #12
 80070e8:	300c      	adds	r0, #12
 80070ea:	f000 f905 	bl	80072f8 <memcpy>
 80070ee:	2201      	movs	r2, #1
 80070f0:	4629      	mov	r1, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fb20 	bl	8007738 <__lshift>
 80070f8:	9b00      	ldr	r3, [sp, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	444b      	add	r3, r9
 8007102:	9307      	str	r3, [sp, #28]
 8007104:	9b02      	ldr	r3, [sp, #8]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	46b8      	mov	r8, r7
 800710c:	9306      	str	r3, [sp, #24]
 800710e:	4607      	mov	r7, r0
 8007110:	9b01      	ldr	r3, [sp, #4]
 8007112:	4631      	mov	r1, r6
 8007114:	3b01      	subs	r3, #1
 8007116:	4658      	mov	r0, fp
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	f7ff fa67 	bl	80065ec <quorem>
 800711e:	4603      	mov	r3, r0
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	9004      	str	r0, [sp, #16]
 8007124:	4641      	mov	r1, r8
 8007126:	4658      	mov	r0, fp
 8007128:	9308      	str	r3, [sp, #32]
 800712a:	f000 fb71 	bl	8007810 <__mcmp>
 800712e:	463a      	mov	r2, r7
 8007130:	4681      	mov	r9, r0
 8007132:	4631      	mov	r1, r6
 8007134:	4620      	mov	r0, r4
 8007136:	f000 fb87 	bl	8007848 <__mdiff>
 800713a:	68c2      	ldr	r2, [r0, #12]
 800713c:	9b08      	ldr	r3, [sp, #32]
 800713e:	4605      	mov	r5, r0
 8007140:	bb02      	cbnz	r2, 8007184 <_dtoa_r+0xa7c>
 8007142:	4601      	mov	r1, r0
 8007144:	4658      	mov	r0, fp
 8007146:	f000 fb63 	bl	8007810 <__mcmp>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	4602      	mov	r2, r0
 800714e:	4629      	mov	r1, r5
 8007150:	4620      	mov	r0, r4
 8007152:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007156:	f000 f91d 	bl	8007394 <_Bfree>
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800715e:	9d01      	ldr	r5, [sp, #4]
 8007160:	ea43 0102 	orr.w	r1, r3, r2
 8007164:	9b06      	ldr	r3, [sp, #24]
 8007166:	430b      	orrs	r3, r1
 8007168:	9b08      	ldr	r3, [sp, #32]
 800716a:	d10d      	bne.n	8007188 <_dtoa_r+0xa80>
 800716c:	2b39      	cmp	r3, #57	; 0x39
 800716e:	d029      	beq.n	80071c4 <_dtoa_r+0xabc>
 8007170:	f1b9 0f00 	cmp.w	r9, #0
 8007174:	dd01      	ble.n	800717a <_dtoa_r+0xa72>
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	3331      	adds	r3, #49	; 0x31
 800717a:	9a02      	ldr	r2, [sp, #8]
 800717c:	7013      	strb	r3, [r2, #0]
 800717e:	e774      	b.n	800706a <_dtoa_r+0x962>
 8007180:	4638      	mov	r0, r7
 8007182:	e7b9      	b.n	80070f8 <_dtoa_r+0x9f0>
 8007184:	2201      	movs	r2, #1
 8007186:	e7e2      	b.n	800714e <_dtoa_r+0xa46>
 8007188:	f1b9 0f00 	cmp.w	r9, #0
 800718c:	db06      	blt.n	800719c <_dtoa_r+0xa94>
 800718e:	9905      	ldr	r1, [sp, #20]
 8007190:	ea41 0909 	orr.w	r9, r1, r9
 8007194:	9906      	ldr	r1, [sp, #24]
 8007196:	ea59 0101 	orrs.w	r1, r9, r1
 800719a:	d120      	bne.n	80071de <_dtoa_r+0xad6>
 800719c:	2a00      	cmp	r2, #0
 800719e:	ddec      	ble.n	800717a <_dtoa_r+0xa72>
 80071a0:	4659      	mov	r1, fp
 80071a2:	2201      	movs	r2, #1
 80071a4:	4620      	mov	r0, r4
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	f000 fac6 	bl	8007738 <__lshift>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4683      	mov	fp, r0
 80071b0:	f000 fb2e 	bl	8007810 <__mcmp>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	dc02      	bgt.n	80071c0 <_dtoa_r+0xab8>
 80071ba:	d1de      	bne.n	800717a <_dtoa_r+0xa72>
 80071bc:	07da      	lsls	r2, r3, #31
 80071be:	d5dc      	bpl.n	800717a <_dtoa_r+0xa72>
 80071c0:	2b39      	cmp	r3, #57	; 0x39
 80071c2:	d1d8      	bne.n	8007176 <_dtoa_r+0xa6e>
 80071c4:	9a02      	ldr	r2, [sp, #8]
 80071c6:	2339      	movs	r3, #57	; 0x39
 80071c8:	7013      	strb	r3, [r2, #0]
 80071ca:	462b      	mov	r3, r5
 80071cc:	461d      	mov	r5, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071d4:	2a39      	cmp	r2, #57	; 0x39
 80071d6:	d050      	beq.n	800727a <_dtoa_r+0xb72>
 80071d8:	3201      	adds	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	e745      	b.n	800706a <_dtoa_r+0x962>
 80071de:	2a00      	cmp	r2, #0
 80071e0:	dd03      	ble.n	80071ea <_dtoa_r+0xae2>
 80071e2:	2b39      	cmp	r3, #57	; 0x39
 80071e4:	d0ee      	beq.n	80071c4 <_dtoa_r+0xabc>
 80071e6:	3301      	adds	r3, #1
 80071e8:	e7c7      	b.n	800717a <_dtoa_r+0xa72>
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	9907      	ldr	r1, [sp, #28]
 80071ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071f2:	428a      	cmp	r2, r1
 80071f4:	d02a      	beq.n	800724c <_dtoa_r+0xb44>
 80071f6:	4659      	mov	r1, fp
 80071f8:	2300      	movs	r3, #0
 80071fa:	220a      	movs	r2, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 f8eb 	bl	80073d8 <__multadd>
 8007202:	45b8      	cmp	r8, r7
 8007204:	4683      	mov	fp, r0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	f04f 020a 	mov.w	r2, #10
 800720e:	4641      	mov	r1, r8
 8007210:	4620      	mov	r0, r4
 8007212:	d107      	bne.n	8007224 <_dtoa_r+0xb1c>
 8007214:	f000 f8e0 	bl	80073d8 <__multadd>
 8007218:	4680      	mov	r8, r0
 800721a:	4607      	mov	r7, r0
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	3301      	adds	r3, #1
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	e775      	b.n	8007110 <_dtoa_r+0xa08>
 8007224:	f000 f8d8 	bl	80073d8 <__multadd>
 8007228:	4639      	mov	r1, r7
 800722a:	4680      	mov	r8, r0
 800722c:	2300      	movs	r3, #0
 800722e:	220a      	movs	r2, #10
 8007230:	4620      	mov	r0, r4
 8007232:	f000 f8d1 	bl	80073d8 <__multadd>
 8007236:	4607      	mov	r7, r0
 8007238:	e7f0      	b.n	800721c <_dtoa_r+0xb14>
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	9a00      	ldr	r2, [sp, #0]
 8007240:	bfcc      	ite	gt
 8007242:	464d      	movgt	r5, r9
 8007244:	2501      	movle	r5, #1
 8007246:	4415      	add	r5, r2
 8007248:	f04f 0800 	mov.w	r8, #0
 800724c:	4659      	mov	r1, fp
 800724e:	2201      	movs	r2, #1
 8007250:	4620      	mov	r0, r4
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	f000 fa70 	bl	8007738 <__lshift>
 8007258:	4631      	mov	r1, r6
 800725a:	4683      	mov	fp, r0
 800725c:	f000 fad8 	bl	8007810 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	dcb2      	bgt.n	80071ca <_dtoa_r+0xac2>
 8007264:	d102      	bne.n	800726c <_dtoa_r+0xb64>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	07db      	lsls	r3, r3, #31
 800726a:	d4ae      	bmi.n	80071ca <_dtoa_r+0xac2>
 800726c:	462b      	mov	r3, r5
 800726e:	461d      	mov	r5, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a30      	cmp	r2, #48	; 0x30
 8007276:	d0fa      	beq.n	800726e <_dtoa_r+0xb66>
 8007278:	e6f7      	b.n	800706a <_dtoa_r+0x962>
 800727a:	9a00      	ldr	r2, [sp, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d1a5      	bne.n	80071cc <_dtoa_r+0xac4>
 8007280:	f10a 0a01 	add.w	sl, sl, #1
 8007284:	2331      	movs	r3, #49	; 0x31
 8007286:	e779      	b.n	800717c <_dtoa_r+0xa74>
 8007288:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <_dtoa_r+0xbd0>)
 800728a:	f7ff baaf 	b.w	80067ec <_dtoa_r+0xe4>
 800728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f aa86 	bne.w	80067a2 <_dtoa_r+0x9a>
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <_dtoa_r+0xbd4>)
 8007298:	f7ff baa8 	b.w	80067ec <_dtoa_r+0xe4>
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	dc03      	bgt.n	80072aa <_dtoa_r+0xba2>
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	f73f aec9 	bgt.w	800703c <_dtoa_r+0x934>
 80072aa:	9d00      	ldr	r5, [sp, #0]
 80072ac:	4631      	mov	r1, r6
 80072ae:	4658      	mov	r0, fp
 80072b0:	f7ff f99c 	bl	80065ec <quorem>
 80072b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072b8:	f805 3b01 	strb.w	r3, [r5], #1
 80072bc:	9a00      	ldr	r2, [sp, #0]
 80072be:	1aaa      	subs	r2, r5, r2
 80072c0:	4591      	cmp	r9, r2
 80072c2:	ddba      	ble.n	800723a <_dtoa_r+0xb32>
 80072c4:	4659      	mov	r1, fp
 80072c6:	2300      	movs	r3, #0
 80072c8:	220a      	movs	r2, #10
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f884 	bl	80073d8 <__multadd>
 80072d0:	4683      	mov	fp, r0
 80072d2:	e7eb      	b.n	80072ac <_dtoa_r+0xba4>
 80072d4:	08008b07 	.word	0x08008b07
 80072d8:	08008a60 	.word	0x08008a60
 80072dc:	08008a84 	.word	0x08008a84

080072e0 <_localeconv_r>:
 80072e0:	4800      	ldr	r0, [pc, #0]	; (80072e4 <_localeconv_r+0x4>)
 80072e2:	4770      	bx	lr
 80072e4:	20000160 	.word	0x20000160

080072e8 <malloc>:
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <malloc+0xc>)
 80072ea:	4601      	mov	r1, r0
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f000 bbef 	b.w	8007ad0 <_malloc_r>
 80072f2:	bf00      	nop
 80072f4:	2000000c 	.word	0x2000000c

080072f8 <memcpy>:
 80072f8:	440a      	add	r2, r1
 80072fa:	4291      	cmp	r1, r2
 80072fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007300:	d100      	bne.n	8007304 <memcpy+0xc>
 8007302:	4770      	bx	lr
 8007304:	b510      	push	{r4, lr}
 8007306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800730a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730e:	4291      	cmp	r1, r2
 8007310:	d1f9      	bne.n	8007306 <memcpy+0xe>
 8007312:	bd10      	pop	{r4, pc}

08007314 <_Balloc>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	b976      	cbnz	r6, 800733c <_Balloc+0x28>
 800731e:	2010      	movs	r0, #16
 8007320:	f7ff ffe2 	bl	80072e8 <malloc>
 8007324:	4602      	mov	r2, r0
 8007326:	6260      	str	r0, [r4, #36]	; 0x24
 8007328:	b920      	cbnz	r0, 8007334 <_Balloc+0x20>
 800732a:	4b18      	ldr	r3, [pc, #96]	; (800738c <_Balloc+0x78>)
 800732c:	4818      	ldr	r0, [pc, #96]	; (8007390 <_Balloc+0x7c>)
 800732e:	2166      	movs	r1, #102	; 0x66
 8007330:	f000 fd94 	bl	8007e5c <__assert_func>
 8007334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007338:	6006      	str	r6, [r0, #0]
 800733a:	60c6      	str	r6, [r0, #12]
 800733c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800733e:	68f3      	ldr	r3, [r6, #12]
 8007340:	b183      	cbz	r3, 8007364 <_Balloc+0x50>
 8007342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800734a:	b9b8      	cbnz	r0, 800737c <_Balloc+0x68>
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f605 	lsl.w	r6, r1, r5
 8007352:	1d72      	adds	r2, r6, #5
 8007354:	0092      	lsls	r2, r2, #2
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fb5a 	bl	8007a10 <_calloc_r>
 800735c:	b160      	cbz	r0, 8007378 <_Balloc+0x64>
 800735e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007362:	e00e      	b.n	8007382 <_Balloc+0x6e>
 8007364:	2221      	movs	r2, #33	; 0x21
 8007366:	2104      	movs	r1, #4
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fb51 	bl	8007a10 <_calloc_r>
 800736e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007370:	60f0      	str	r0, [r6, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e4      	bne.n	8007342 <_Balloc+0x2e>
 8007378:	2000      	movs	r0, #0
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	6802      	ldr	r2, [r0, #0]
 800737e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007382:	2300      	movs	r3, #0
 8007384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007388:	e7f7      	b.n	800737a <_Balloc+0x66>
 800738a:	bf00      	nop
 800738c:	08008a91 	.word	0x08008a91
 8007390:	08008b18 	.word	0x08008b18

08007394 <_Bfree>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007398:	4605      	mov	r5, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b976      	cbnz	r6, 80073bc <_Bfree+0x28>
 800739e:	2010      	movs	r0, #16
 80073a0:	f7ff ffa2 	bl	80072e8 <malloc>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6268      	str	r0, [r5, #36]	; 0x24
 80073a8:	b920      	cbnz	r0, 80073b4 <_Bfree+0x20>
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <_Bfree+0x3c>)
 80073ac:	4809      	ldr	r0, [pc, #36]	; (80073d4 <_Bfree+0x40>)
 80073ae:	218a      	movs	r1, #138	; 0x8a
 80073b0:	f000 fd54 	bl	8007e5c <__assert_func>
 80073b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073b8:	6006      	str	r6, [r0, #0]
 80073ba:	60c6      	str	r6, [r0, #12]
 80073bc:	b13c      	cbz	r4, 80073ce <_Bfree+0x3a>
 80073be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073c0:	6862      	ldr	r2, [r4, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c8:	6021      	str	r1, [r4, #0]
 80073ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	08008a91 	.word	0x08008a91
 80073d4:	08008b18 	.word	0x08008b18

080073d8 <__multadd>:
 80073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	690e      	ldr	r6, [r1, #16]
 80073de:	4607      	mov	r7, r0
 80073e0:	4698      	mov	r8, r3
 80073e2:	460c      	mov	r4, r1
 80073e4:	f101 0014 	add.w	r0, r1, #20
 80073e8:	2300      	movs	r3, #0
 80073ea:	6805      	ldr	r5, [r0, #0]
 80073ec:	b2a9      	uxth	r1, r5
 80073ee:	fb02 8101 	mla	r1, r2, r1, r8
 80073f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80073f6:	0c2d      	lsrs	r5, r5, #16
 80073f8:	fb02 c505 	mla	r5, r2, r5, ip
 80073fc:	b289      	uxth	r1, r1
 80073fe:	3301      	adds	r3, #1
 8007400:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007404:	429e      	cmp	r6, r3
 8007406:	f840 1b04 	str.w	r1, [r0], #4
 800740a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800740e:	dcec      	bgt.n	80073ea <__multadd+0x12>
 8007410:	f1b8 0f00 	cmp.w	r8, #0
 8007414:	d022      	beq.n	800745c <__multadd+0x84>
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	42b3      	cmp	r3, r6
 800741a:	dc19      	bgt.n	8007450 <__multadd+0x78>
 800741c:	6861      	ldr	r1, [r4, #4]
 800741e:	4638      	mov	r0, r7
 8007420:	3101      	adds	r1, #1
 8007422:	f7ff ff77 	bl	8007314 <_Balloc>
 8007426:	4605      	mov	r5, r0
 8007428:	b928      	cbnz	r0, 8007436 <__multadd+0x5e>
 800742a:	4602      	mov	r2, r0
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <__multadd+0x8c>)
 800742e:	480e      	ldr	r0, [pc, #56]	; (8007468 <__multadd+0x90>)
 8007430:	21b5      	movs	r1, #181	; 0xb5
 8007432:	f000 fd13 	bl	8007e5c <__assert_func>
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	3202      	adds	r2, #2
 800743a:	f104 010c 	add.w	r1, r4, #12
 800743e:	0092      	lsls	r2, r2, #2
 8007440:	300c      	adds	r0, #12
 8007442:	f7ff ff59 	bl	80072f8 <memcpy>
 8007446:	4621      	mov	r1, r4
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff ffa3 	bl	8007394 <_Bfree>
 800744e:	462c      	mov	r4, r5
 8007450:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007454:	3601      	adds	r6, #1
 8007456:	f8c3 8014 	str.w	r8, [r3, #20]
 800745a:	6126      	str	r6, [r4, #16]
 800745c:	4620      	mov	r0, r4
 800745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007462:	bf00      	nop
 8007464:	08008b07 	.word	0x08008b07
 8007468:	08008b18 	.word	0x08008b18

0800746c <__hi0bits>:
 800746c:	0c03      	lsrs	r3, r0, #16
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	b9d3      	cbnz	r3, 80074a8 <__hi0bits+0x3c>
 8007472:	0400      	lsls	r0, r0, #16
 8007474:	2310      	movs	r3, #16
 8007476:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800747a:	bf04      	itt	eq
 800747c:	0200      	lsleq	r0, r0, #8
 800747e:	3308      	addeq	r3, #8
 8007480:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007484:	bf04      	itt	eq
 8007486:	0100      	lsleq	r0, r0, #4
 8007488:	3304      	addeq	r3, #4
 800748a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800748e:	bf04      	itt	eq
 8007490:	0080      	lsleq	r0, r0, #2
 8007492:	3302      	addeq	r3, #2
 8007494:	2800      	cmp	r0, #0
 8007496:	db05      	blt.n	80074a4 <__hi0bits+0x38>
 8007498:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800749c:	f103 0301 	add.w	r3, r3, #1
 80074a0:	bf08      	it	eq
 80074a2:	2320      	moveq	r3, #32
 80074a4:	4618      	mov	r0, r3
 80074a6:	4770      	bx	lr
 80074a8:	2300      	movs	r3, #0
 80074aa:	e7e4      	b.n	8007476 <__hi0bits+0xa>

080074ac <__lo0bits>:
 80074ac:	6803      	ldr	r3, [r0, #0]
 80074ae:	f013 0207 	ands.w	r2, r3, #7
 80074b2:	4601      	mov	r1, r0
 80074b4:	d00b      	beq.n	80074ce <__lo0bits+0x22>
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d424      	bmi.n	8007504 <__lo0bits+0x58>
 80074ba:	0798      	lsls	r0, r3, #30
 80074bc:	bf49      	itett	mi
 80074be:	085b      	lsrmi	r3, r3, #1
 80074c0:	089b      	lsrpl	r3, r3, #2
 80074c2:	2001      	movmi	r0, #1
 80074c4:	600b      	strmi	r3, [r1, #0]
 80074c6:	bf5c      	itt	pl
 80074c8:	600b      	strpl	r3, [r1, #0]
 80074ca:	2002      	movpl	r0, #2
 80074cc:	4770      	bx	lr
 80074ce:	b298      	uxth	r0, r3
 80074d0:	b9b0      	cbnz	r0, 8007500 <__lo0bits+0x54>
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	2010      	movs	r0, #16
 80074d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074da:	bf04      	itt	eq
 80074dc:	0a1b      	lsreq	r3, r3, #8
 80074de:	3008      	addeq	r0, #8
 80074e0:	071a      	lsls	r2, r3, #28
 80074e2:	bf04      	itt	eq
 80074e4:	091b      	lsreq	r3, r3, #4
 80074e6:	3004      	addeq	r0, #4
 80074e8:	079a      	lsls	r2, r3, #30
 80074ea:	bf04      	itt	eq
 80074ec:	089b      	lsreq	r3, r3, #2
 80074ee:	3002      	addeq	r0, #2
 80074f0:	07da      	lsls	r2, r3, #31
 80074f2:	d403      	bmi.n	80074fc <__lo0bits+0x50>
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	f100 0001 	add.w	r0, r0, #1
 80074fa:	d005      	beq.n	8007508 <__lo0bits+0x5c>
 80074fc:	600b      	str	r3, [r1, #0]
 80074fe:	4770      	bx	lr
 8007500:	4610      	mov	r0, r2
 8007502:	e7e8      	b.n	80074d6 <__lo0bits+0x2a>
 8007504:	2000      	movs	r0, #0
 8007506:	4770      	bx	lr
 8007508:	2020      	movs	r0, #32
 800750a:	4770      	bx	lr

0800750c <__i2b>:
 800750c:	b510      	push	{r4, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	2101      	movs	r1, #1
 8007512:	f7ff feff 	bl	8007314 <_Balloc>
 8007516:	4602      	mov	r2, r0
 8007518:	b928      	cbnz	r0, 8007526 <__i2b+0x1a>
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <__i2b+0x24>)
 800751c:	4805      	ldr	r0, [pc, #20]	; (8007534 <__i2b+0x28>)
 800751e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007522:	f000 fc9b 	bl	8007e5c <__assert_func>
 8007526:	2301      	movs	r3, #1
 8007528:	6144      	str	r4, [r0, #20]
 800752a:	6103      	str	r3, [r0, #16]
 800752c:	bd10      	pop	{r4, pc}
 800752e:	bf00      	nop
 8007530:	08008b07 	.word	0x08008b07
 8007534:	08008b18 	.word	0x08008b18

08007538 <__multiply>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	4614      	mov	r4, r2
 800753e:	690a      	ldr	r2, [r1, #16]
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	429a      	cmp	r2, r3
 8007544:	bfb8      	it	lt
 8007546:	460b      	movlt	r3, r1
 8007548:	460d      	mov	r5, r1
 800754a:	bfbc      	itt	lt
 800754c:	4625      	movlt	r5, r4
 800754e:	461c      	movlt	r4, r3
 8007550:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007554:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007558:	68ab      	ldr	r3, [r5, #8]
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	eb0a 0709 	add.w	r7, sl, r9
 8007560:	42bb      	cmp	r3, r7
 8007562:	b085      	sub	sp, #20
 8007564:	bfb8      	it	lt
 8007566:	3101      	addlt	r1, #1
 8007568:	f7ff fed4 	bl	8007314 <_Balloc>
 800756c:	b930      	cbnz	r0, 800757c <__multiply+0x44>
 800756e:	4602      	mov	r2, r0
 8007570:	4b42      	ldr	r3, [pc, #264]	; (800767c <__multiply+0x144>)
 8007572:	4843      	ldr	r0, [pc, #268]	; (8007680 <__multiply+0x148>)
 8007574:	f240 115d 	movw	r1, #349	; 0x15d
 8007578:	f000 fc70 	bl	8007e5c <__assert_func>
 800757c:	f100 0614 	add.w	r6, r0, #20
 8007580:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007584:	4633      	mov	r3, r6
 8007586:	2200      	movs	r2, #0
 8007588:	4543      	cmp	r3, r8
 800758a:	d31e      	bcc.n	80075ca <__multiply+0x92>
 800758c:	f105 0c14 	add.w	ip, r5, #20
 8007590:	f104 0314 	add.w	r3, r4, #20
 8007594:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007598:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800759c:	9202      	str	r2, [sp, #8]
 800759e:	ebac 0205 	sub.w	r2, ip, r5
 80075a2:	3a15      	subs	r2, #21
 80075a4:	f022 0203 	bic.w	r2, r2, #3
 80075a8:	3204      	adds	r2, #4
 80075aa:	f105 0115 	add.w	r1, r5, #21
 80075ae:	458c      	cmp	ip, r1
 80075b0:	bf38      	it	cc
 80075b2:	2204      	movcc	r2, #4
 80075b4:	9201      	str	r2, [sp, #4]
 80075b6:	9a02      	ldr	r2, [sp, #8]
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d808      	bhi.n	80075d0 <__multiply+0x98>
 80075be:	2f00      	cmp	r7, #0
 80075c0:	dc55      	bgt.n	800766e <__multiply+0x136>
 80075c2:	6107      	str	r7, [r0, #16]
 80075c4:	b005      	add	sp, #20
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	f843 2b04 	str.w	r2, [r3], #4
 80075ce:	e7db      	b.n	8007588 <__multiply+0x50>
 80075d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80075d4:	f1ba 0f00 	cmp.w	sl, #0
 80075d8:	d020      	beq.n	800761c <__multiply+0xe4>
 80075da:	f105 0e14 	add.w	lr, r5, #20
 80075de:	46b1      	mov	r9, r6
 80075e0:	2200      	movs	r2, #0
 80075e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80075e6:	f8d9 b000 	ldr.w	fp, [r9]
 80075ea:	b2a1      	uxth	r1, r4
 80075ec:	fa1f fb8b 	uxth.w	fp, fp
 80075f0:	fb0a b101 	mla	r1, sl, r1, fp
 80075f4:	4411      	add	r1, r2
 80075f6:	f8d9 2000 	ldr.w	r2, [r9]
 80075fa:	0c24      	lsrs	r4, r4, #16
 80075fc:	0c12      	lsrs	r2, r2, #16
 80075fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8007602:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007606:	b289      	uxth	r1, r1
 8007608:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800760c:	45f4      	cmp	ip, lr
 800760e:	f849 1b04 	str.w	r1, [r9], #4
 8007612:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007616:	d8e4      	bhi.n	80075e2 <__multiply+0xaa>
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	5072      	str	r2, [r6, r1]
 800761c:	9a03      	ldr	r2, [sp, #12]
 800761e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007622:	3304      	adds	r3, #4
 8007624:	f1b9 0f00 	cmp.w	r9, #0
 8007628:	d01f      	beq.n	800766a <__multiply+0x132>
 800762a:	6834      	ldr	r4, [r6, #0]
 800762c:	f105 0114 	add.w	r1, r5, #20
 8007630:	46b6      	mov	lr, r6
 8007632:	f04f 0a00 	mov.w	sl, #0
 8007636:	880a      	ldrh	r2, [r1, #0]
 8007638:	f8be b002 	ldrh.w	fp, [lr, #2]
 800763c:	fb09 b202 	mla	r2, r9, r2, fp
 8007640:	4492      	add	sl, r2
 8007642:	b2a4      	uxth	r4, r4
 8007644:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007648:	f84e 4b04 	str.w	r4, [lr], #4
 800764c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007650:	f8be 2000 	ldrh.w	r2, [lr]
 8007654:	0c24      	lsrs	r4, r4, #16
 8007656:	fb09 2404 	mla	r4, r9, r4, r2
 800765a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800765e:	458c      	cmp	ip, r1
 8007660:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007664:	d8e7      	bhi.n	8007636 <__multiply+0xfe>
 8007666:	9a01      	ldr	r2, [sp, #4]
 8007668:	50b4      	str	r4, [r6, r2]
 800766a:	3604      	adds	r6, #4
 800766c:	e7a3      	b.n	80075b6 <__multiply+0x7e>
 800766e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1a5      	bne.n	80075c2 <__multiply+0x8a>
 8007676:	3f01      	subs	r7, #1
 8007678:	e7a1      	b.n	80075be <__multiply+0x86>
 800767a:	bf00      	nop
 800767c:	08008b07 	.word	0x08008b07
 8007680:	08008b18 	.word	0x08008b18

08007684 <__pow5mult>:
 8007684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007688:	4615      	mov	r5, r2
 800768a:	f012 0203 	ands.w	r2, r2, #3
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	d007      	beq.n	80076a4 <__pow5mult+0x20>
 8007694:	4c25      	ldr	r4, [pc, #148]	; (800772c <__pow5mult+0xa8>)
 8007696:	3a01      	subs	r2, #1
 8007698:	2300      	movs	r3, #0
 800769a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800769e:	f7ff fe9b 	bl	80073d8 <__multadd>
 80076a2:	4607      	mov	r7, r0
 80076a4:	10ad      	asrs	r5, r5, #2
 80076a6:	d03d      	beq.n	8007724 <__pow5mult+0xa0>
 80076a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076aa:	b97c      	cbnz	r4, 80076cc <__pow5mult+0x48>
 80076ac:	2010      	movs	r0, #16
 80076ae:	f7ff fe1b 	bl	80072e8 <malloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6270      	str	r0, [r6, #36]	; 0x24
 80076b6:	b928      	cbnz	r0, 80076c4 <__pow5mult+0x40>
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <__pow5mult+0xac>)
 80076ba:	481e      	ldr	r0, [pc, #120]	; (8007734 <__pow5mult+0xb0>)
 80076bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076c0:	f000 fbcc 	bl	8007e5c <__assert_func>
 80076c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c8:	6004      	str	r4, [r0, #0]
 80076ca:	60c4      	str	r4, [r0, #12]
 80076cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076d4:	b94c      	cbnz	r4, 80076ea <__pow5mult+0x66>
 80076d6:	f240 2171 	movw	r1, #625	; 0x271
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ff16 	bl	800750c <__i2b>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076e6:	4604      	mov	r4, r0
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	f04f 0900 	mov.w	r9, #0
 80076ee:	07eb      	lsls	r3, r5, #31
 80076f0:	d50a      	bpl.n	8007708 <__pow5mult+0x84>
 80076f2:	4639      	mov	r1, r7
 80076f4:	4622      	mov	r2, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ff1e 	bl	8007538 <__multiply>
 80076fc:	4639      	mov	r1, r7
 80076fe:	4680      	mov	r8, r0
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff fe47 	bl	8007394 <_Bfree>
 8007706:	4647      	mov	r7, r8
 8007708:	106d      	asrs	r5, r5, #1
 800770a:	d00b      	beq.n	8007724 <__pow5mult+0xa0>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	b938      	cbnz	r0, 8007720 <__pow5mult+0x9c>
 8007710:	4622      	mov	r2, r4
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	f7ff ff0f 	bl	8007538 <__multiply>
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f8c0 9000 	str.w	r9, [r0]
 8007720:	4604      	mov	r4, r0
 8007722:	e7e4      	b.n	80076ee <__pow5mult+0x6a>
 8007724:	4638      	mov	r0, r7
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	bf00      	nop
 800772c:	08008c68 	.word	0x08008c68
 8007730:	08008a91 	.word	0x08008a91
 8007734:	08008b18 	.word	0x08008b18

08007738 <__lshift>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	6849      	ldr	r1, [r1, #4]
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	4607      	mov	r7, r0
 800774a:	4691      	mov	r9, r2
 800774c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007750:	f108 0601 	add.w	r6, r8, #1
 8007754:	42b3      	cmp	r3, r6
 8007756:	db0b      	blt.n	8007770 <__lshift+0x38>
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff fddb 	bl	8007314 <_Balloc>
 800775e:	4605      	mov	r5, r0
 8007760:	b948      	cbnz	r0, 8007776 <__lshift+0x3e>
 8007762:	4602      	mov	r2, r0
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <__lshift+0xd0>)
 8007766:	4829      	ldr	r0, [pc, #164]	; (800780c <__lshift+0xd4>)
 8007768:	f240 11d9 	movw	r1, #473	; 0x1d9
 800776c:	f000 fb76 	bl	8007e5c <__assert_func>
 8007770:	3101      	adds	r1, #1
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	e7ee      	b.n	8007754 <__lshift+0x1c>
 8007776:	2300      	movs	r3, #0
 8007778:	f100 0114 	add.w	r1, r0, #20
 800777c:	f100 0210 	add.w	r2, r0, #16
 8007780:	4618      	mov	r0, r3
 8007782:	4553      	cmp	r3, sl
 8007784:	db33      	blt.n	80077ee <__lshift+0xb6>
 8007786:	6920      	ldr	r0, [r4, #16]
 8007788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800778c:	f104 0314 	add.w	r3, r4, #20
 8007790:	f019 091f 	ands.w	r9, r9, #31
 8007794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800779c:	d02b      	beq.n	80077f6 <__lshift+0xbe>
 800779e:	f1c9 0e20 	rsb	lr, r9, #32
 80077a2:	468a      	mov	sl, r1
 80077a4:	2200      	movs	r2, #0
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	fa00 f009 	lsl.w	r0, r0, r9
 80077ac:	4302      	orrs	r2, r0
 80077ae:	f84a 2b04 	str.w	r2, [sl], #4
 80077b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b6:	459c      	cmp	ip, r3
 80077b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80077bc:	d8f3      	bhi.n	80077a6 <__lshift+0x6e>
 80077be:	ebac 0304 	sub.w	r3, ip, r4
 80077c2:	3b15      	subs	r3, #21
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	3304      	adds	r3, #4
 80077ca:	f104 0015 	add.w	r0, r4, #21
 80077ce:	4584      	cmp	ip, r0
 80077d0:	bf38      	it	cc
 80077d2:	2304      	movcc	r3, #4
 80077d4:	50ca      	str	r2, [r1, r3]
 80077d6:	b10a      	cbz	r2, 80077dc <__lshift+0xa4>
 80077d8:	f108 0602 	add.w	r6, r8, #2
 80077dc:	3e01      	subs	r6, #1
 80077de:	4638      	mov	r0, r7
 80077e0:	612e      	str	r6, [r5, #16]
 80077e2:	4621      	mov	r1, r4
 80077e4:	f7ff fdd6 	bl	8007394 <_Bfree>
 80077e8:	4628      	mov	r0, r5
 80077ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80077f2:	3301      	adds	r3, #1
 80077f4:	e7c5      	b.n	8007782 <__lshift+0x4a>
 80077f6:	3904      	subs	r1, #4
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007800:	459c      	cmp	ip, r3
 8007802:	d8f9      	bhi.n	80077f8 <__lshift+0xc0>
 8007804:	e7ea      	b.n	80077dc <__lshift+0xa4>
 8007806:	bf00      	nop
 8007808:	08008b07 	.word	0x08008b07
 800780c:	08008b18 	.word	0x08008b18

08007810 <__mcmp>:
 8007810:	b530      	push	{r4, r5, lr}
 8007812:	6902      	ldr	r2, [r0, #16]
 8007814:	690c      	ldr	r4, [r1, #16]
 8007816:	1b12      	subs	r2, r2, r4
 8007818:	d10e      	bne.n	8007838 <__mcmp+0x28>
 800781a:	f100 0314 	add.w	r3, r0, #20
 800781e:	3114      	adds	r1, #20
 8007820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800782c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007830:	42a5      	cmp	r5, r4
 8007832:	d003      	beq.n	800783c <__mcmp+0x2c>
 8007834:	d305      	bcc.n	8007842 <__mcmp+0x32>
 8007836:	2201      	movs	r2, #1
 8007838:	4610      	mov	r0, r2
 800783a:	bd30      	pop	{r4, r5, pc}
 800783c:	4283      	cmp	r3, r0
 800783e:	d3f3      	bcc.n	8007828 <__mcmp+0x18>
 8007840:	e7fa      	b.n	8007838 <__mcmp+0x28>
 8007842:	f04f 32ff 	mov.w	r2, #4294967295
 8007846:	e7f7      	b.n	8007838 <__mcmp+0x28>

08007848 <__mdiff>:
 8007848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	4606      	mov	r6, r0
 8007850:	4611      	mov	r1, r2
 8007852:	4620      	mov	r0, r4
 8007854:	4617      	mov	r7, r2
 8007856:	f7ff ffdb 	bl	8007810 <__mcmp>
 800785a:	1e05      	subs	r5, r0, #0
 800785c:	d110      	bne.n	8007880 <__mdiff+0x38>
 800785e:	4629      	mov	r1, r5
 8007860:	4630      	mov	r0, r6
 8007862:	f7ff fd57 	bl	8007314 <_Balloc>
 8007866:	b930      	cbnz	r0, 8007876 <__mdiff+0x2e>
 8007868:	4b39      	ldr	r3, [pc, #228]	; (8007950 <__mdiff+0x108>)
 800786a:	4602      	mov	r2, r0
 800786c:	f240 2132 	movw	r1, #562	; 0x232
 8007870:	4838      	ldr	r0, [pc, #224]	; (8007954 <__mdiff+0x10c>)
 8007872:	f000 faf3 	bl	8007e5c <__assert_func>
 8007876:	2301      	movs	r3, #1
 8007878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800787c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	bfa4      	itt	ge
 8007882:	463b      	movge	r3, r7
 8007884:	4627      	movge	r7, r4
 8007886:	4630      	mov	r0, r6
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	bfa6      	itte	ge
 800788c:	461c      	movge	r4, r3
 800788e:	2500      	movge	r5, #0
 8007890:	2501      	movlt	r5, #1
 8007892:	f7ff fd3f 	bl	8007314 <_Balloc>
 8007896:	b920      	cbnz	r0, 80078a2 <__mdiff+0x5a>
 8007898:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <__mdiff+0x108>)
 800789a:	4602      	mov	r2, r0
 800789c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078a0:	e7e6      	b.n	8007870 <__mdiff+0x28>
 80078a2:	693e      	ldr	r6, [r7, #16]
 80078a4:	60c5      	str	r5, [r0, #12]
 80078a6:	6925      	ldr	r5, [r4, #16]
 80078a8:	f107 0114 	add.w	r1, r7, #20
 80078ac:	f104 0914 	add.w	r9, r4, #20
 80078b0:	f100 0e14 	add.w	lr, r0, #20
 80078b4:	f107 0210 	add.w	r2, r7, #16
 80078b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80078bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80078c0:	46f2      	mov	sl, lr
 80078c2:	2700      	movs	r7, #0
 80078c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80078c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078cc:	fa1f f883 	uxth.w	r8, r3
 80078d0:	fa17 f78b 	uxtah	r7, r7, fp
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	eba7 0808 	sub.w	r8, r7, r8
 80078da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078e2:	fa1f f888 	uxth.w	r8, r8
 80078e6:	141f      	asrs	r7, r3, #16
 80078e8:	454d      	cmp	r5, r9
 80078ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078ee:	f84a 3b04 	str.w	r3, [sl], #4
 80078f2:	d8e7      	bhi.n	80078c4 <__mdiff+0x7c>
 80078f4:	1b2b      	subs	r3, r5, r4
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3304      	adds	r3, #4
 80078fe:	3415      	adds	r4, #21
 8007900:	42a5      	cmp	r5, r4
 8007902:	bf38      	it	cc
 8007904:	2304      	movcc	r3, #4
 8007906:	4419      	add	r1, r3
 8007908:	4473      	add	r3, lr
 800790a:	469e      	mov	lr, r3
 800790c:	460d      	mov	r5, r1
 800790e:	4565      	cmp	r5, ip
 8007910:	d30e      	bcc.n	8007930 <__mdiff+0xe8>
 8007912:	f10c 0203 	add.w	r2, ip, #3
 8007916:	1a52      	subs	r2, r2, r1
 8007918:	f022 0203 	bic.w	r2, r2, #3
 800791c:	3903      	subs	r1, #3
 800791e:	458c      	cmp	ip, r1
 8007920:	bf38      	it	cc
 8007922:	2200      	movcc	r2, #0
 8007924:	441a      	add	r2, r3
 8007926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800792a:	b17b      	cbz	r3, 800794c <__mdiff+0x104>
 800792c:	6106      	str	r6, [r0, #16]
 800792e:	e7a5      	b.n	800787c <__mdiff+0x34>
 8007930:	f855 8b04 	ldr.w	r8, [r5], #4
 8007934:	fa17 f488 	uxtah	r4, r7, r8
 8007938:	1422      	asrs	r2, r4, #16
 800793a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800793e:	b2a4      	uxth	r4, r4
 8007940:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007944:	f84e 4b04 	str.w	r4, [lr], #4
 8007948:	1417      	asrs	r7, r2, #16
 800794a:	e7e0      	b.n	800790e <__mdiff+0xc6>
 800794c:	3e01      	subs	r6, #1
 800794e:	e7ea      	b.n	8007926 <__mdiff+0xde>
 8007950:	08008b07 	.word	0x08008b07
 8007954:	08008b18 	.word	0x08008b18

08007958 <__d2b>:
 8007958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800795c:	4689      	mov	r9, r1
 800795e:	2101      	movs	r1, #1
 8007960:	ec57 6b10 	vmov	r6, r7, d0
 8007964:	4690      	mov	r8, r2
 8007966:	f7ff fcd5 	bl	8007314 <_Balloc>
 800796a:	4604      	mov	r4, r0
 800796c:	b930      	cbnz	r0, 800797c <__d2b+0x24>
 800796e:	4602      	mov	r2, r0
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <__d2b+0xb0>)
 8007972:	4826      	ldr	r0, [pc, #152]	; (8007a0c <__d2b+0xb4>)
 8007974:	f240 310a 	movw	r1, #778	; 0x30a
 8007978:	f000 fa70 	bl	8007e5c <__assert_func>
 800797c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007984:	bb35      	cbnz	r5, 80079d4 <__d2b+0x7c>
 8007986:	2e00      	cmp	r6, #0
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	d028      	beq.n	80079de <__d2b+0x86>
 800798c:	4668      	mov	r0, sp
 800798e:	9600      	str	r6, [sp, #0]
 8007990:	f7ff fd8c 	bl	80074ac <__lo0bits>
 8007994:	9900      	ldr	r1, [sp, #0]
 8007996:	b300      	cbz	r0, 80079da <__d2b+0x82>
 8007998:	9a01      	ldr	r2, [sp, #4]
 800799a:	f1c0 0320 	rsb	r3, r0, #32
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	430b      	orrs	r3, r1
 80079a4:	40c2      	lsrs	r2, r0
 80079a6:	6163      	str	r3, [r4, #20]
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	61a3      	str	r3, [r4, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bf14      	ite	ne
 80079b2:	2202      	movne	r2, #2
 80079b4:	2201      	moveq	r2, #1
 80079b6:	6122      	str	r2, [r4, #16]
 80079b8:	b1d5      	cbz	r5, 80079f0 <__d2b+0x98>
 80079ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079be:	4405      	add	r5, r0
 80079c0:	f8c9 5000 	str.w	r5, [r9]
 80079c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079c8:	f8c8 0000 	str.w	r0, [r8]
 80079cc:	4620      	mov	r0, r4
 80079ce:	b003      	add	sp, #12
 80079d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d8:	e7d5      	b.n	8007986 <__d2b+0x2e>
 80079da:	6161      	str	r1, [r4, #20]
 80079dc:	e7e5      	b.n	80079aa <__d2b+0x52>
 80079de:	a801      	add	r0, sp, #4
 80079e0:	f7ff fd64 	bl	80074ac <__lo0bits>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	6163      	str	r3, [r4, #20]
 80079e8:	2201      	movs	r2, #1
 80079ea:	6122      	str	r2, [r4, #16]
 80079ec:	3020      	adds	r0, #32
 80079ee:	e7e3      	b.n	80079b8 <__d2b+0x60>
 80079f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079f8:	f8c9 0000 	str.w	r0, [r9]
 80079fc:	6918      	ldr	r0, [r3, #16]
 80079fe:	f7ff fd35 	bl	800746c <__hi0bits>
 8007a02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a06:	e7df      	b.n	80079c8 <__d2b+0x70>
 8007a08:	08008b07 	.word	0x08008b07
 8007a0c:	08008b18 	.word	0x08008b18

08007a10 <_calloc_r>:
 8007a10:	b513      	push	{r0, r1, r4, lr}
 8007a12:	434a      	muls	r2, r1
 8007a14:	4611      	mov	r1, r2
 8007a16:	9201      	str	r2, [sp, #4]
 8007a18:	f000 f85a 	bl	8007ad0 <_malloc_r>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	b118      	cbz	r0, 8007a28 <_calloc_r+0x18>
 8007a20:	9a01      	ldr	r2, [sp, #4]
 8007a22:	2100      	movs	r1, #0
 8007a24:	f7fe f950 	bl	8005cc8 <memset>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	b002      	add	sp, #8
 8007a2c:	bd10      	pop	{r4, pc}
	...

08007a30 <_free_r>:
 8007a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a32:	2900      	cmp	r1, #0
 8007a34:	d048      	beq.n	8007ac8 <_free_r+0x98>
 8007a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3a:	9001      	str	r0, [sp, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a42:	bfb8      	it	lt
 8007a44:	18e4      	addlt	r4, r4, r3
 8007a46:	f000 fa65 	bl	8007f14 <__malloc_lock>
 8007a4a:	4a20      	ldr	r2, [pc, #128]	; (8007acc <_free_r+0x9c>)
 8007a4c:	9801      	ldr	r0, [sp, #4]
 8007a4e:	6813      	ldr	r3, [r2, #0]
 8007a50:	4615      	mov	r5, r2
 8007a52:	b933      	cbnz	r3, 8007a62 <_free_r+0x32>
 8007a54:	6063      	str	r3, [r4, #4]
 8007a56:	6014      	str	r4, [r2, #0]
 8007a58:	b003      	add	sp, #12
 8007a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a5e:	f000 ba5f 	b.w	8007f20 <__malloc_unlock>
 8007a62:	42a3      	cmp	r3, r4
 8007a64:	d90b      	bls.n	8007a7e <_free_r+0x4e>
 8007a66:	6821      	ldr	r1, [r4, #0]
 8007a68:	1862      	adds	r2, r4, r1
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	bf04      	itt	eq
 8007a6e:	681a      	ldreq	r2, [r3, #0]
 8007a70:	685b      	ldreq	r3, [r3, #4]
 8007a72:	6063      	str	r3, [r4, #4]
 8007a74:	bf04      	itt	eq
 8007a76:	1852      	addeq	r2, r2, r1
 8007a78:	6022      	streq	r2, [r4, #0]
 8007a7a:	602c      	str	r4, [r5, #0]
 8007a7c:	e7ec      	b.n	8007a58 <_free_r+0x28>
 8007a7e:	461a      	mov	r2, r3
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	b10b      	cbz	r3, 8007a88 <_free_r+0x58>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d9fa      	bls.n	8007a7e <_free_r+0x4e>
 8007a88:	6811      	ldr	r1, [r2, #0]
 8007a8a:	1855      	adds	r5, r2, r1
 8007a8c:	42a5      	cmp	r5, r4
 8007a8e:	d10b      	bne.n	8007aa8 <_free_r+0x78>
 8007a90:	6824      	ldr	r4, [r4, #0]
 8007a92:	4421      	add	r1, r4
 8007a94:	1854      	adds	r4, r2, r1
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	6011      	str	r1, [r2, #0]
 8007a9a:	d1dd      	bne.n	8007a58 <_free_r+0x28>
 8007a9c:	681c      	ldr	r4, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	6053      	str	r3, [r2, #4]
 8007aa2:	4421      	add	r1, r4
 8007aa4:	6011      	str	r1, [r2, #0]
 8007aa6:	e7d7      	b.n	8007a58 <_free_r+0x28>
 8007aa8:	d902      	bls.n	8007ab0 <_free_r+0x80>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	6003      	str	r3, [r0, #0]
 8007aae:	e7d3      	b.n	8007a58 <_free_r+0x28>
 8007ab0:	6825      	ldr	r5, [r4, #0]
 8007ab2:	1961      	adds	r1, r4, r5
 8007ab4:	428b      	cmp	r3, r1
 8007ab6:	bf04      	itt	eq
 8007ab8:	6819      	ldreq	r1, [r3, #0]
 8007aba:	685b      	ldreq	r3, [r3, #4]
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	bf04      	itt	eq
 8007ac0:	1949      	addeq	r1, r1, r5
 8007ac2:	6021      	streq	r1, [r4, #0]
 8007ac4:	6054      	str	r4, [r2, #4]
 8007ac6:	e7c7      	b.n	8007a58 <_free_r+0x28>
 8007ac8:	b003      	add	sp, #12
 8007aca:	bd30      	pop	{r4, r5, pc}
 8007acc:	2000020c 	.word	0x2000020c

08007ad0 <_malloc_r>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	1ccd      	adds	r5, r1, #3
 8007ad4:	f025 0503 	bic.w	r5, r5, #3
 8007ad8:	3508      	adds	r5, #8
 8007ada:	2d0c      	cmp	r5, #12
 8007adc:	bf38      	it	cc
 8007ade:	250c      	movcc	r5, #12
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	db01      	blt.n	8007aea <_malloc_r+0x1a>
 8007ae6:	42a9      	cmp	r1, r5
 8007ae8:	d903      	bls.n	8007af2 <_malloc_r+0x22>
 8007aea:	230c      	movs	r3, #12
 8007aec:	6033      	str	r3, [r6, #0]
 8007aee:	2000      	movs	r0, #0
 8007af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af2:	f000 fa0f 	bl	8007f14 <__malloc_lock>
 8007af6:	4921      	ldr	r1, [pc, #132]	; (8007b7c <_malloc_r+0xac>)
 8007af8:	680a      	ldr	r2, [r1, #0]
 8007afa:	4614      	mov	r4, r2
 8007afc:	b99c      	cbnz	r4, 8007b26 <_malloc_r+0x56>
 8007afe:	4f20      	ldr	r7, [pc, #128]	; (8007b80 <_malloc_r+0xb0>)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	b923      	cbnz	r3, 8007b0e <_malloc_r+0x3e>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f998 	bl	8007e3c <_sbrk_r>
 8007b0c:	6038      	str	r0, [r7, #0]
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 f993 	bl	8007e3c <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d123      	bne.n	8007b62 <_malloc_r+0x92>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	6033      	str	r3, [r6, #0]
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f000 f9fe 	bl	8007f20 <__malloc_unlock>
 8007b24:	e7e3      	b.n	8007aee <_malloc_r+0x1e>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	1b5b      	subs	r3, r3, r5
 8007b2a:	d417      	bmi.n	8007b5c <_malloc_r+0x8c>
 8007b2c:	2b0b      	cmp	r3, #11
 8007b2e:	d903      	bls.n	8007b38 <_malloc_r+0x68>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	441c      	add	r4, r3
 8007b34:	6025      	str	r5, [r4, #0]
 8007b36:	e004      	b.n	8007b42 <_malloc_r+0x72>
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	42a2      	cmp	r2, r4
 8007b3c:	bf0c      	ite	eq
 8007b3e:	600b      	streq	r3, [r1, #0]
 8007b40:	6053      	strne	r3, [r2, #4]
 8007b42:	4630      	mov	r0, r6
 8007b44:	f000 f9ec 	bl	8007f20 <__malloc_unlock>
 8007b48:	f104 000b 	add.w	r0, r4, #11
 8007b4c:	1d23      	adds	r3, r4, #4
 8007b4e:	f020 0007 	bic.w	r0, r0, #7
 8007b52:	1ac2      	subs	r2, r0, r3
 8007b54:	d0cc      	beq.n	8007af0 <_malloc_r+0x20>
 8007b56:	1a1b      	subs	r3, r3, r0
 8007b58:	50a3      	str	r3, [r4, r2]
 8007b5a:	e7c9      	b.n	8007af0 <_malloc_r+0x20>
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	6864      	ldr	r4, [r4, #4]
 8007b60:	e7cc      	b.n	8007afc <_malloc_r+0x2c>
 8007b62:	1cc4      	adds	r4, r0, #3
 8007b64:	f024 0403 	bic.w	r4, r4, #3
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d0e3      	beq.n	8007b34 <_malloc_r+0x64>
 8007b6c:	1a21      	subs	r1, r4, r0
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f000 f964 	bl	8007e3c <_sbrk_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d1dd      	bne.n	8007b34 <_malloc_r+0x64>
 8007b78:	e7cf      	b.n	8007b1a <_malloc_r+0x4a>
 8007b7a:	bf00      	nop
 8007b7c:	2000020c 	.word	0x2000020c
 8007b80:	20000210 	.word	0x20000210

08007b84 <__ssputs_r>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	688e      	ldr	r6, [r1, #8]
 8007b8a:	429e      	cmp	r6, r3
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4690      	mov	r8, r2
 8007b92:	461f      	mov	r7, r3
 8007b94:	d838      	bhi.n	8007c08 <__ssputs_r+0x84>
 8007b96:	898a      	ldrh	r2, [r1, #12]
 8007b98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b9c:	d032      	beq.n	8007c04 <__ssputs_r+0x80>
 8007b9e:	6825      	ldr	r5, [r4, #0]
 8007ba0:	6909      	ldr	r1, [r1, #16]
 8007ba2:	eba5 0901 	sub.w	r9, r5, r1
 8007ba6:	6965      	ldr	r5, [r4, #20]
 8007ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	444b      	add	r3, r9
 8007bb4:	106d      	asrs	r5, r5, #1
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	bf38      	it	cc
 8007bba:	461d      	movcc	r5, r3
 8007bbc:	0553      	lsls	r3, r2, #21
 8007bbe:	d531      	bpl.n	8007c24 <__ssputs_r+0xa0>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7ff ff85 	bl	8007ad0 <_malloc_r>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	b950      	cbnz	r0, 8007be0 <__ssputs_r+0x5c>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	f8ca 3000 	str.w	r3, [sl]
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	6921      	ldr	r1, [r4, #16]
 8007be2:	464a      	mov	r2, r9
 8007be4:	f7ff fb88 	bl	80072f8 <memcpy>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	6126      	str	r6, [r4, #16]
 8007bf6:	6165      	str	r5, [r4, #20]
 8007bf8:	444e      	add	r6, r9
 8007bfa:	eba5 0509 	sub.w	r5, r5, r9
 8007bfe:	6026      	str	r6, [r4, #0]
 8007c00:	60a5      	str	r5, [r4, #8]
 8007c02:	463e      	mov	r6, r7
 8007c04:	42be      	cmp	r6, r7
 8007c06:	d900      	bls.n	8007c0a <__ssputs_r+0x86>
 8007c08:	463e      	mov	r6, r7
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	4641      	mov	r1, r8
 8007c10:	f000 f966 	bl	8007ee0 <memmove>
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	1b9b      	subs	r3, r3, r6
 8007c1a:	4432      	add	r2, r6
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7db      	b.n	8007bdc <__ssputs_r+0x58>
 8007c24:	462a      	mov	r2, r5
 8007c26:	f000 f981 	bl	8007f2c <_realloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1e1      	bne.n	8007bf4 <__ssputs_r+0x70>
 8007c30:	6921      	ldr	r1, [r4, #16]
 8007c32:	4650      	mov	r0, sl
 8007c34:	f7ff fefc 	bl	8007a30 <_free_r>
 8007c38:	e7c7      	b.n	8007bca <__ssputs_r+0x46>
	...

08007c3c <_svfiprintf_r>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4698      	mov	r8, r3
 8007c42:	898b      	ldrh	r3, [r1, #12]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	b09d      	sub	sp, #116	; 0x74
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	d50e      	bpl.n	8007c6e <_svfiprintf_r+0x32>
 8007c50:	690b      	ldr	r3, [r1, #16]
 8007c52:	b963      	cbnz	r3, 8007c6e <_svfiprintf_r+0x32>
 8007c54:	2140      	movs	r1, #64	; 0x40
 8007c56:	f7ff ff3b 	bl	8007ad0 <_malloc_r>
 8007c5a:	6028      	str	r0, [r5, #0]
 8007c5c:	6128      	str	r0, [r5, #16]
 8007c5e:	b920      	cbnz	r0, 8007c6a <_svfiprintf_r+0x2e>
 8007c60:	230c      	movs	r3, #12
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e0d1      	b.n	8007e0e <_svfiprintf_r+0x1d2>
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	616b      	str	r3, [r5, #20]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	2320      	movs	r3, #32
 8007c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7c:	2330      	movs	r3, #48	; 0x30
 8007c7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e28 <_svfiprintf_r+0x1ec>
 8007c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c86:	f04f 0901 	mov.w	r9, #1
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	469a      	mov	sl, r3
 8007c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c92:	b10a      	cbz	r2, 8007c98 <_svfiprintf_r+0x5c>
 8007c94:	2a25      	cmp	r2, #37	; 0x25
 8007c96:	d1f9      	bne.n	8007c8c <_svfiprintf_r+0x50>
 8007c98:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9c:	d00b      	beq.n	8007cb6 <_svfiprintf_r+0x7a>
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ff6d 	bl	8007b84 <__ssputs_r>
 8007caa:	3001      	adds	r0, #1
 8007cac:	f000 80aa 	beq.w	8007e04 <_svfiprintf_r+0x1c8>
 8007cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb2:	445a      	add	r2, fp
 8007cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80a2 	beq.w	8007e04 <_svfiprintf_r+0x1c8>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cca:	f10a 0a01 	add.w	sl, sl, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	9307      	str	r3, [sp, #28]
 8007cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd8:	4654      	mov	r4, sl
 8007cda:	2205      	movs	r2, #5
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	4851      	ldr	r0, [pc, #324]	; (8007e28 <_svfiprintf_r+0x1ec>)
 8007ce2:	f7f8 fa85 	bl	80001f0 <memchr>
 8007ce6:	9a04      	ldr	r2, [sp, #16]
 8007ce8:	b9d8      	cbnz	r0, 8007d22 <_svfiprintf_r+0xe6>
 8007cea:	06d0      	lsls	r0, r2, #27
 8007cec:	bf44      	itt	mi
 8007cee:	2320      	movmi	r3, #32
 8007cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf4:	0711      	lsls	r1, r2, #28
 8007cf6:	bf44      	itt	mi
 8007cf8:	232b      	movmi	r3, #43	; 0x2b
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007d02:	2b2a      	cmp	r3, #42	; 0x2a
 8007d04:	d015      	beq.n	8007d32 <_svfiprintf_r+0xf6>
 8007d06:	9a07      	ldr	r2, [sp, #28]
 8007d08:	4654      	mov	r4, sl
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f04f 0c0a 	mov.w	ip, #10
 8007d10:	4621      	mov	r1, r4
 8007d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d16:	3b30      	subs	r3, #48	; 0x30
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d94e      	bls.n	8007dba <_svfiprintf_r+0x17e>
 8007d1c:	b1b0      	cbz	r0, 8007d4c <_svfiprintf_r+0x110>
 8007d1e:	9207      	str	r2, [sp, #28]
 8007d20:	e014      	b.n	8007d4c <_svfiprintf_r+0x110>
 8007d22:	eba0 0308 	sub.w	r3, r0, r8
 8007d26:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	46a2      	mov	sl, r4
 8007d30:	e7d2      	b.n	8007cd8 <_svfiprintf_r+0x9c>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	1d19      	adds	r1, r3, #4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	9103      	str	r1, [sp, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bfbb      	ittet	lt
 8007d3e:	425b      	neglt	r3, r3
 8007d40:	f042 0202 	orrlt.w	r2, r2, #2
 8007d44:	9307      	strge	r3, [sp, #28]
 8007d46:	9307      	strlt	r3, [sp, #28]
 8007d48:	bfb8      	it	lt
 8007d4a:	9204      	strlt	r2, [sp, #16]
 8007d4c:	7823      	ldrb	r3, [r4, #0]
 8007d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d50:	d10c      	bne.n	8007d6c <_svfiprintf_r+0x130>
 8007d52:	7863      	ldrb	r3, [r4, #1]
 8007d54:	2b2a      	cmp	r3, #42	; 0x2a
 8007d56:	d135      	bne.n	8007dc4 <_svfiprintf_r+0x188>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	9203      	str	r2, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfb8      	it	lt
 8007d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d68:	3402      	adds	r4, #2
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e38 <_svfiprintf_r+0x1fc>
 8007d70:	7821      	ldrb	r1, [r4, #0]
 8007d72:	2203      	movs	r2, #3
 8007d74:	4650      	mov	r0, sl
 8007d76:	f7f8 fa3b 	bl	80001f0 <memchr>
 8007d7a:	b140      	cbz	r0, 8007d8e <_svfiprintf_r+0x152>
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	eba0 000a 	sub.w	r0, r0, sl
 8007d82:	fa03 f000 	lsl.w	r0, r3, r0
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	4303      	orrs	r3, r0
 8007d8a:	3401      	adds	r4, #1
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4826      	ldr	r0, [pc, #152]	; (8007e2c <_svfiprintf_r+0x1f0>)
 8007d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d98:	2206      	movs	r2, #6
 8007d9a:	f7f8 fa29 	bl	80001f0 <memchr>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d038      	beq.n	8007e14 <_svfiprintf_r+0x1d8>
 8007da2:	4b23      	ldr	r3, [pc, #140]	; (8007e30 <_svfiprintf_r+0x1f4>)
 8007da4:	bb1b      	cbnz	r3, 8007dee <_svfiprintf_r+0x1b2>
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	3307      	adds	r3, #7
 8007daa:	f023 0307 	bic.w	r3, r3, #7
 8007dae:	3308      	adds	r3, #8
 8007db0:	9303      	str	r3, [sp, #12]
 8007db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db4:	4433      	add	r3, r6
 8007db6:	9309      	str	r3, [sp, #36]	; 0x24
 8007db8:	e767      	b.n	8007c8a <_svfiprintf_r+0x4e>
 8007dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	e7a5      	b.n	8007d10 <_svfiprintf_r+0xd4>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	3401      	adds	r4, #1
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f04f 0c0a 	mov.w	ip, #10
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd6:	3a30      	subs	r2, #48	; 0x30
 8007dd8:	2a09      	cmp	r2, #9
 8007dda:	d903      	bls.n	8007de4 <_svfiprintf_r+0x1a8>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0c5      	beq.n	8007d6c <_svfiprintf_r+0x130>
 8007de0:	9105      	str	r1, [sp, #20]
 8007de2:	e7c3      	b.n	8007d6c <_svfiprintf_r+0x130>
 8007de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de8:	4604      	mov	r4, r0
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7f0      	b.n	8007dd0 <_svfiprintf_r+0x194>
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	462a      	mov	r2, r5
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <_svfiprintf_r+0x1f8>)
 8007df6:	a904      	add	r1, sp, #16
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7fe f80d 	bl	8005e18 <_printf_float>
 8007dfe:	1c42      	adds	r2, r0, #1
 8007e00:	4606      	mov	r6, r0
 8007e02:	d1d6      	bne.n	8007db2 <_svfiprintf_r+0x176>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	065b      	lsls	r3, r3, #25
 8007e08:	f53f af2c 	bmi.w	8007c64 <_svfiprintf_r+0x28>
 8007e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e0e:	b01d      	add	sp, #116	; 0x74
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	ab03      	add	r3, sp, #12
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <_svfiprintf_r+0x1f8>)
 8007e1c:	a904      	add	r1, sp, #16
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7fe fa9e 	bl	8006360 <_printf_i>
 8007e24:	e7eb      	b.n	8007dfe <_svfiprintf_r+0x1c2>
 8007e26:	bf00      	nop
 8007e28:	08008c74 	.word	0x08008c74
 8007e2c:	08008c7e 	.word	0x08008c7e
 8007e30:	08005e19 	.word	0x08005e19
 8007e34:	08007b85 	.word	0x08007b85
 8007e38:	08008c7a 	.word	0x08008c7a

08007e3c <_sbrk_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d06      	ldr	r5, [pc, #24]	; (8007e58 <_sbrk_r+0x1c>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7f9 fcfa 	bl	8001840 <_sbrk>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_sbrk_r+0x1a>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_sbrk_r+0x1a>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	2000035c 	.word	0x2000035c

08007e5c <__assert_func>:
 8007e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e5e:	4614      	mov	r4, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <__assert_func+0x2c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4605      	mov	r5, r0
 8007e68:	68d8      	ldr	r0, [r3, #12]
 8007e6a:	b14c      	cbz	r4, 8007e80 <__assert_func+0x24>
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <__assert_func+0x30>)
 8007e6e:	9100      	str	r1, [sp, #0]
 8007e70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e74:	4906      	ldr	r1, [pc, #24]	; (8007e90 <__assert_func+0x34>)
 8007e76:	462b      	mov	r3, r5
 8007e78:	f000 f80e 	bl	8007e98 <fiprintf>
 8007e7c:	f000 faa4 	bl	80083c8 <abort>
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__assert_func+0x38>)
 8007e82:	461c      	mov	r4, r3
 8007e84:	e7f3      	b.n	8007e6e <__assert_func+0x12>
 8007e86:	bf00      	nop
 8007e88:	2000000c 	.word	0x2000000c
 8007e8c:	08008c85 	.word	0x08008c85
 8007e90:	08008c92 	.word	0x08008c92
 8007e94:	08008cc0 	.word	0x08008cc0

08007e98 <fiprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b503      	push	{r0, r1, lr}
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	4805      	ldr	r0, [pc, #20]	; (8007eb8 <fiprintf+0x20>)
 8007ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	f000 f88f 	bl	8007fcc <_vfiprintf_r>
 8007eae:	b002      	add	sp, #8
 8007eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	4770      	bx	lr
 8007eb8:	2000000c 	.word	0x2000000c

08007ebc <__ascii_mbtowc>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	b901      	cbnz	r1, 8007ec2 <__ascii_mbtowc+0x6>
 8007ec0:	a901      	add	r1, sp, #4
 8007ec2:	b142      	cbz	r2, 8007ed6 <__ascii_mbtowc+0x1a>
 8007ec4:	b14b      	cbz	r3, 8007eda <__ascii_mbtowc+0x1e>
 8007ec6:	7813      	ldrb	r3, [r2, #0]
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	1e10      	subs	r0, r2, #0
 8007ece:	bf18      	it	ne
 8007ed0:	2001      	movne	r0, #1
 8007ed2:	b002      	add	sp, #8
 8007ed4:	4770      	bx	lr
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	e7fb      	b.n	8007ed2 <__ascii_mbtowc+0x16>
 8007eda:	f06f 0001 	mvn.w	r0, #1
 8007ede:	e7f8      	b.n	8007ed2 <__ascii_mbtowc+0x16>

08007ee0 <memmove>:
 8007ee0:	4288      	cmp	r0, r1
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	eb01 0402 	add.w	r4, r1, r2
 8007ee8:	d902      	bls.n	8007ef0 <memmove+0x10>
 8007eea:	4284      	cmp	r4, r0
 8007eec:	4623      	mov	r3, r4
 8007eee:	d807      	bhi.n	8007f00 <memmove+0x20>
 8007ef0:	1e43      	subs	r3, r0, #1
 8007ef2:	42a1      	cmp	r1, r4
 8007ef4:	d008      	beq.n	8007f08 <memmove+0x28>
 8007ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efe:	e7f8      	b.n	8007ef2 <memmove+0x12>
 8007f00:	4402      	add	r2, r0
 8007f02:	4601      	mov	r1, r0
 8007f04:	428a      	cmp	r2, r1
 8007f06:	d100      	bne.n	8007f0a <memmove+0x2a>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f12:	e7f7      	b.n	8007f04 <memmove+0x24>

08007f14 <__malloc_lock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__malloc_lock+0x8>)
 8007f16:	f000 bc17 	b.w	8008748 <__retarget_lock_acquire_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20000364 	.word	0x20000364

08007f20 <__malloc_unlock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__malloc_unlock+0x8>)
 8007f22:	f000 bc12 	b.w	800874a <__retarget_lock_release_recursive>
 8007f26:	bf00      	nop
 8007f28:	20000364 	.word	0x20000364

08007f2c <_realloc_r>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	4607      	mov	r7, r0
 8007f30:	4614      	mov	r4, r2
 8007f32:	460e      	mov	r6, r1
 8007f34:	b921      	cbnz	r1, 8007f40 <_realloc_r+0x14>
 8007f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	f7ff bdc8 	b.w	8007ad0 <_malloc_r>
 8007f40:	b922      	cbnz	r2, 8007f4c <_realloc_r+0x20>
 8007f42:	f7ff fd75 	bl	8007a30 <_free_r>
 8007f46:	4625      	mov	r5, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4c:	f000 fc62 	bl	8008814 <_malloc_usable_size_r>
 8007f50:	42a0      	cmp	r0, r4
 8007f52:	d20f      	bcs.n	8007f74 <_realloc_r+0x48>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4638      	mov	r0, r7
 8007f58:	f7ff fdba 	bl	8007ad0 <_malloc_r>
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d0f2      	beq.n	8007f48 <_realloc_r+0x1c>
 8007f62:	4631      	mov	r1, r6
 8007f64:	4622      	mov	r2, r4
 8007f66:	f7ff f9c7 	bl	80072f8 <memcpy>
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7ff fd5f 	bl	8007a30 <_free_r>
 8007f72:	e7e9      	b.n	8007f48 <_realloc_r+0x1c>
 8007f74:	4635      	mov	r5, r6
 8007f76:	e7e7      	b.n	8007f48 <_realloc_r+0x1c>

08007f78 <__sfputc_r>:
 8007f78:	6893      	ldr	r3, [r2, #8]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	b410      	push	{r4}
 8007f80:	6093      	str	r3, [r2, #8]
 8007f82:	da08      	bge.n	8007f96 <__sfputc_r+0x1e>
 8007f84:	6994      	ldr	r4, [r2, #24]
 8007f86:	42a3      	cmp	r3, r4
 8007f88:	db01      	blt.n	8007f8e <__sfputc_r+0x16>
 8007f8a:	290a      	cmp	r1, #10
 8007f8c:	d103      	bne.n	8007f96 <__sfputc_r+0x1e>
 8007f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f92:	f000 b94b 	b.w	800822c <__swbuf_r>
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	1c58      	adds	r0, r3, #1
 8007f9a:	6010      	str	r0, [r2, #0]
 8007f9c:	7019      	strb	r1, [r3, #0]
 8007f9e:	4608      	mov	r0, r1
 8007fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <__sfputs_r>:
 8007fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa8:	4606      	mov	r6, r0
 8007faa:	460f      	mov	r7, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	18d5      	adds	r5, r2, r3
 8007fb0:	42ac      	cmp	r4, r5
 8007fb2:	d101      	bne.n	8007fb8 <__sfputs_r+0x12>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e007      	b.n	8007fc8 <__sfputs_r+0x22>
 8007fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbc:	463a      	mov	r2, r7
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7ff ffda 	bl	8007f78 <__sfputc_r>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d1f3      	bne.n	8007fb0 <__sfputs_r+0xa>
 8007fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fcc <_vfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	b09d      	sub	sp, #116	; 0x74
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4698      	mov	r8, r3
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_vfiprintf_r+0x18>
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b90b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x18>
 8007fe0:	f000 fb14 	bl	800860c <__sinit>
 8007fe4:	4b89      	ldr	r3, [pc, #548]	; (800820c <_vfiprintf_r+0x240>)
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	d11b      	bne.n	8008022 <_vfiprintf_r+0x56>
 8007fea:	6875      	ldr	r5, [r6, #4]
 8007fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d405      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffa:	f000 fba5 	bl	8008748 <__retarget_lock_acquire_recursive>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	071b      	lsls	r3, r3, #28
 8008002:	d501      	bpl.n	8008008 <_vfiprintf_r+0x3c>
 8008004:	692b      	ldr	r3, [r5, #16]
 8008006:	b9eb      	cbnz	r3, 8008044 <_vfiprintf_r+0x78>
 8008008:	4629      	mov	r1, r5
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f96e 	bl	80082ec <__swsetup_r>
 8008010:	b1c0      	cbz	r0, 8008044 <_vfiprintf_r+0x78>
 8008012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008014:	07dc      	lsls	r4, r3, #31
 8008016:	d50e      	bpl.n	8008036 <_vfiprintf_r+0x6a>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	; 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <_vfiprintf_r+0x244>)
 8008024:	429d      	cmp	r5, r3
 8008026:	d101      	bne.n	800802c <_vfiprintf_r+0x60>
 8008028:	68b5      	ldr	r5, [r6, #8]
 800802a:	e7df      	b.n	8007fec <_vfiprintf_r+0x20>
 800802c:	4b79      	ldr	r3, [pc, #484]	; (8008214 <_vfiprintf_r+0x248>)
 800802e:	429d      	cmp	r5, r3
 8008030:	bf08      	it	eq
 8008032:	68f5      	ldreq	r5, [r6, #12]
 8008034:	e7da      	b.n	8007fec <_vfiprintf_r+0x20>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4ed      	bmi.n	8008018 <_vfiprintf_r+0x4c>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f000 fb84 	bl	800874a <__retarget_lock_release_recursive>
 8008042:	e7e9      	b.n	8008018 <_vfiprintf_r+0x4c>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	2330      	movs	r3, #48	; 0x30
 8008054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008218 <_vfiprintf_r+0x24c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0xa2>
 800806a:	2a25      	cmp	r2, #37	; 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x96>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xc0>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff93 	bl	8007fa6 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80aa 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	; 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80a2 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ac:	931a      	str	r3, [sp, #104]	; 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4858      	ldr	r0, [pc, #352]	; (8008218 <_vfiprintf_r+0x24c>)
 80080b8:	f7f8 f89a 	bl	80001f0 <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x12c>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	; 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	; 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x13c>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	4654      	mov	r4, sl
 80080e0:	2000      	movs	r0, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	; 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94e      	bls.n	8008190 <_vfiprintf_r+0x1c4>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x156>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x156>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	46a2      	mov	sl, r4
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xe2>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	; 0x2e
 8008126:	d10c      	bne.n	8008142 <_vfiprintf_r+0x176>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	; 0x2a
 800812c:	d135      	bne.n	800819a <_vfiprintf_r+0x1ce>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	f04f 33ff 	movlt.w	r3, #4294967295
 800813e:	3402      	adds	r4, #2
 8008140:	9305      	str	r3, [sp, #20]
 8008142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008228 <_vfiprintf_r+0x25c>
 8008146:	7821      	ldrb	r1, [r4, #0]
 8008148:	2203      	movs	r2, #3
 800814a:	4650      	mov	r0, sl
 800814c:	f7f8 f850 	bl	80001f0 <memchr>
 8008150:	b140      	cbz	r0, 8008164 <_vfiprintf_r+0x198>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	eba0 000a 	sub.w	r0, r0, sl
 8008158:	fa03 f000 	lsl.w	r0, r3, r0
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	4303      	orrs	r3, r0
 8008160:	3401      	adds	r4, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	482c      	ldr	r0, [pc, #176]	; (800821c <_vfiprintf_r+0x250>)
 800816a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816e:	2206      	movs	r2, #6
 8008170:	f7f8 f83e 	bl	80001f0 <memchr>
 8008174:	2800      	cmp	r0, #0
 8008176:	d03f      	beq.n	80081f8 <_vfiprintf_r+0x22c>
 8008178:	4b29      	ldr	r3, [pc, #164]	; (8008220 <_vfiprintf_r+0x254>)
 800817a:	bb1b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x1f8>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	3307      	adds	r3, #7
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	443b      	add	r3, r7
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	e767      	b.n	8008060 <_vfiprintf_r+0x94>
 8008190:	fb0c 3202 	mla	r2, ip, r2, r3
 8008194:	460c      	mov	r4, r1
 8008196:	2001      	movs	r0, #1
 8008198:	e7a5      	b.n	80080e6 <_vfiprintf_r+0x11a>
 800819a:	2300      	movs	r3, #0
 800819c:	3401      	adds	r4, #1
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0c0a 	mov.w	ip, #10
 80081a6:	4620      	mov	r0, r4
 80081a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d903      	bls.n	80081ba <_vfiprintf_r+0x1ee>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c5      	beq.n	8008142 <_vfiprintf_r+0x176>
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	e7c3      	b.n	8008142 <_vfiprintf_r+0x176>
 80081ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80081be:	4604      	mov	r4, r0
 80081c0:	2301      	movs	r3, #1
 80081c2:	e7f0      	b.n	80081a6 <_vfiprintf_r+0x1da>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	462a      	mov	r2, r5
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <_vfiprintf_r+0x258>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7fd fe22 	bl	8005e18 <_printf_float>
 80081d4:	4607      	mov	r7, r0
 80081d6:	1c78      	adds	r0, r7, #1
 80081d8:	d1d6      	bne.n	8008188 <_vfiprintf_r+0x1bc>
 80081da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081dc:	07d9      	lsls	r1, r3, #31
 80081de:	d405      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e0:	89ab      	ldrh	r3, [r5, #12]
 80081e2:	059a      	lsls	r2, r3, #22
 80081e4:	d402      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e8:	f000 faaf 	bl	800874a <__retarget_lock_release_recursive>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	065b      	lsls	r3, r3, #25
 80081f0:	f53f af12 	bmi.w	8008018 <_vfiprintf_r+0x4c>
 80081f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f6:	e711      	b.n	800801c <_vfiprintf_r+0x50>
 80081f8:	ab03      	add	r3, sp, #12
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462a      	mov	r2, r5
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_vfiprintf_r+0x258>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	4630      	mov	r0, r6
 8008204:	f7fe f8ac 	bl	8006360 <_printf_i>
 8008208:	e7e4      	b.n	80081d4 <_vfiprintf_r+0x208>
 800820a:	bf00      	nop
 800820c:	08008dec 	.word	0x08008dec
 8008210:	08008e0c 	.word	0x08008e0c
 8008214:	08008dcc 	.word	0x08008dcc
 8008218:	08008c74 	.word	0x08008c74
 800821c:	08008c7e 	.word	0x08008c7e
 8008220:	08005e19 	.word	0x08005e19
 8008224:	08007fa7 	.word	0x08007fa7
 8008228:	08008c7a 	.word	0x08008c7a

0800822c <__swbuf_r>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	4614      	mov	r4, r2
 8008232:	4605      	mov	r5, r0
 8008234:	b118      	cbz	r0, 800823e <__swbuf_r+0x12>
 8008236:	6983      	ldr	r3, [r0, #24]
 8008238:	b90b      	cbnz	r3, 800823e <__swbuf_r+0x12>
 800823a:	f000 f9e7 	bl	800860c <__sinit>
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <__swbuf_r+0x98>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d12b      	bne.n	800829c <__swbuf_r+0x70>
 8008244:	686c      	ldr	r4, [r5, #4]
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	d52f      	bpl.n	80082b0 <__swbuf_r+0x84>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b36b      	cbz	r3, 80082b0 <__swbuf_r+0x84>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6963      	ldr	r3, [r4, #20]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	4283      	cmp	r3, r0
 8008260:	4637      	mov	r7, r6
 8008262:	dc04      	bgt.n	800826e <__swbuf_r+0x42>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f93c 	bl	80084e4 <_fflush_r>
 800826c:	bb30      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	701e      	strb	r6, [r3, #0]
 800827c:	6963      	ldr	r3, [r4, #20]
 800827e:	3001      	adds	r0, #1
 8008280:	4283      	cmp	r3, r0
 8008282:	d004      	beq.n	800828e <__swbuf_r+0x62>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	07db      	lsls	r3, r3, #31
 8008288:	d506      	bpl.n	8008298 <__swbuf_r+0x6c>
 800828a:	2e0a      	cmp	r6, #10
 800828c:	d104      	bne.n	8008298 <__swbuf_r+0x6c>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f927 	bl	80084e4 <_fflush_r>
 8008296:	b988      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 8008298:	4638      	mov	r0, r7
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <__swbuf_r+0x9c>)
 800829e:	429c      	cmp	r4, r3
 80082a0:	d101      	bne.n	80082a6 <__swbuf_r+0x7a>
 80082a2:	68ac      	ldr	r4, [r5, #8]
 80082a4:	e7cf      	b.n	8008246 <__swbuf_r+0x1a>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <__swbuf_r+0xa0>)
 80082a8:	429c      	cmp	r4, r3
 80082aa:	bf08      	it	eq
 80082ac:	68ec      	ldreq	r4, [r5, #12]
 80082ae:	e7ca      	b.n	8008246 <__swbuf_r+0x1a>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f81a 	bl	80082ec <__swsetup_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d0cb      	beq.n	8008254 <__swbuf_r+0x28>
 80082bc:	f04f 37ff 	mov.w	r7, #4294967295
 80082c0:	e7ea      	b.n	8008298 <__swbuf_r+0x6c>
 80082c2:	bf00      	nop
 80082c4:	08008dec 	.word	0x08008dec
 80082c8:	08008e0c 	.word	0x08008e0c
 80082cc:	08008dcc 	.word	0x08008dcc

080082d0 <__ascii_wctomb>:
 80082d0:	b149      	cbz	r1, 80082e6 <__ascii_wctomb+0x16>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	bf85      	ittet	hi
 80082d6:	238a      	movhi	r3, #138	; 0x8a
 80082d8:	6003      	strhi	r3, [r0, #0]
 80082da:	700a      	strbls	r2, [r1, #0]
 80082dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082e0:	bf98      	it	ls
 80082e2:	2001      	movls	r0, #1
 80082e4:	4770      	bx	lr
 80082e6:	4608      	mov	r0, r1
 80082e8:	4770      	bx	lr
	...

080082ec <__swsetup_r>:
 80082ec:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <__swsetup_r+0xcc>)
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	b125      	cbz	r5, 8008302 <__swsetup_r+0x16>
 80082f8:	69ab      	ldr	r3, [r5, #24]
 80082fa:	b913      	cbnz	r3, 8008302 <__swsetup_r+0x16>
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f985 	bl	800860c <__sinit>
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <__swsetup_r+0xd0>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d10f      	bne.n	8008328 <__swsetup_r+0x3c>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	d42c      	bmi.n	800836e <__swsetup_r+0x82>
 8008314:	06dd      	lsls	r5, r3, #27
 8008316:	d411      	bmi.n	800833c <__swsetup_r+0x50>
 8008318:	2309      	movs	r3, #9
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e03e      	b.n	80083a6 <__swsetup_r+0xba>
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <__swsetup_r+0xd4>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d101      	bne.n	8008332 <__swsetup_r+0x46>
 800832e:	68ac      	ldr	r4, [r5, #8]
 8008330:	e7eb      	b.n	800830a <__swsetup_r+0x1e>
 8008332:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <__swsetup_r+0xd8>)
 8008334:	429c      	cmp	r4, r3
 8008336:	bf08      	it	eq
 8008338:	68ec      	ldreq	r4, [r5, #12]
 800833a:	e7e6      	b.n	800830a <__swsetup_r+0x1e>
 800833c:	0758      	lsls	r0, r3, #29
 800833e:	d512      	bpl.n	8008366 <__swsetup_r+0x7a>
 8008340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008342:	b141      	cbz	r1, 8008356 <__swsetup_r+0x6a>
 8008344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <__swsetup_r+0x66>
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff fb6f 	bl	8007a30 <_free_r>
 8008352:	2300      	movs	r3, #0
 8008354:	6363      	str	r3, [r4, #52]	; 0x34
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0308 	orr.w	r3, r3, #8
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b94b      	cbnz	r3, 8008386 <__swsetup_r+0x9a>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d003      	beq.n	8008386 <__swsetup_r+0x9a>
 800837e:	4621      	mov	r1, r4
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fa07 	bl	8008794 <__smakebuf_r>
 8008386:	89a0      	ldrh	r0, [r4, #12]
 8008388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800838c:	f010 0301 	ands.w	r3, r0, #1
 8008390:	d00a      	beq.n	80083a8 <__swsetup_r+0xbc>
 8008392:	2300      	movs	r3, #0
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	6963      	ldr	r3, [r4, #20]
 8008398:	425b      	negs	r3, r3
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	b943      	cbnz	r3, 80083b2 <__swsetup_r+0xc6>
 80083a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083a4:	d1ba      	bne.n	800831c <__swsetup_r+0x30>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0781      	lsls	r1, r0, #30
 80083aa:	bf58      	it	pl
 80083ac:	6963      	ldrpl	r3, [r4, #20]
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	e7f4      	b.n	800839c <__swsetup_r+0xb0>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7f7      	b.n	80083a6 <__swsetup_r+0xba>
 80083b6:	bf00      	nop
 80083b8:	2000000c 	.word	0x2000000c
 80083bc:	08008dec 	.word	0x08008dec
 80083c0:	08008e0c 	.word	0x08008e0c
 80083c4:	08008dcc 	.word	0x08008dcc

080083c8 <abort>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	2006      	movs	r0, #6
 80083cc:	f000 fa52 	bl	8008874 <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7f9 f9bd 	bl	8001750 <_exit>
	...

080083d8 <__sflush_r>:
 80083d8:	898a      	ldrh	r2, [r1, #12]
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	0710      	lsls	r0, r2, #28
 80083e2:	460c      	mov	r4, r1
 80083e4:	d458      	bmi.n	8008498 <__sflush_r+0xc0>
 80083e6:	684b      	ldr	r3, [r1, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc05      	bgt.n	80083f8 <__sflush_r+0x20>
 80083ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x20>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0f9      	beq.n	80083f2 <__sflush_r+0x1a>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	d032      	beq.n	8008470 <__sflush_r+0x98>
 800840a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	075a      	lsls	r2, r3, #29
 8008410:	d505      	bpl.n	800841e <__sflush_r+0x46>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008418:	b10b      	cbz	r3, 800841e <__sflush_r+0x46>
 800841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841c:	1ac0      	subs	r0, r0, r3
 800841e:	2300      	movs	r3, #0
 8008420:	4602      	mov	r2, r0
 8008422:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	d106      	bne.n	800843e <__sflush_r+0x66>
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	291d      	cmp	r1, #29
 8008434:	d82c      	bhi.n	8008490 <__sflush_r+0xb8>
 8008436:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <__sflush_r+0x108>)
 8008438:	40ca      	lsrs	r2, r1
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d528      	bpl.n	8008490 <__sflush_r+0xb8>
 800843e:	2200      	movs	r2, #0
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	d504      	bpl.n	8008454 <__sflush_r+0x7c>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	d101      	bne.n	8008452 <__sflush_r+0x7a>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b903      	cbnz	r3, 8008454 <__sflush_r+0x7c>
 8008452:	6560      	str	r0, [r4, #84]	; 0x54
 8008454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008456:	602f      	str	r7, [r5, #0]
 8008458:	2900      	cmp	r1, #0
 800845a:	d0ca      	beq.n	80083f2 <__sflush_r+0x1a>
 800845c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008460:	4299      	cmp	r1, r3
 8008462:	d002      	beq.n	800846a <__sflush_r+0x92>
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff fae3 	bl	8007a30 <_free_r>
 800846a:	2000      	movs	r0, #0
 800846c:	6360      	str	r0, [r4, #52]	; 0x34
 800846e:	e7c1      	b.n	80083f4 <__sflush_r+0x1c>
 8008470:	6a21      	ldr	r1, [r4, #32]
 8008472:	2301      	movs	r3, #1
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	1c41      	adds	r1, r0, #1
 800847a:	d1c7      	bne.n	800840c <__sflush_r+0x34>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c4      	beq.n	800840c <__sflush_r+0x34>
 8008482:	2b1d      	cmp	r3, #29
 8008484:	d001      	beq.n	800848a <__sflush_r+0xb2>
 8008486:	2b16      	cmp	r3, #22
 8008488:	d101      	bne.n	800848e <__sflush_r+0xb6>
 800848a:	602f      	str	r7, [r5, #0]
 800848c:	e7b1      	b.n	80083f2 <__sflush_r+0x1a>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7ad      	b.n	80083f4 <__sflush_r+0x1c>
 8008498:	690f      	ldr	r7, [r1, #16]
 800849a:	2f00      	cmp	r7, #0
 800849c:	d0a9      	beq.n	80083f2 <__sflush_r+0x1a>
 800849e:	0793      	lsls	r3, r2, #30
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	600f      	str	r7, [r1, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2300      	movne	r3, #0
 80084ac:	eba6 0807 	sub.w	r8, r6, r7
 80084b0:	608b      	str	r3, [r1, #8]
 80084b2:	f1b8 0f00 	cmp.w	r8, #0
 80084b6:	dd9c      	ble.n	80083f2 <__sflush_r+0x1a>
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dc06      	bgt.n	80084d6 <__sflush_r+0xfe>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e78e      	b.n	80083f4 <__sflush_r+0x1c>
 80084d6:	4407      	add	r7, r0
 80084d8:	eba8 0800 	sub.w	r8, r8, r0
 80084dc:	e7e9      	b.n	80084b2 <__sflush_r+0xda>
 80084de:	bf00      	nop
 80084e0:	20400001 	.word	0x20400001

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6983      	ldr	r3, [r0, #24]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f000 f887 	bl	800860c <__sinit>
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <_fflush_r+0x6c>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d11b      	bne.n	800853c <_fflush_r+0x58>
 8008504:	686c      	ldr	r4, [r5, #4]
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ef      	beq.n	80084ee <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x3a>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x3a>
 8008518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851a:	f000 f915 	bl	8008748 <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff59 	bl	80083d8 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	4605      	mov	r5, r0
 800852c:	d4e0      	bmi.n	80084f0 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4dd      	bmi.n	80084f0 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f908 	bl	800874a <__retarget_lock_release_recursive>
 800853a:	e7d9      	b.n	80084f0 <_fflush_r+0xc>
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <_fflush_r+0x70>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d101      	bne.n	8008546 <_fflush_r+0x62>
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	e7df      	b.n	8008506 <_fflush_r+0x22>
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_fflush_r+0x74>)
 8008548:	429c      	cmp	r4, r3
 800854a:	bf08      	it	eq
 800854c:	68ec      	ldreq	r4, [r5, #12]
 800854e:	e7da      	b.n	8008506 <_fflush_r+0x22>
 8008550:	08008dec 	.word	0x08008dec
 8008554:	08008e0c 	.word	0x08008e0c
 8008558:	08008dcc 	.word	0x08008dcc

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	; 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	; 0x5c
 800857a:	f7fd fba5 	bl	8005cc8 <memset>
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x38>)
 8008580:	6263      	str	r3, [r4, #36]	; 0x24
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x3c>)
 8008584:	62a3      	str	r3, [r4, #40]	; 0x28
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <std+0x40>)
 8008588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <std+0x44>)
 800858c:	6224      	str	r4, [r4, #32]
 800858e:	6323      	str	r3, [r4, #48]	; 0x30
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	080088ad 	.word	0x080088ad
 8008598:	080088cf 	.word	0x080088cf
 800859c:	08008907 	.word	0x08008907
 80085a0:	0800892b 	.word	0x0800892b

080085a4 <_cleanup_r>:
 80085a4:	4901      	ldr	r1, [pc, #4]	; (80085ac <_cleanup_r+0x8>)
 80085a6:	f000 b8af 	b.w	8008708 <_fwalk_reent>
 80085aa:	bf00      	nop
 80085ac:	080084e5 	.word	0x080084e5

080085b0 <__sfmoreglue>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	1e4a      	subs	r2, r1, #1
 80085b4:	2568      	movs	r5, #104	; 0x68
 80085b6:	4355      	muls	r5, r2
 80085b8:	460e      	mov	r6, r1
 80085ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085be:	f7ff fa87 	bl	8007ad0 <_malloc_r>
 80085c2:	4604      	mov	r4, r0
 80085c4:	b140      	cbz	r0, 80085d8 <__sfmoreglue+0x28>
 80085c6:	2100      	movs	r1, #0
 80085c8:	e9c0 1600 	strd	r1, r6, [r0]
 80085cc:	300c      	adds	r0, #12
 80085ce:	60a0      	str	r0, [r4, #8]
 80085d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d4:	f7fd fb78 	bl	8005cc8 <memset>
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f000 b8b3 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000368 	.word	0x20000368

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f000 b8ae 	b.w	800874a <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	20000368 	.word	0x20000368

080085f4 <__sinit_lock_acquire>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_acquire+0x8>)
 80085f6:	f000 b8a7 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	20000363 	.word	0x20000363

08008600 <__sinit_lock_release>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__sinit_lock_release+0x8>)
 8008602:	f000 b8a2 	b.w	800874a <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	20000363 	.word	0x20000363

0800860c <__sinit>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	f7ff fff0 	bl	80085f4 <__sinit_lock_acquire>
 8008614:	69a3      	ldr	r3, [r4, #24]
 8008616:	b11b      	cbz	r3, 8008620 <__sinit+0x14>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7ff bff0 	b.w	8008600 <__sinit_lock_release>
 8008620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008624:	6523      	str	r3, [r4, #80]	; 0x50
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <__sinit+0x68>)
 8008628:	4a13      	ldr	r2, [pc, #76]	; (8008678 <__sinit+0x6c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	62a2      	str	r2, [r4, #40]	; 0x28
 800862e:	42a3      	cmp	r3, r4
 8008630:	bf04      	itt	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	61a3      	streq	r3, [r4, #24]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f820 	bl	800867c <__sfp>
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f81c 	bl	800867c <__sfp>
 8008644:	60a0      	str	r0, [r4, #8]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f818 	bl	800867c <__sfp>
 800864c:	2200      	movs	r2, #0
 800864e:	60e0      	str	r0, [r4, #12]
 8008650:	2104      	movs	r1, #4
 8008652:	6860      	ldr	r0, [r4, #4]
 8008654:	f7ff ff82 	bl	800855c <std>
 8008658:	68a0      	ldr	r0, [r4, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	2109      	movs	r1, #9
 800865e:	f7ff ff7d 	bl	800855c <std>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	2202      	movs	r2, #2
 8008666:	2112      	movs	r1, #18
 8008668:	f7ff ff78 	bl	800855c <std>
 800866c:	2301      	movs	r3, #1
 800866e:	61a3      	str	r3, [r4, #24]
 8008670:	e7d2      	b.n	8008618 <__sinit+0xc>
 8008672:	bf00      	nop
 8008674:	08008a4c 	.word	0x08008a4c
 8008678:	080085a5 	.word	0x080085a5

0800867c <__sfp>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4607      	mov	r7, r0
 8008680:	f7ff ffac 	bl	80085dc <__sfp_lock_acquire>
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <__sfp+0x84>)
 8008686:	681e      	ldr	r6, [r3, #0]
 8008688:	69b3      	ldr	r3, [r6, #24]
 800868a:	b913      	cbnz	r3, 8008692 <__sfp+0x16>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffbd 	bl	800860c <__sinit>
 8008692:	3648      	adds	r6, #72	; 0x48
 8008694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	d503      	bpl.n	80086a4 <__sfp+0x28>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	b30b      	cbz	r3, 80086e4 <__sfp+0x68>
 80086a0:	6836      	ldr	r6, [r6, #0]
 80086a2:	e7f7      	b.n	8008694 <__sfp+0x18>
 80086a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a8:	b9d5      	cbnz	r5, 80086e0 <__sfp+0x64>
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <__sfp+0x88>)
 80086ac:	60e3      	str	r3, [r4, #12]
 80086ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b2:	6665      	str	r5, [r4, #100]	; 0x64
 80086b4:	f000 f847 	bl	8008746 <__retarget_lock_init_recursive>
 80086b8:	f7ff ff96 	bl	80085e8 <__sfp_lock_release>
 80086bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086c4:	6025      	str	r5, [r4, #0]
 80086c6:	61a5      	str	r5, [r4, #24]
 80086c8:	2208      	movs	r2, #8
 80086ca:	4629      	mov	r1, r5
 80086cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d0:	f7fd fafa 	bl	8005cc8 <memset>
 80086d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086dc:	4620      	mov	r0, r4
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	3468      	adds	r4, #104	; 0x68
 80086e2:	e7d9      	b.n	8008698 <__sfp+0x1c>
 80086e4:	2104      	movs	r1, #4
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ff62 	bl	80085b0 <__sfmoreglue>
 80086ec:	4604      	mov	r4, r0
 80086ee:	6030      	str	r0, [r6, #0]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1d5      	bne.n	80086a0 <__sfp+0x24>
 80086f4:	f7ff ff78 	bl	80085e8 <__sfp_lock_release>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	e7ee      	b.n	80086dc <__sfp+0x60>
 80086fe:	bf00      	nop
 8008700:	08008a4c 	.word	0x08008a4c
 8008704:	ffff0001 	.word	0xffff0001

08008708 <_fwalk_reent>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	4688      	mov	r8, r1
 8008710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008714:	2700      	movs	r7, #0
 8008716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871a:	f1b9 0901 	subs.w	r9, r9, #1
 800871e:	d505      	bpl.n	800872c <_fwalk_reent+0x24>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	2c00      	cmp	r4, #0
 8008724:	d1f7      	bne.n	8008716 <_fwalk_reent+0xe>
 8008726:	4638      	mov	r0, r7
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d907      	bls.n	8008742 <_fwalk_reent+0x3a>
 8008732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008736:	3301      	adds	r3, #1
 8008738:	d003      	beq.n	8008742 <_fwalk_reent+0x3a>
 800873a:	4629      	mov	r1, r5
 800873c:	4630      	mov	r0, r6
 800873e:	47c0      	blx	r8
 8008740:	4307      	orrs	r7, r0
 8008742:	3568      	adds	r5, #104	; 0x68
 8008744:	e7e9      	b.n	800871a <_fwalk_reent+0x12>

08008746 <__retarget_lock_init_recursive>:
 8008746:	4770      	bx	lr

08008748 <__retarget_lock_acquire_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_release_recursive>:
 800874a:	4770      	bx	lr

0800874c <__swhatbuf_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2900      	cmp	r1, #0
 8008756:	b096      	sub	sp, #88	; 0x58
 8008758:	4614      	mov	r4, r2
 800875a:	461d      	mov	r5, r3
 800875c:	da07      	bge.n	800876e <__swhatbuf_r+0x22>
 800875e:	2300      	movs	r3, #0
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	89b3      	ldrh	r3, [r6, #12]
 8008764:	061a      	lsls	r2, r3, #24
 8008766:	d410      	bmi.n	800878a <__swhatbuf_r+0x3e>
 8008768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876c:	e00e      	b.n	800878c <__swhatbuf_r+0x40>
 800876e:	466a      	mov	r2, sp
 8008770:	f000 f902 	bl	8008978 <_fstat_r>
 8008774:	2800      	cmp	r0, #0
 8008776:	dbf2      	blt.n	800875e <__swhatbuf_r+0x12>
 8008778:	9a01      	ldr	r2, [sp, #4]
 800877a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800877e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008782:	425a      	negs	r2, r3
 8008784:	415a      	adcs	r2, r3
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	e7ee      	b.n	8008768 <__swhatbuf_r+0x1c>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	2000      	movs	r0, #0
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	b016      	add	sp, #88	; 0x58
 8008792:	bd70      	pop	{r4, r5, r6, pc}

08008794 <__smakebuf_r>:
 8008794:	898b      	ldrh	r3, [r1, #12]
 8008796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008798:	079d      	lsls	r5, r3, #30
 800879a:	4606      	mov	r6, r0
 800879c:	460c      	mov	r4, r1
 800879e:	d507      	bpl.n	80087b0 <__smakebuf_r+0x1c>
 80087a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	2301      	movs	r3, #1
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	b002      	add	sp, #8
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	ab01      	add	r3, sp, #4
 80087b2:	466a      	mov	r2, sp
 80087b4:	f7ff ffca 	bl	800874c <__swhatbuf_r>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff f987 	bl	8007ad0 <_malloc_r>
 80087c2:	b948      	cbnz	r0, 80087d8 <__smakebuf_r+0x44>
 80087c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c8:	059a      	lsls	r2, r3, #22
 80087ca:	d4ef      	bmi.n	80087ac <__smakebuf_r+0x18>
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	e7e3      	b.n	80087a0 <__smakebuf_r+0xc>
 80087d8:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <__smakebuf_r+0x7c>)
 80087da:	62b3      	str	r3, [r6, #40]	; 0x28
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	6163      	str	r3, [r4, #20]
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	6120      	str	r0, [r4, #16]
 80087ee:	b15b      	cbz	r3, 8008808 <__smakebuf_r+0x74>
 80087f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f8d1 	bl	800899c <_isatty_r>
 80087fa:	b128      	cbz	r0, 8008808 <__smakebuf_r+0x74>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	89a0      	ldrh	r0, [r4, #12]
 800880a:	4305      	orrs	r5, r0
 800880c:	81a5      	strh	r5, [r4, #12]
 800880e:	e7cd      	b.n	80087ac <__smakebuf_r+0x18>
 8008810:	080085a5 	.word	0x080085a5

08008814 <_malloc_usable_size_r>:
 8008814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008818:	1f18      	subs	r0, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfbc      	itt	lt
 800881e:	580b      	ldrlt	r3, [r1, r0]
 8008820:	18c0      	addlt	r0, r0, r3
 8008822:	4770      	bx	lr

08008824 <_raise_r>:
 8008824:	291f      	cmp	r1, #31
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	d904      	bls.n	8008838 <_raise_r+0x14>
 800882e:	2316      	movs	r3, #22
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883a:	b112      	cbz	r2, 8008842 <_raise_r+0x1e>
 800883c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008840:	b94b      	cbnz	r3, 8008856 <_raise_r+0x32>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f830 	bl	80088a8 <_getpid_r>
 8008848:	462a      	mov	r2, r5
 800884a:	4601      	mov	r1, r0
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008852:	f000 b817 	b.w	8008884 <_kill_r>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d00a      	beq.n	8008870 <_raise_r+0x4c>
 800885a:	1c59      	adds	r1, r3, #1
 800885c:	d103      	bne.n	8008866 <_raise_r+0x42>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	e7e7      	b.n	8008836 <_raise_r+0x12>
 8008866:	2400      	movs	r4, #0
 8008868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800886c:	4628      	mov	r0, r5
 800886e:	4798      	blx	r3
 8008870:	2000      	movs	r0, #0
 8008872:	e7e0      	b.n	8008836 <_raise_r+0x12>

08008874 <raise>:
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <raise+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7ff bfd3 	b.w	8008824 <_raise_r>
 800887e:	bf00      	nop
 8008880:	2000000c 	.word	0x2000000c

08008884 <_kill_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	; (80088a4 <_kill_r+0x20>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	f7f8 ff4d 	bl	8001730 <_kill>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d102      	bne.n	80088a0 <_kill_r+0x1c>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	b103      	cbz	r3, 80088a0 <_kill_r+0x1c>
 800889e:	6023      	str	r3, [r4, #0]
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
 80088a2:	bf00      	nop
 80088a4:	2000035c 	.word	0x2000035c

080088a8 <_getpid_r>:
 80088a8:	f7f8 bf3a 	b.w	8001720 <_getpid>

080088ac <__sread>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b4:	f000 f894 	bl	80089e0 <_read_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	bfab      	itete	ge
 80088bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088be:	89a3      	ldrhlt	r3, [r4, #12]
 80088c0:	181b      	addge	r3, r3, r0
 80088c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088c6:	bfac      	ite	ge
 80088c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ca:	81a3      	strhlt	r3, [r4, #12]
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__swrite>:
 80088ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	461f      	mov	r7, r3
 80088d4:	898b      	ldrh	r3, [r1, #12]
 80088d6:	05db      	lsls	r3, r3, #23
 80088d8:	4605      	mov	r5, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	4616      	mov	r6, r2
 80088de:	d505      	bpl.n	80088ec <__swrite+0x1e>
 80088e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e4:	2302      	movs	r3, #2
 80088e6:	2200      	movs	r2, #0
 80088e8:	f000 f868 	bl	80089bc <_lseek_r>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008902:	f000 b817 	b.w	8008934 <_write_r>

08008906 <__sseek>:
 8008906:	b510      	push	{r4, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890e:	f000 f855 	bl	80089bc <_lseek_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	bf15      	itete	ne
 8008918:	6560      	strne	r0, [r4, #84]	; 0x54
 800891a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800891e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008922:	81a3      	strheq	r3, [r4, #12]
 8008924:	bf18      	it	ne
 8008926:	81a3      	strhne	r3, [r4, #12]
 8008928:	bd10      	pop	{r4, pc}

0800892a <__sclose>:
 800892a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892e:	f000 b813 	b.w	8008958 <_close_r>
	...

08008934 <_write_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	; (8008954 <_write_r+0x20>)
 8008938:	4604      	mov	r4, r0
 800893a:	4608      	mov	r0, r1
 800893c:	4611      	mov	r1, r2
 800893e:	2200      	movs	r2, #0
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f8 ff2b 	bl	800179e <_write>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_write_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_write_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	2000035c 	.word	0x2000035c

08008958 <_close_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_close_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f8 ff37 	bl	80017d6 <_close>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_close_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_close_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	2000035c 	.word	0x2000035c

08008978 <_fstat_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_fstat_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f7f8 ff32 	bl	80017ee <_fstat>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_fstat_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_fstat_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	2000035c 	.word	0x2000035c

0800899c <_isatty_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	; (80089b8 <_isatty_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f8 ff31 	bl	800180e <_isatty>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_isatty_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_isatty_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	2000035c 	.word	0x2000035c

080089bc <_lseek_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_lseek_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f8 ff2a 	bl	8001824 <_lseek>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_lseek_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_lseek_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	2000035c 	.word	0x2000035c

080089e0 <_read_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d07      	ldr	r5, [pc, #28]	; (8008a00 <_read_r+0x20>)
 80089e4:	4604      	mov	r4, r0
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	602a      	str	r2, [r5, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f7f8 feb8 	bl	8001764 <_read>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_read_r+0x1e>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_read_r+0x1e>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	2000035c 	.word	0x2000035c

08008a04 <_init>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr

08008a10 <_fini>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr
